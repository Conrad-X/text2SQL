[
    {
        "question_id": 1470,
        "database": "debit_card_specializing",
        "evidence": "",
        "question": "How many gas stations in CZE has Premium gas?",
        "schema_used": {
            "gasstations": [
                "gasstationid",
                "country",
                "segment"
            ]
        },
        "gold": "SELECT COUNT(GasStationID) FROM gasstations WHERE Country = 'CZE' AND Segment = 'Premium'",
        "candidates": {
            "4": "SELECT COUNT(GasStationID)  FROM gasstations  WHERE Country = 'CZE' AND Segment = 'Premium';",
            "1": "SELECT COUNT(GasStationID)  FROM gasstations  WHERE Country = 'CZE' AND Segment = 'Premium';",
            "5": "SELECT COUNT(*) FROM gasstations WHERE Country = 'CZE' AND Segment = 'Premium'",
            "2": "SELECT COUNT(*) FROM gasstations WHERE Country = 'CZE' AND Segment = 'Premium'",
            "3": "SELECT COUNT(GasStationID) FROM gasstations WHERE Country = 'CZE' AND Segment = 'Premium'",
            "6": "SELECT count(*) FROM gasstations WHERE Country  =  \"CZE\" AND Segment  =  \"Premium\""
        }
    },
    {
        "question_id": 1471,
        "database": "debit_card_specializing",
        "evidence": "ratio of customers who pay in EUR against customers who pay in CZK = count(Currency = 'EUR') / count(Currency = 'CZK').",
        "question": "What is the ratio of customers who pay in EUR against customers who pay in CZK?",
        "schema_used": {
            "customers": [
                "currency"
            ]
        },
        "gold": "SELECT CAST(SUM(IIF(Currency = 'EUR', 1, 0)) AS FLOAT) / SUM(IIF(Currency = 'CZK', 1, 0)) AS ratio FROM customers",
        "candidates": {
            "4": "SELECT      CAST(SUM(IIF(Currency = 'EUR', 1, 0)) AS REAL) * 100 /      SUM(IIF(Currency = 'CZK', 1, 0)) FROM customers",
            "1": "SELECT      CAST(SUM(CASE WHEN Currency = 'EUR' THEN 1 ELSE 0 END) AS REAL) * 100 /      SUM(CASE WHEN Currency = 'CZK' THEN 1 ELSE 0 END) AS ratio FROM customers;",
            "2": "SELECT CAST(SUM(CASE WHEN Currency = 'EUR' THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN Currency = 'CZK' THEN 1 ELSE 0 END) FROM customers",
            "5": "SELECT CAST(SUM(CASE WHEN Currency = 'EUR' THEN 1 ELSE 0 END) AS REAL) / SUM(CASE WHEN Currency = 'CZK' THEN 1 ELSE 0 END) FROM customers",
            "6": "SELECT CAST(SUM(IIF(Currency = 'EUR', 1, 0)) AS REAL) / SUM(IIF(Currency = 'CZK', 1, 0)) FROM customers",
            "3": "SELECT CAST(SUM(IIF(Currency = 'EUR', 1, 0)) AS REAL) / SUM(IIF(Currency = 'CZK', 1, 0)) FROM customers"
        }
    },
    {
        "question_id": 1472,
        "database": "debit_card_specializing",
        "evidence": "Year 2012 can be presented as Between 201201 And 201212; The first 4 strings of the Date values in the yearmonth table can represent year.",
        "question": "In 2012, who had the least consumption in LAM?",
        "schema_used": {
            "customers": [
                "customerid",
                "segment"
            ],
            "yearmonth": [
                "customerid",
                "consumption",
                "date"
            ]
        },
        "gold": "SELECT T1.CustomerID FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Segment = 'LAM' AND SUBSTR(T2.Date, 1, 4) = '2012' GROUP BY T1.CustomerID ORDER BY SUM(T2.Consumption) ASC LIMIT 1",
        "candidates": {
            "4": "SELECT T1.CustomerID FROM yearmonth AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE substr(T1.Date, 1, 4) = '2012' AND T2.Segment = 'LAM' ORDER BY T1.Consumption ASC LIMIT 1;",
            "1": "SELECT T1.CustomerID, MIN(T2.Consumption)  FROM customers AS T1  INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID  WHERE SUBSTR(T2.Date, 1, 4) = '2012' AND T1.Segment = 'LAM' GROUP BY T1.CustomerID ORDER BY MIN(T2.Consumption) ASC LIMIT 1;",
            "2": "SELECT T1.CustomerID FROM yearmonth AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Segment = 'LAM' AND SUBSTR(T1.Date, 1, 4) = '2012' ORDER BY T1.Consumption ASC LIMIT 1",
            "5": "SELECT T1.CustomerID FROM yearmonth AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Segment = 'LAM' AND SUBSTR(T1.Date, 1, 4) = '2012' ORDER BY T1.Consumption ASC LIMIT 1",
            "6": "SELECT T1.CustomerID FROM customers AS T1 JOIN yearmonth AS T2 ON T1.CustomerID  =  T2.CustomerID WHERE T1.Segment  =  \"LAM\" AND T2.Date LIKE '2012%' ORDER BY T2.Consumption ASC LIMIT 1",
            "3": "SELECT T1.CustomerID FROM yearmonth AS T1 JOIN customers AS T2 ON T1.CustomerID  =  T2.CustomerID WHERE T2.Segment  =  'LAM' AND T1.Date LIKE '2012%' ORDER BY T1.Consumption ASC LIMIT 1"
        }
    },
    {
        "question_id": 1473,
        "database": "debit_card_specializing",
        "evidence": "Average Monthly consumption = AVG(Consumption) / 12; Year 2013 can be presented as Between 201301 And 201312; The first 4 strings of the Date values in the yearmonth table can represent year.",
        "question": "What was the average monthly consumption of customers in SME for the year 2013?",
        "schema_used": {
            "customers": [
                "customerid",
                "segment"
            ],
            "yearmonth": [
                "customerid",
                "consumption",
                "date"
            ]
        },
        "gold": "SELECT AVG(T2.Consumption) / 12 FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE SUBSTR(T2.Date, 1, 4) = '2013' AND T1.Segment = 'SME'",
        "candidates": {
            "1": "SELECT AVG(Consumption) AS AvgMonthlyConsumption FROM yearmonth AS YM INNER JOIN customers AS C ON YM.CustomerID = C.CustomerID WHERE C.Segment = 'SME' AND SUBSTR(YM.Date, 1, 4) = '2013';",
            "4": "SELECT AVG(Consumption) AS AvgMonthlyConsumption FROM yearmonth AS YM INNER JOIN customers AS C ON YM.CustomerID = C.CustomerID WHERE C.Segment = 'SME' AND SUBSTR(YM.Date, 1, 4) = '2013';",
            "5": "SELECT AVG(T1.Consumption) FROM yearmonth AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Segment = 'SME' AND SUBSTR(T1.Date, 1, 4) = '2013'",
            "2": "SELECT CAST(AVG(T1.Consumption) AS REAL) / 12 FROM yearmonth AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Segment = 'SME' AND SUBSTR(T1.Date, 1, 4) = '2013'",
            "6": "SELECT AVG(T2.Consumption) FROM customers AS T1 JOIN yearmonth AS T2 ON T1.CustomerID  =  T2.CustomerID WHERE T1.Segment  =  'SME' AND SUBSTR(T2.Date, 1, 4)  =  '2013'",
            "3": "SELECT AVG(T2.Consumption) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Segment = 'SME' AND T2.Date LIKE '2013%'"
        }
    },
    {
        "question_id": 1474,
        "database": "debit_card_specializing",
        "evidence": "Year 2011 can be presented as Between 201101 And 201112, which means between January and December in 2011",
        "question": "Which customers, paying in CZK, consumed the most gas in 2011?",
        "schema_used": {
            "customers": [
                "customerid",
                "currency"
            ],
            "yearmonth": [
                "customerid",
                "date",
                "consumption"
            ]
        },
        "gold": "SELECT T1.CustomerID FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Currency = 'CZK' AND T2.Date BETWEEN 201101 AND 201112 GROUP BY T1.CustomerID ORDER BY SUM(T2.Consumption) DESC LIMIT 1",
        "candidates": {
            "1": "SELECT T1.CustomerID  FROM yearmonth AS T1  INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID  WHERE T1.Date BETWEEN '201101' AND '201112'  AND T2.Currency = 'CZK'  GROUP BY T1.CustomerID  ORDER BY SUM(T1.Consumption) DESC  LIMIT 1;",
            "5": "SELECT T1.CustomerID FROM yearmonth AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Currency = 'CZK' AND T1.Date BETWEEN '201101' AND '201112' GROUP BY T1.CustomerID ORDER BY SUM(T1.Date) DESC LIMIT 1",
            "2": "SELECT T1.CustomerID FROM yearmonth AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Currency = 'CZK' AND T1.Date BETWEEN '201101' AND '201112' GROUP BY T1.CustomerID ORDER BY SUM(T1.Consumption) DESC LIMIT 1",
            "4": "SELECT T1.CustomerID  FROM yearmonth AS T1  INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID  WHERE T1.Date BETWEEN '201101' AND '201112'  AND T2.Currency = 'CZK'  GROUP BY T1.CustomerID  ORDER BY SUM(T1.Date) DESC  LIMIT 1;",
            "6": "SELECT T1.CustomerID FROM yearmonth AS T1 JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Currency = \"CZK\" AND T1.Date BETWEEN 201101 AND 201112 GROUP BY T1.CustomerID ORDER BY COUNT(*) DESC LIMIT 1",
            "3": "SELECT   T1.CustomerID FROM yearmonth AS T1 INNER JOIN customers AS T2   ON T1.CustomerID = T2.CustomerID WHERE   T2.Currency = 'CZK' AND T1.Date BETWEEN 201101 AND 201112 GROUP BY   T1.CustomerID ORDER BY   SUM(T1.Consumption) DESC LIMIT 1;"
        }
    },
    {
        "question_id": 1475,
        "database": "debit_card_specializing",
        "evidence": "Year 2012 can be presented as Between 201201 And 201212, which means between January and December in 2012",
        "question": "How many customers in KAM had a consumption of less than 30,000 for the year 2012?",
        "schema_used": {
            "yearmonth": [
                "customerid",
                "consumption",
                "date"
            ],
            "customers": [
                "customerid",
                "segment"
            ]
        },
        "gold": "SELECT COUNT(*) FROM ( SELECT T2.CustomerID FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Segment = 'KAM' AND SUBSTRING(T2.Date, 1, 4) = '2012' GROUP BY T2.CustomerID HAVING SUM(T2.Consumption) < 30000 ) AS t1",
        "candidates": {
            "4": "SELECT COUNT(DISTINCT t1.CustomerID) FROM customers AS t1 INNER JOIN yearmonth AS t2 ON t1.CustomerID = t2.CustomerID WHERE t1.Segment = 'KAM'  AND t2.Date BETWEEN '201201' AND '201212' AND t2.Consumption < 30000;",
            "1": "SELECT COUNT(DISTINCT ym.CustomerID) FROM yearmonth ym JOIN customers c ON ym.CustomerID = c.CustomerID WHERE c.Segment = 'KAM'   AND ym.Date BETWEEN '201201' AND '201212'   AND ym.Consumption < 30000;",
            "2": "SELECT COUNT(T1.CustomerID) FROM yearmonth AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Segment = 'KAM' AND T1.Date BETWEEN 201201 AND 201212 AND T1.Consumption < 30000",
            "5": "SELECT COUNT(T1.CustomerID) FROM yearmonth AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Segment = 'KAM' AND T1.Date BETWEEN 201201 AND 201212 AND T1.Consumption < 30000",
            "6": "SELECT count(*) FROM customers AS t1 JOIN yearmonth AS t2 ON t1.customerid  =  t2.customerid WHERE t1.segment  =  'KAM' AND t2.date BETWEEN 201201 AND 201212 AND t2.consumption  <  30000",
            "3": "SELECT   COUNT(T1.CustomerID) FROM customers AS T1 INNER JOIN yearmonth AS T2   ON T1.CustomerID = T2.CustomerID WHERE   T2.Date BETWEEN 201201 AND 201212   AND T1.Segment = 'KAM'   AND T2.Consumption < 30000;"
        }
    },
    {
        "question_id": 1476,
        "database": "debit_card_specializing",
        "evidence": "Year 2012 can be presented as Between 201201 And 201212; The first 4 strings of the Date values in the yearmonth table can represent year; Difference in Consumption = CZK customers consumption in 2012 - EUR customers consumption in 2012",
        "question": "What was the difference in gas consumption between CZK-paying customers and EUR-paying customers in 2012?",
        "schema_used": {
            "customers": [
                "customerid",
                "currency"
            ],
            "yearmonth": [
                "customerid",
                "date",
                "consumption"
            ]
        },
        "gold": "SELECT SUM(IIF(T1.Currency = 'CZK', T2.Consumption, 0)) - SUM(IIF(T1.Currency = 'EUR', T2.Consumption, 0)) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE SUBSTR(T2.Date, 1, 4) = '2012'",
        "candidates": {
            "4": "SELECT      (SELECT SUM(Consumption)       FROM yearmonth AS ym       JOIN customers AS c ON ym.CustomerID = c.CustomerID       WHERE c.Currency = 'CZK' AND ym.Date BETWEEN '201201' AND '201212') -     (SELECT SUM(Consumption)       FROM yearmonth AS ym       JOIN customers AS c ON ym.CustomerID = c.CustomerID       WHERE c.Currency = 'EUR' AND ym.Date BETWEEN '201201' AND '201212') AS difference_in_consumption;",
            "1": "SELECT      (SELECT SUM(Consumption)       FROM yearmonth AS ym       JOIN customers AS c ON ym.CustomerID = c.CustomerID       WHERE c.Currency = 'CZK' AND ym.Date BETWEEN '201201' AND '201212') -     (SELECT SUM(Consumption)       FROM yearmonth AS ym       JOIN customers AS c ON ym.CustomerID = c.CustomerID       WHERE c.Currency = 'EUR' AND ym.Date BETWEEN '201201' AND '201212') AS ConsumptionDifference;",
            "5": "SELECT SUM(IIF(T1.Currency = 'CZK', T2.Consumption, 0)) - SUM(IIF(T1.Currency = 'EUR', T2.Consumption, 0))  FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID  WHERE SUBSTR(T2.Date, 1, 4) = '2012'",
            "2": "SELECT SUM(CASE WHEN T1.Currency = 'CZK' THEN T2.Consumption ELSE 0 END) - SUM(CASE WHEN T1.Currency = 'EUR' THEN T2.Consumption ELSE 0 END)  FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID  WHERE SUBSTR(T2.Date, 1, 4) = '2012'",
            "6": "SELECT SUM(CASE WHEN T2.Currency = 'CZK' THEN T1.Consumption ELSE 0 END) - SUM(CASE WHEN T2.Currency = 'EUR' THEN T1.Consumption ELSE 0 END) FROM yearmonth AS T1 JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Date LIKE '2012%'",
            "3": "SELECT   SUM(CASE WHEN T2.Currency = 'CZK' THEN T1.Consumption ELSE 0 END) - SUM(CASE WHEN T2.Currency = 'EUR' THEN T1.Consumption ELSE 0 END) FROM yearmonth AS T1 INNER JOIN customers AS T2   ON T1.CustomerID = T2.CustomerID WHERE   T1.Date LIKE '2012%';"
        }
    },
    {
        "question_id": 1477,
        "database": "debit_card_specializing",
        "evidence": "",
        "question": "Which year recorded the most gas use paid in EUR?",
        "schema_used": {
            "yearmonth": [
                "date",
                "customerid",
                "consumption"
            ],
            "customers": [
                "customerid",
                "currency"
            ]
        },
        "gold": "SELECT SUBSTRING(T2.Date, 1, 4) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Currency = 'EUR' GROUP BY SUBSTRING(T2.Date, 1, 4) ORDER BY SUM(T2.Consumption) DESC LIMIT 1",
        "candidates": {
            "4": "SELECT strftime('%Y', Date) AS Year  FROM yearmonth  INNER JOIN customers ON yearmonth.CustomerID = customers.CustomerID  WHERE Currency = 'EUR'  GROUP BY Year  ORDER BY COUNT(*) DESC  LIMIT 1;",
            "1": "SELECT Date AS Year  FROM yearmonth AS ym JOIN customers AS c ON ym.CustomerID = c.CustomerID WHERE c.Currency = 'EUR' GROUP BY Date ORDER BY SUM(Consumption) DESC LIMIT 1;",
            "2": "SELECT strftime('%Y', Date) FROM yearmonth INNER JOIN customers ON yearmonth.CustomerID = customers.CustomerID WHERE Currency = 'EUR' GROUP BY strftime('%Y', Date) ORDER BY SUM(Consumption) DESC LIMIT 1",
            "5": "SELECT strftime('%Y', Date) FROM yearmonth AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Currency = 'EUR' GROUP BY strftime('%Y', Date) ORDER BY SUM(T1.Gas) DESC LIMIT 1",
            "6": "SELECT substr(T1.Date, 1, 4) FROM yearmonth AS T1 JOIN customers AS T2 ON T1.CustomerID  =  T2.CustomerID WHERE T2.Currency  =  'EUR' GROUP BY substr(T1.Date, 1, 4) ORDER BY count(*) DESC LIMIT 1",
            "3": "SELECT   Date FROM yearmonth AS T1 INNER JOIN customers AS T2   ON T1.CustomerID = T2.CustomerID WHERE   T2.Currency = 'EUR' GROUP BY   Date ORDER BY   SUM(T1.Consumption) DESC LIMIT 1;"
        }
    },
    {
        "question_id": 1478,
        "database": "debit_card_specializing",
        "evidence": "",
        "question": "Which segment had the least consumption?",
        "schema_used": {
            "customers": [
                "segment",
                "customerid"
            ],
            "yearmonth": [
                "customerid",
                "consumption"
            ]
        },
        "gold": "SELECT T1.Segment FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID GROUP BY T1.Segment ORDER BY SUM(T2.Consumption) ASC LIMIT 1",
        "candidates": {
            "1": "SELECT Segment  FROM customers  INNER JOIN yearmonth ON customers.CustomerID = yearmonth.CustomerID  GROUP BY Segment  ORDER BY SUM(Consumption) ASC  LIMIT 1;",
            "4": "SELECT T1.Segment  FROM customers AS T1  INNER JOIN yearmonth AS T2  ON T1.CustomerID = T2.CustomerID  GROUP BY T1.Segment  ORDER BY SUM(T2.Consumption) ASC  LIMIT 1;",
            "2": "SELECT T1.Segment FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID GROUP BY T1.Segment ORDER BY SUM(T2.Consumption) LIMIT 1",
            "5": "SELECT T1.Segment FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID GROUP BY T1.Segment ORDER BY SUM(T2.Consumption) LIMIT 1",
            "6": "SELECT T2.Segment FROM yearmonth AS T1 JOIN customers AS T2 ON T1.CustomerID  =  T2.CustomerID GROUP BY T2.Segment ORDER BY sum(T1.Consumption) ASC LIMIT 1",
            "3": "SELECT T2.Segment FROM yearmonth AS T1 JOIN customers AS T2 ON T1.CustomerID  =  T2.CustomerID GROUP BY T2.Segment ORDER BY sum(T1.Consumption) ASC LIMIT 1"
        }
    },
    {
        "question_id": 1479,
        "database": "debit_card_specializing",
        "evidence": "The first 4 strings of the Date values in the yearmonth table can represent year.",
        "question": "Which year recorded the most consumption of gas paid in CZK?",
        "schema_used": {
            "yearmonth": [
                "date",
                "customerid",
                "consumption"
            ],
            "customers": [
                "customerid",
                "currency"
            ]
        },
        "gold": "SELECT SUBSTR(T2.Date, 1, 4) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Currency = 'CZK' GROUP BY SUBSTR(T2.Date, 1, 4) ORDER BY SUM(T2.Consumption) DESC LIMIT 1",
        "candidates": {
            "4": "SELECT SUBSTR(Date, 1, 4) AS Year  FROM yearmonth AS T1  INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID  WHERE T2.Currency = 'CZK' GROUP BY Year ORDER BY COUNT(*) DESC LIMIT 1;",
            "1": "SELECT strftime('%Y', Date) AS Year FROM yearmonth INNER JOIN customers ON yearmonth.CustomerID = customers.CustomerID WHERE customers.Currency = 'CZK' GROUP BY Year ORDER BY SUM(Consumption) DESC LIMIT 1;",
            "5": "SELECT SUBSTR(Date,1,4) FROM yearmonth AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Currency = 'CZK' GROUP BY SUBSTR(Date,1,4) ORDER BY COUNT(*) DESC LIMIT 1",
            "2": "SELECT SUBSTR(T1.Date,1,4) FROM yearmonth AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Currency = 'CZK' GROUP BY SUBSTR(T1.Date,1,4) ORDER BY SUM(T1.Consumption) DESC LIMIT 1",
            "6": "SELECT SUBSTR(T1.Date, 1, 4) FROM yearmonth AS T1 JOIN customers AS T2 ON T1.CustomerID  =  T2.CustomerID WHERE T2.Currency  =  'CZK' GROUP BY SUBSTR(T1.Date, 1, 4) ORDER BY count(*) DESC LIMIT 1",
            "3": "SELECT   SUBSTR(T1.Date, 1, 4) FROM yearmonth AS T1 INNER JOIN customers AS T2   ON T1.CustomerID = T2.CustomerID WHERE   T2.Currency = 'CZK' GROUP BY   SUBSTR(T1.Date, 1, 4) ORDER BY   SUM(T1.Consumption) DESC LIMIT 1;"
        }
    },
    {
        "question_id": 1480,
        "database": "debit_card_specializing",
        "evidence": "Year 2013 can be presented as Between 201301 And 201312; The first 4 strings of the Date values in the yearmonth table can represent year; The 5th and 6th string of the date can refer to month.",
        "question": "What was the gas consumption peak month for SME customers in 2013?",
        "schema_used": {
            "yearmonth": [
                "date",
                "customerid",
                "consumption"
            ],
            "customers": [
                "customerid",
                "segment"
            ]
        },
        "gold": "SELECT SUBSTR(T2.Date, 5, 2) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE SUBSTR(T2.Date, 1, 4) = '2013' AND T1.Segment = 'SME' GROUP BY SUBSTR(T2.Date, 5, 2) ORDER BY SUM(T2.Consumption) DESC LIMIT 1",
        "candidates": {
            "4": "SELECT Date  FROM yearmonth  INNER JOIN customers ON yearmonth.CustomerID = customers.CustomerID  WHERE customers.Segment = 'SME' AND Date BETWEEN '201301' AND '201312'  ORDER BY Consumption DESC  LIMIT 1;",
            "1": "SELECT Date, MAX(Consumption)  FROM yearmonth  INNER JOIN customers ON yearmonth.CustomerID = customers.CustomerID  WHERE customers.Segment = 'SME' AND Date BETWEEN '201301' AND '201312' GROUP BY Date ORDER BY MAX(Consumption) DESC  LIMIT 1;",
            "2": "SELECT Date FROM yearmonth AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Segment = 'SME' AND T1.Date BETWEEN '201301' AND '201312' ORDER BY T1.Consumption DESC LIMIT 1",
            "5": "SELECT Date FROM yearmonth AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Segment = 'SME' AND T1.Date BETWEEN '201301' AND '201312' ORDER BY T1.Consumption DESC LIMIT 1",
            "6": "SELECT SUBSTR(Date, 5, 2) FROM yearmonth AS T1 JOIN customers AS T2 ON T1.CustomerID  =  T2.CustomerID WHERE T2.Segment  =  'SME' AND T1.Date BETWEEN 201301 AND 201312 GROUP BY SUBSTR(Date, 5, 2) ORDER BY SUM(T1.Consumption) DESC LIMIT 1",
            "3": "SELECT   SUBSTR(Date, 5, 2) FROM yearmonth WHERE   CustomerID IN (     SELECT       CustomerID     FROM customers     WHERE       Segment = 'SME'   )   AND SUBSTR(Date, 1, 4) = '2013' GROUP BY   SUBSTR(Date, 5, 2) ORDER BY   SUM(Consumption) DESC LIMIT 1;"
        }
    },
    {
        "question_id": 1481,
        "database": "debit_card_specializing",
        "evidence": "annual average consumption of customer with the lowest consumption in each segment = total consumption per year / the number of customer with lowest consumption in each segment; Difference in annual average = SME's annual average - LAM's annual average; Difference in annual average = LAM's annual average - KAM's annual average; Year 2013 can be presented as Between 201301 And 201312; The first 4 strings of the Date values in the yearmonth table can represent year.",
        "question": "What is the difference in the annual average consumption of the customers with the least amount of consumption paid in CZK for 2013 between SME and LAM, LAM and KAM, and KAM and SME?",
        "schema_used": {
            "yearmonth": [
                "consumption",
                "customerid",
                "date"
            ],
            "customers": [
                "customerid",
                "currency",
                "segment"
            ]
        },
        "gold": "SELECT CAST(SUM(IIF(T1.Segment = 'SME', T2.Consumption, 0)) AS REAL) / COUNT(T1.CustomerID) - CAST(SUM(IIF(T1.Segment = 'LAM', T2.Consumption, 0)) AS REAL) / COUNT(T1.CustomerID) , CAST(SUM(IIF(T1.Segment = 'LAM', T2.Consumption, 0)) AS REAL) / COUNT(T1.CustomerID) - CAST(SUM(IIF(T1.Segment = 'KAM', T2.Consumption, 0)) AS REAL) / COUNT(T1.CustomerID) , CAST(SUM(IIF(T1.Segment = 'KAM', T2.Consumption, 0)) AS REAL) / COUNT(T1.CustomerID) - CAST(SUM(IIF(T1.Segment = 'SME', T2.Consumption, 0)) AS REAL) / COUNT(T1.CustomerID) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Currency = 'CZK' AND T2.Consumption = ( SELECT MIN(Consumption) FROM yearmonth ) AND T2.Date BETWEEN 201301 AND 201312",
        "candidates": {
            "5": "SELECT SUM(CASE WHEN T1.Segment = 'SME' THEN T2.Consumption ELSE 0 END) / COUNT(CASE WHEN T1.Segment = 'SME' THEN T2.CustomerID ELSE NULL END) - SUM(CASE WHEN T1.Segment = 'LAM' THEN T2.Consumption ELSE 0 END) / COUNT(CASE WHEN T1.Segment = 'LAM' THEN T2.CustomerID ELSE NULL END),  SUM(CASE WHEN T1.Segment = 'LAM' THEN T2.Consumption ELSE 0 END) / COUNT(CASE WHEN T1.Segment = 'LAM' THEN T2.CustomerID ELSE NULL END) - SUM(CASE WHEN T1.Segment = 'KAM' THEN T2.Consumption ELSE 0 END) / COUNT(CASE WHEN T1.Segment = 'KAM' THEN T2.CustomerID ELSE NULL END),  SUM(CASE WHEN T1.Segment = 'KAM' THEN T2.Consumption ELSE 0 END) / COUNT(CASE WHEN T1.Segment = 'KAM' THEN T2.CustomerID ELSE NULL END) - SUM(CASE WHEN T1.Segment = 'SME' THEN T2.Consumption ELSE 0 END) / COUNT(CASE WHEN T1.Segment = 'SME' THEN T2.CustomerID ELSE NULL END)  FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID  WHERE T1.Currency = 'CZK' AND SUBSTR(T2.Date, 1, 4) = '2013'",
            "2": "SELECT SUM(CASE WHEN T1.Segment = 'SME' THEN T2.Consumption ELSE 0 END) / COUNT(CASE WHEN T1.Segment = 'SME' THEN T2.CustomerID ELSE NULL END) - SUM(CASE WHEN T1.Segment = 'LAM' THEN T2.Consumption ELSE 0 END) / COUNT(CASE WHEN T1.Segment = 'LAM' THEN T2.CustomerID ELSE NULL END),  SUM(CASE WHEN T1.Segment = 'LAM' THEN T2.Consumption ELSE 0 END) / COUNT(CASE WHEN T1.Segment = 'LAM' THEN T2.CustomerID ELSE NULL END) - SUM(CASE WHEN T1.Segment = 'KAM' THEN T2.Consumption ELSE 0 END) / COUNT(CASE WHEN T1.Segment = 'KAM' THEN T2.CustomerID ELSE NULL END),  SUM(CASE WHEN T1.Segment = 'KAM' THEN T2.Consumption ELSE 0 END) / COUNT(CASE WHEN T1.Segment = 'KAM' THEN T2.CustomerID ELSE NULL END) - SUM(CASE WHEN T1.Segment = 'SME' THEN T2.Consumption ELSE 0 END) / COUNT(CASE WHEN T1.Segment = 'SME' THEN T2.CustomerID ELSE NULL END)  FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID  WHERE T1.Currency = 'CZK' AND SUBSTR(T2.Date, 1, 4) = '2013'",
            "3": "SELECT   SUM(CASE WHEN T1.Segment = 'SME' THEN T2.avg_consumption ELSE 0 END) - SUM(CASE WHEN T1.Segment = 'LAM' THEN T2.avg_consumption ELSE 0 END),   SUM(CASE WHEN T1.Segment = 'LAM' THEN T2.avg_consumption ELSE 0 END) - SUM(CASE WHEN T1.Segment = 'KAM' THEN T2.avg_consumption ELSE 0 END),   SUM(CASE WHEN T1.Segment = 'KAM' THEN T2.avg_consumption ELSE 0 END) - SUM(CASE WHEN T1.Segment = 'SME' THEN T2.avg_consumption ELSE 0 END) FROM customers AS T1 INNER JOIN (   SELECT     CustomerID,     AVG(Consumption) AS avg_consumption   FROM yearmonth   WHERE     STRFTIME('%Y', Date) = '2013'   GROUP BY     CustomerID ) AS T2   ON T1.CustomerID = T2.CustomerID WHERE   T1.Currency = 'CZK';",
            "6": "SELECT CAST(SUM(CASE WHEN T1.Segment = 'SME' THEN T2.Consumption ELSE 0 END) AS REAL) / COUNT(CASE WHEN T1.Segment = 'SME' THEN T2.Consumption ELSE NULL END) - CAST(SUM(CASE WHEN T1.Segment = 'LAM' THEN T2.Consumption ELSE 0 END) AS REAL) / COUNT(CASE WHEN T1.Segment = 'LAM' THEN T2.Consumption ELSE NULL END) , CAST(SUM(CASE WHEN T1.Segment = 'LAM' THEN T2.Consumption ELSE 0 END) AS REAL) / COUNT(CASE WHEN T1.Segment = 'LAM' THEN T2.Consumption ELSE NULL END) - CAST(SUM(CASE WHEN T1.Segment = 'KAM' THEN T2.Consumption ELSE 0 END) AS REAL) / COUNT(CASE WHEN T1.Segment = 'KAM' THEN T2.Consumption ELSE NULL END) , CAST(SUM(CASE WHEN T1.Segment = 'KAM' THEN T2.Consumption ELSE 0 END) AS REAL) / COUNT(CASE WHEN T1.Segment = 'KAM' THEN T2.Consumption ELSE NULL END) - CAST(SUM(CASE WHEN T1.Segment = 'SME' THEN T2.Consumption ELSE 0 END) AS REAL) / COUNT(CASE WHEN T1.Segment = 'SME' THEN T2.Consumption ELSE NULL END) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Currency = 'CZK' AND SUBSTR(T2.Date, 1, 4) = '2013'",
            "4": "SELECT WITH yearly_consumption AS (     SELECT          c.Segment,         y.CustomerID,         SUM(y.Consumption) AS total_annual_consumption     FROM          yearmonth y     JOIN          customers c ON y.CustomerID = c.CustomerID     WHERE          SUBSTR(y.Date, 1, 4) = '2013'         AND c.Currency = 'CZK'     GROUP BY          c.Segment, y.CustomerID ), min_consumption_customers AS (     SELECT          Segment,         MIN(total_annual_consumption) AS min_annual_consumption     FROM          yearly_consumption     GROUP BY          Segment ) SELECT     (SELECT total_annual_consumption / 12       FROM yearly_consumption yc      JOIN min_consumption_customers mcc ON yc.Segment = mcc.Segment      WHERE yc.total_annual_consumption = mcc.min_annual_consumption AND yc.Segment = 'SME')     -     (SELECT total_annual_consumption / 12       FROM yearly_consumption yc      JOIN min_consumption_customers mcc ON yc.Segment = mcc.Segment      WHERE yc.total_annual_consumption = mcc.min_annual_consumption AND yc.Segment = 'LAM') AS diff_SME_LAM,      (SELECT total_annual_consumption / 12       FROM yearly_consumption yc      JOIN min_consumption_customers mcc ON yc.Segment = mcc.Segment      WHERE yc.total_annual_consumption = mcc.min_annual_consumption AND yc.Segment = 'LAM')     -     (SELECT total_annual_consumption / 12       FROM yearly_consumption yc      JOIN min_consumption_customers mcc ON yc.Segment = mcc.Segment      WHERE yc.total_annual_consumption = mcc.min_annual_consumption AND yc.Segment = 'KAM') AS diff_LAM_KAM,      (SELECT total_annual_consumption / 12       FROM yearly_consumption yc      JOIN min_consumption_customers mcc ON yc.Segment = mcc.Segment      WHERE yc.total_annual_consumption = mcc.min_annual_consumption AND yc.Segment = 'SME')     -     (SELECT total_annual_consumption / 12       FROM yearly_consumption yc      JOIN min_consumption_customers mcc ON yc.Segment = mcc.Segment      WHERE yc.total_annual_consumption = mcc.min_annual_consumption AND yc.Segment = 'KAM') AS diff_SME_KAM;",
            "1": "SELECT WITH yearly_consumption AS (     SELECT          c.Segment,         y.CustomerID,         SUM(y.Consumption) AS total_annual_consumption     FROM          yearmonth y     JOIN          customers c ON y.CustomerID = c.CustomerID     WHERE          SUBSTR(y.Date, 1, 4) = '2013'         AND c.Currency = 'CZK'     GROUP BY          c.Segment, y.CustomerID ), min_consumption_customers AS (     SELECT          Segment,         MIN(total_annual_consumption) AS min_annual_consumption     FROM          yearly_consumption     GROUP BY          Segment ) SELECT      (SELECT total_annual_consumption       FROM yearly_consumption yc       JOIN min_consumption_customers mcc ON yc.Segment = mcc.Segment       WHERE yc.total_annual_consumption = mcc.min_annual_consumption AND yc.Segment = 'SME') / 1 -     (SELECT total_annual_consumption       FROM yearly_consumption yc       JOIN min_consumption_customers mcc ON yc.Segment = mcc.Segment       WHERE yc.total_annual_consumption = mcc.min_annual_consumption AND yc.Segment = 'LAM') / 1 AS diff_SME_LAM,      (SELECT total_annual_consumption       FROM yearly_consumption yc       JOIN min_consumption_customers mcc ON yc.Segment = mcc.Segment       WHERE yc.total_annual_consumption = mcc.min_annual_consumption AND yc.Segment = 'LAM') / 1 -     (SELECT total_annual_consumption       FROM yearly_consumption yc       JOIN min_consumption_customers mcc ON yc.Segment = mcc.Segment       WHERE yc.total_annual_consumption = mcc.min_annual_consumption AND yc.Segment = 'KAM') / 1 AS diff_LAM_KAM,      (SELECT total_annual_consumption       FROM yearly_consumption yc       JOIN min_consumption_customers mcc ON yc.Segment = mcc.Segment       WHERE yc.total_annual_consumption = mcc.min_annual_consumption AND yc.Segment = 'KAM') / 1 -     (SELECT total_annual_consumption       FROM yearly_consumption yc       JOIN min_consumption_customers mcc ON yc.Segment = mcc.Segment       WHERE yc.total_annual_consumption = mcc.min_annual_consumption AND yc.Segment = 'SME') / 1 AS diff_KAM_SME;"
        }
    },
    {
        "question_id": 1482,
        "database": "debit_card_specializing",
        "evidence": "Increase or Decrease = consumption for 2013 - consumption for 2012; Percentage of Increase = (Increase or Decrease / consumption for 2013) * 100%; The first 4 strings of the Date values in the yearmonth table can represent year",
        "question": "Which of the three segments\u2014SME, LAM and KAM\u2014has the biggest and lowest percentage increases in consumption paid in EUR between 2012 and 2013?",
        "schema_used": {
            "customers": [
                "customerid",
                "segment"
            ],
            "yearmonth": [
                "customerid",
                "consumption",
                "date"
            ]
        },
        "gold": "SELECT CAST((SUM(IIF(T1.Segment = 'SME' AND T2.Date LIKE '2013%', T2.Consumption, 0)) - SUM(IIF(T1.Segment = 'SME' AND T2.Date LIKE '2012%', T2.Consumption, 0))) AS FLOAT) * 100 / SUM(IIF(T1.Segment = 'SME' AND T2.Date LIKE '2012%', T2.Consumption, 0)), CAST(SUM(IIF(T1.Segment = 'LAM' AND T2.Date LIKE '2013%', T2.Consumption, 0)) - SUM(IIF(T1.Segment = 'LAM' AND T2.Date LIKE '2012%', T2.Consumption, 0)) AS FLOAT) * 100 / SUM(IIF(T1.Segment = 'LAM' AND T2.Date LIKE '2012%', T2.Consumption, 0)) , CAST(SUM(IIF(T1.Segment = 'KAM' AND T2.Date LIKE '2013%', T2.Consumption, 0)) - SUM(IIF(T1.Segment = 'KAM' AND T2.Date LIKE '2012%', T2.Consumption, 0)) AS FLOAT) * 100 / SUM(IIF(T1.Segment = 'KAM' AND T2.Date LIKE '2012%', T2.Consumption, 0)) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID",
        "candidates": {
            "5": "SELECT T1.Segment,  MAX(T1.PercentageIncrease),  MIN(T1.PercentageIncrease)  FROM  (  SELECT    customers.Segment,    (      SUM(CASE WHEN SUBSTR(yearmonth.Date, 1, 4) = '2013' THEN yearmonth.Consumption ELSE 0 END) - SUM(CASE WHEN SUBSTR(yearmonth.Date, 1, 4) = '2012' THEN yearmonth.Consumption ELSE 0 END)    ) * 100.0 / SUM(CASE WHEN SUBSTR(yearmonth.Date, 1, 4) = '2013' THEN yearmonth.Consumption ELSE 0 END) AS PercentageIncrease  FROM    yearmonth  INNER JOIN    customers  ON    yearmonth.CustomerID = customers.CustomerID  WHERE    customers.Currency = 'EUR'  GROUP BY    customers.Segment  ) AS T1  GROUP BY  T1.Segment",
            "2": "SELECT T1.Segment,  SUM(CASE WHEN T2.Date LIKE '2013%' THEN T2.Consumption ELSE 0 END) - SUM(CASE WHEN T2.Date LIKE '2012%' THEN T2.Consumption ELSE 0 END) AS Increase,  CAST((SUM(CASE WHEN T2.Date LIKE '2013%' THEN T2.Consumption ELSE 0 END) - SUM(CASE WHEN T2.Date LIKE '2012%' THEN T2.Consumption ELSE 0 END)) AS REAL) * 100 / SUM(CASE WHEN T2.Date LIKE '2013%' THEN T2.Consumption ELSE 0 END) AS PercentageIncrease  FROM customers AS T1  INNER JOIN yearmonth AS T2  ON T1.CustomerID = T2.CustomerID  WHERE T1.Currency = 'EUR'  GROUP BY T1.Segment  ORDER BY PercentageIncrease DESC, PercentageIncrease ASC  LIMIT 2",
            "4": "SELECT WITH consumption_2012 AS (     SELECT          ym.CustomerID,          c.Segment,         ym.Consumption AS Consumption_2012     FROM          yearmonth ym     JOIN          customers c ON ym.CustomerID = c.CustomerID     WHERE          SUBSTR(ym.Date, 1, 4) = '2012'         AND c.Currency = 'EUR' ),  consumption_2013 AS (     SELECT          ym.CustomerID,          ym.Consumption AS Consumption_2013     FROM          yearmonth ym     WHERE          SUBSTR(ym.Date, 1, 4) = '2013'         AND ym.CustomerID IN (SELECT CustomerID FROM consumption_2012) ) SELECT      c.Segment,     MAX((c2.Consumption_2013 - c1.Consumption_2012) / c2.Consumption_2013 * 100) AS Max_Percent_Increase,     MIN((c2.Consumption_2013 - c1.Consumption_2012) / c2.Consumption_2013 * 100) AS Min_Percent_Increase FROM      consumption_2012 c1 JOIN      consumption_2013 c2 ON c1.CustomerID = c2.CustomerID JOIN      customers c ON c1.CustomerID = c.CustomerID GROUP BY      c.Segment ORDER BY      Max_Percent_Increase DESC,      Min_Percent_Increase ASC;",
            "6": "SELECT Segment FROM ( SELECT T2.Segment , SUM(CASE WHEN SUBSTR(T1.Date, 1, 4) = '2013' THEN T1.Consumption ELSE 0 END) - SUM(CASE WHEN SUBSTR(T1.Date, 1, 4) = '2012' THEN T1.Consumption ELSE 0 END) AS diff FROM yearmonth AS T1 JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Currency = 'EUR' GROUP BY T2.Segment ) AS T3 ORDER BY diff DESC LIMIT 1 UNION SELECT Segment FROM ( SELECT T2.Segment , SUM(CASE WHEN SUBSTR(T1.Date, 1, 4) = '2013' THEN T1.Consumption ELSE 0 END) - SUM(CASE WHEN SUBSTR(T1.Date, 1, 4) = '2012' THEN T1.Consumption ELSE 0 END) AS diff FROM yearmonth AS T1 JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Currency = 'EUR' GROUP BY T2.Segment ) AS T3 ORDER BY diff ASC LIMIT 1",
            "1": "SELECT WITH consumption_2012 AS (     SELECT          ym.CustomerID,          c.Segment,          SUM(CASE WHEN SUBSTR(ym.Date, 1, 4) = '2012' THEN ym.Consumption ELSE 0 END) AS consumption_2012     FROM          yearmonth ym     JOIN          customers c ON ym.CustomerID = c.CustomerID     WHERE          ym.Date LIKE '2012%' AND c.Currency = 'EUR'     GROUP BY          ym.CustomerID, c.Segment ),  consumption_2013 AS (     SELECT          ym.CustomerID,          c.Segment,          SUM(CASE WHEN SUBSTR(ym.Date, 1, 4) = '2013' THEN ym.Consumption ELSE 0 END) AS consumption_2013     FROM          yearmonth ym     JOIN          customers c ON ym.CustomerID = c.CustomerID     WHERE          ym.Date LIKE '2013%' AND c.Currency = 'EUR'     GROUP BY          ym.CustomerID, c.Segment ) SELECT      c.Segment,     ((SUM(consumption_2013) - SUM(consumption_2012)) / SUM(consumption_2013)) * 100 AS percentage_increase FROM      consumption_2012 y12 JOIN      consumption_2013 y13 ON y12.CustomerID = y13.CustomerID AND y12.Segment = y13.Segment JOIN      customers c ON y12.CustomerID = c.CustomerID GROUP BY      c.Segment ORDER BY      percentage_increase DESC;",
            "3": "SELECT WITH MonthlyConsumption AS (   SELECT     c.Segment,     SUBSTR(ym.Date, 1, 4) AS Year,     SUM(ym.Consumption) AS TotalConsumption   FROM yearmonth AS ym   JOIN customers AS c     ON ym.CustomerID = c.CustomerID   WHERE     c.Currency = 'EUR' AND SUBSTR(ym.Date, 1, 4) IN ('2012', '2013')   GROUP BY     c.Segment,     SUBSTR(ym.Date, 1, 4) ), YearlyChanges AS (   SELECT     Segment,     Year,     TotalConsumption,     LAG(TotalConsumption, 1, 0) OVER (PARTITION BY Segment ORDER BY Year) AS PreviousYearConsumption   FROM MonthlyConsumption ), PercentageChanges AS (   SELECT     Segment,     (       (         TotalConsumption - PreviousYearConsumption       ) * 100.0 / PreviousYearConsumption     ) AS PercentageChange   FROM YearlyChanges   WHERE     Year = '2013' ) SELECT   (     SELECT       Segment     FROM PercentageChanges     ORDER BY       PercentageChange DESC     LIMIT 1   ) AS BiggestIncreaseSegment,   (     SELECT       PercentageChange     FROM PercentageChanges     ORDER BY       PercentageChange DESC     LIMIT 1   ) AS BiggestIncreasePercentage,   (     SELECT       Segment     FROM PercentageChanges     ORDER BY       PercentageChange ASC     LIMIT 1   ) AS LowestIncreaseSegment,   (     SELECT       PercentageChange     FROM PercentageChanges     ORDER BY       PercentageChange ASC     LIMIT 1   ) AS LowestIncreasePercentage;"
        }
    },
    {
        "question_id": 1483,
        "database": "debit_card_specializing",
        "evidence": "Between August And November 2013 refers to Between 201308 And 201311; The first 4 strings of the Date values in the yearmonth table can represent year; The 5th and 6th string of the date can refer to month.",
        "question": "How much did customer 6 consume in total between August and November 2013?",
        "schema_used": {
            "yearmonth": [
                "consumption",
                "customerid",
                "date"
            ]
        },
        "gold": "SELECT SUM(Consumption) FROM yearmonth WHERE CustomerID = 6 AND Date BETWEEN '201308' AND '201311'",
        "candidates": {
            "1": "SELECT SUM(Consumption)  FROM yearmonth  WHERE CustomerID = 6    AND Date BETWEEN '201308' AND '201311';",
            "4": "SELECT SUM(Consumption)  FROM yearmonth  WHERE CustomerID = 6  AND Date BETWEEN '201308' AND '201311';",
            "2": "SELECT SUM(Consumption) FROM yearmonth WHERE CustomerID = 6 AND Date BETWEEN '201308' AND '201311'",
            "5": "SELECT SUM(Consumption) FROM yearmonth WHERE CustomerID = 6 AND Date BETWEEN 201308 AND 201311",
            "6": "SELECT SUM(Consumption) FROM yearmonth WHERE CustomerID = 6 AND Date BETWEEN '201308' AND '201311'",
            "3": "SELECT   SUM(Consumption) FROM yearmonth WHERE   CustomerID = 6 AND Date BETWEEN '201308' AND '201311';"
        }
    },
    {
        "question_id": 1484,
        "database": "debit_card_specializing",
        "evidence": "Czech Republic can be represented as the Country value in gasstations table is 'CZE'; Slovakia can be represented as the Country value in the gasstations table is 'SVK';  Computation of more \"discount\" gas stations= Total no. of discount gas stations in Czech Republic - Total no. of discount gas stations in Slovakia",
        "question": "How many more \"discount\" gas stations does the Czech Republic have compared to Slovakia?",
        "schema_used": {
            "gasstations": [
                "segment",
                "country"
            ]
        },
        "gold": "SELECT SUM(IIF(Country = 'CZE', 1, 0)) - SUM(IIF(Country = 'SVK', 1, 0)) FROM gasstations WHERE Segment = 'Discount'",
        "candidates": {
            "4": "SELECT      (SELECT COUNT(*) FROM gasstations WHERE Country = 'CZE' AND Segment = 'Discount') -      (SELECT COUNT(*) FROM gasstations WHERE Country = 'SVK' AND Segment = 'Discount')",
            "1": "SELECT      (SELECT COUNT(*) FROM gasstations WHERE Country = 'CZE' AND Segment = 'Discount') -      (SELECT COUNT(*) FROM gasstations WHERE Country = 'SVK' AND Segment = 'Discount')",
            "5": "SELECT SUM(CASE WHEN T1.Country = 'CZE' THEN 1 ELSE 0 END) - SUM(CASE WHEN T1.Country = 'SVK' THEN 1 ELSE 0 END) FROM gasstations AS T1 WHERE T1.Segment = 'Discount'",
            "2": "SELECT SUM(CASE WHEN T1.Country = 'CZE' THEN 1 ELSE 0 END) - SUM(CASE WHEN T1.Country = 'SVK' THEN 1 ELSE 0 END)  FROM gasstations AS T1  WHERE T1.Segment = 'discount'",
            "3": "SELECT   SUM(CASE WHEN Country = 'CZE' THEN 1 ELSE 0 END) - SUM(CASE WHEN Country = 'SVK' THEN 1 ELSE 0 END) FROM gasstations WHERE   Segment = 'Discount';",
            "6": "SELECT SUM(CASE WHEN Country  =  \"CZE\" THEN 1 ELSE 0 END)  -  SUM(CASE WHEN Country  =  \"SVK\" THEN 1 ELSE 0 END) FROM gasstations WHERE Segment  =  \"Discount\""
        }
    },
    {
        "question_id": 1485,
        "database": "debit_card_specializing",
        "evidence": "April 2013 refers to 201304 in the yearmonth.date",
        "question": "How much more was customer 7 consuming in April 2013 than customer 5?",
        "schema_used": {
            "yearmonth": [
                "date",
                "consumption",
                "customerid"
            ]
        },
        "gold": "SELECT SUM(IIF(CustomerID = 7, Consumption, 0)) - SUM(IIF(CustomerID = 5, Consumption, 0)) FROM yearmonth WHERE Date = '201304'",
        "candidates": {
            "4": "SELECT      (SELECT Consumption FROM yearmonth WHERE CustomerID = 7 AND Date = '201304') -      (SELECT Consumption FROM yearmonth WHERE CustomerID = 5 AND Date = '201304')",
            "1": "SELECT      (SELECT Consumption FROM yearmonth WHERE CustomerID = 7 AND Date = '201304') -      (SELECT Consumption FROM yearmonth WHERE CustomerID = 5 AND Date = '201304')",
            "3": "SELECT T1.Consumption - T2.Consumption FROM yearmonth AS T1 JOIN yearmonth AS T2 ON T1.Date = T2.Date WHERE T1.CustomerID = 7 AND T2.CustomerID = 5 AND T1.Date = 201304",
            "2": "SELECT T1.Consumption - T2.Consumption FROM yearmonth AS T1 INNER JOIN yearmonth AS T2 ON T1.Date = T2.Date WHERE T1.CustomerID = 7 AND T2.CustomerID = 5 AND T1.Date = '201304'",
            "5": "SELECT T1.Consumption - T2.Consumption FROM yearmonth AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = 7 AND T2.CustomerID = 5 AND T1.Date = '201304' AND T2.Date = '201304'",
            "6": "SELECT Consumption FROM yearmonth WHERE CustomerID  =  7 AND Date  =  201304 INTERSECT SELECT Consumption FROM yearmonth WHERE CustomerID  =  5 AND Date  =  201304"
        }
    },
    {
        "question_id": 1486,
        "database": "debit_card_specializing",
        "evidence": "Amount of more SMEs = Total of SMEs pay using Currency CZK - Total of SMEs pay using Currency EUR",
        "question": "Is it true that more SMEs pay in Czech koruna than in euros? If so, how many more?",
        "schema_used": {
            "customers": [
                "segment",
                "currency"
            ]
        },
        "gold": "SELECT SUM(Currency = 'CZK') - SUM(Currency = 'EUR') FROM customers WHERE Segment = 'SME'",
        "candidates": {
            "4": "SELECT      (SUM(CASE WHEN t2.Segment = 'SME' AND t1.Currency = 'CZK' THEN 1 ELSE 0 END) -      SUM(CASE WHEN t2.Segment = 'SME' AND t1.Currency = 'EUR' THEN 1 ELSE 0 END)) AS Difference FROM      transactions_1k AS t1  INNER JOIN      customers AS t2  ON      t1.CustomerID = t2.CustomerID;",
            "1": "SELECT      (SUM(CASE WHEN t2.Segment = 'SME' AND t1.Currency = 'CZK' THEN 1 ELSE 0 END) -      SUM(CASE WHEN t2.Segment = 'SME' AND t1.Currency = 'EUR' THEN 1 ELSE 0 END)) AS Difference FROM      transactions_1k AS t1  INNER JOIN      customers AS t2  ON      t1.CustomerID = t2.CustomerID;",
            "5": "SELECT SUM(CASE WHEN T1.Currency = 'CZK' THEN 1 ELSE 0 END) - SUM(CASE WHEN T1.Currency = 'EUR' THEN 1 ELSE 0 END) FROM customers AS T1 INNER JOIN transactions_1k AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Segment = 'SME'",
            "2": "SELECT SUM(CASE WHEN T1.Currency = 'CZK' THEN 1 ELSE 0 END) - SUM(CASE WHEN T1.Currency = 'EUR' THEN 1 ELSE 0 END)  FROM customers AS T1  INNER JOIN transactions_1k AS T2 ON T1.CustomerID = T2.CustomerID  WHERE T1.Segment = 'SME'",
            "6": "SELECT SUM(CASE WHEN Currency = 'CZK' THEN 1 ELSE 0 END) - SUM(CASE WHEN Currency = 'EUR' THEN 1 ELSE 0 END) FROM customers WHERE Segment = 'SME'",
            "3": "SELECT SUM(CASE WHEN T2.Currency = 'CZK' THEN 1 ELSE 0 END) - SUM(CASE WHEN T2.Currency = 'EUR' THEN 1 ELSE 0 END) FROM transactions_1k AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Segment = 'SME'"
        }
    },
    {
        "question_id": 1487,
        "database": "debit_card_specializing",
        "evidence": "October 2013 refers to 201310 in the yearmonth.date",
        "question": "Which LAM customer used the Euro as their currency and had the highest consumption in October 2013?",
        "schema_used": {
            "customers": [
                "customerid",
                "currency",
                "segment"
            ],
            "yearmonth": [
                "customerid",
                "consumption",
                "date"
            ]
        },
        "gold": "SELECT T1.CustomerID FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Segment = 'LAM' AND T2.Date = '201310' AND T1.Currency = 'EUR' GROUP BY T1.CustomerID ORDER BY SUM(T2.Consumption) DESC LIMIT 1",
        "candidates": {
            "2": "SELECT T1.CustomerID FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Segment = 'LAM' AND T1.Currency = 'EUR' AND T2.Date = '201310' ORDER BY T2.Consumption DESC LIMIT 1",
            "5": "SELECT T1.CustomerID FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Segment = 'LAM' AND T1.Currency = 'EUR' AND T2.Date = '201310' ORDER BY T2.CustomerID DESC LIMIT 1",
            "6": "SELECT T1.CustomerID FROM yearmonth AS T1 JOIN customers AS T2 ON T1.CustomerID  =  T2.CustomerID WHERE T2.Segment  =  \"LAM\" AND T2.Currency  =  \"EUR\" AND T1.Date  =  201310",
            "3": "SELECT   T1.CustomerID FROM customers AS T1 INNER JOIN yearmonth AS T2   ON T1.CustomerID = T2.CustomerID WHERE   T1.Segment = 'LAM' AND T1.Currency = 'EUR' AND T2.Date = 201310 ORDER BY   T2.Consumption DESC LIMIT 1;",
            "4": "SELECT T1.CustomerID  FROM yearmonth AS T1  INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID  WHERE T1.Date = '201310' AND T2.Segment = 'LAM' AND T2.Currency = 'EUR' ORDER BY T1.Date DESC LIMIT 1;",
            "1": "SELECT T1.CustomerID, MAX(T2.Consumption) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Segment = 'LAM' AND T1.Currency = 'EUR' AND T2.Date = '201310' GROUP BY T1.CustomerID ORDER BY MAX(T2.Consumption) DESC LIMIT 1;"
        }
    },
    {
        "question_id": 1488,
        "database": "debit_card_specializing",
        "evidence": "",
        "question": "Who among KAM's customers consumed the most? How much did it consume?",
        "schema_used": {
            "yearmonth": [
                "customerid",
                "consumption"
            ],
            "customers": [
                "customerid",
                "segment"
            ]
        },
        "gold": "SELECT T2.CustomerID, SUM(T2.Consumption) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Segment = 'KAM' GROUP BY T2.CustomerID ORDER BY SUM(T2.Consumption) DESC LIMIT 1",
        "candidates": {
            "4": "SELECT T2.CustomerID, MAX(T1.Consumption)  FROM yearmonth AS T1  INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID  WHERE T2.Segment = 'KAM'  GROUP BY T2.CustomerID  ORDER BY MAX(T1.Consumption) DESC  LIMIT 1;",
            "2": "SELECT T1.CustomerID,  T1.Consumption  FROM  yearmonth AS T1  INNER JOIN customers AS T2  ON T1.CustomerID = T2.CustomerID  WHERE  T2.Segment = 'KAM'  ORDER BY  T1.Consumption DESC  LIMIT 1",
            "1": "SELECT T2.CustomerID, MAX(T1.Consumption)  FROM yearmonth AS T1  INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID  WHERE T2.Segment = 'KAM'  GROUP BY T2.CustomerID  ORDER BY MAX(T1.Consumption) DESC  LIMIT 1;",
            "5": "SELECT T1.CustomerID,  T2.Consumption  FROM  customers AS T1  INNER JOIN yearmonth AS T2  ON T1.CustomerID = T2.CustomerID  WHERE  T1.Segment = 'KAM'  ORDER BY  T2.Consumption DESC  LIMIT 1",
            "6": "SELECT T1.CustomerID ,  T2.Consumption FROM customers AS T1 JOIN yearmonth AS T2 ON T1.CustomerID  =  T2.CustomerID WHERE T1.Segment  =  'KAM' ORDER BY T2.Consumption DESC LIMIT 1",
            "3": "SELECT   T1.CustomerID,   T1.Consumption FROM yearmonth AS T1 INNER JOIN customers AS T2   ON T1.CustomerID = T2.CustomerID WHERE   T2.Segment = 'KAM' ORDER BY   T1.Consumption DESC LIMIT 1;"
        }
    },
    {
        "question_id": 1489,
        "database": "debit_card_specializing",
        "evidence": "May 2013 refers to yearmonth.date = 201305",
        "question": "How much did the KAM customers consume in total in May 2013?",
        "schema_used": {
            "yearmonth": [
                "consumption",
                "customerid",
                "date"
            ],
            "customers": [
                "customerid",
                "segment"
            ]
        },
        "gold": "SELECT SUM(T2.Consumption) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Date = '201305' AND T1.Segment = 'KAM'",
        "candidates": {
            "4": "SELECT SUM(T1.Consumption)  FROM yearmonth AS T1  INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID  WHERE T1.Date = '201305' AND T2.Segment = 'KAM';",
            "1": "SELECT SUM(T1.Consumption)  FROM yearmonth AS T1  INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID  WHERE T1.Date = '201305' AND T2.Segment = 'KAM';",
            "2": "SELECT SUM(T1.Consumption) FROM yearmonth AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Segment = 'KAM' AND T1.Date = 201305",
            "5": "SELECT SUM(T1.Consumption) FROM yearmonth AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Date = 201305 AND T2.Segment = 'KAM'",
            "6": "SELECT sum(T1.Consumption) FROM yearmonth AS T1 JOIN customers AS T2 ON T1.CustomerID  =  T2.CustomerID WHERE T2.Segment  =  'KAM' AND T1.Date  =  201305",
            "3": "SELECT   SUM(T1.Consumption) FROM yearmonth AS T1 INNER JOIN customers AS T2   ON T1.CustomerID = T2.CustomerID WHERE   T2.Segment = 'KAM' AND T1.Date = '201305';"
        }
    },
    {
        "question_id": 1490,
        "database": "debit_card_specializing",
        "evidence": "Percentage of LAM customer consumed more than 46.73 = (Total no. of LAM customers who consumed more than 46.73 / Total no. of LAM customers) * 100.",
        "question": "How many percent of LAM customer consumed more than 46.73?",
        "schema_used": {
            "customers": [
                "customerid",
                "segment"
            ],
            "yearmonth": [
                "customerid",
                "consumption"
            ]
        },
        "gold": "SELECT CAST(SUM(IIF(T2.Consumption > 46.73, 1, 0)) AS FLOAT) * 100 / COUNT(T1.CustomerID) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Segment = 'LAM'",
        "candidates": {
            "5": "SELECT CAST(SUM(CASE WHEN T1.Consumption > 46.73 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM yearmonth AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Segment = 'LAM'",
            "1": "SELECT      CAST(SUM(CASE WHEN T2.Consumption > 46.73 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.CustomerID)  FROM      customers AS T1  INNER JOIN      yearmonth AS T2 ON T1.CustomerID = T2.CustomerID  WHERE      T1.Segment = 'LAM'",
            "4": "SELECT      CAST(SUM(CASE WHEN T2.Consumption > 46.73 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.CustomerID) FROM      customers AS T1  INNER JOIN      yearmonth AS T2  ON      T1.CustomerID = T2.CustomerID WHERE      T1.Segment = 'LAM'",
            "2": "SELECT CAST(SUM(CASE WHEN T1.Consumption > 46.73 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM yearmonth AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Segment = 'LAM'",
            "6": "SELECT CAST(SUM(IIF(T1.Consumption > 46.73, 1, 0)) AS REAL) * 100 / COUNT(T1.CustomerID) FROM yearmonth AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Segment = 'LAM'",
            "3": "SELECT CAST(SUM(IIF(T2.Consumption > 46.73, 1, 0)) AS REAL) * 100 / COUNT(T1.CustomerID) FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Segment = 'LAM'"
        }
    },
    {
        "question_id": 1491,
        "database": "debit_card_specializing",
        "evidence": "",
        "question": "Which country has more \"value for money\" gas stations? Please give a total number of \"value for money\" gas stations in each country.",
        "schema_used": {
            "gasstations": [
                "gasstationid",
                "segment",
                "country"
            ]
        },
        "gold": "SELECT Country , ( SELECT COUNT(GasStationID) FROM gasstations WHERE Segment = 'Value for money' ) FROM gasstations WHERE Segment = 'Value for money' GROUP BY Country ORDER BY COUNT(GasStationID) DESC LIMIT 1",
        "candidates": {
            "4": "SELECT Country, COUNT(*) as ValueForMoneyStations FROM gasstations WHERE Segment = 'Value for money' GROUP BY Country ORDER BY ValueForMoneyStations DESC LIMIT 1;",
            "1": "SELECT Country, COUNT(*) AS ValueForMoneyGasStations FROM gasstations WHERE Segment = 'Value for money' GROUP BY Country ORDER BY ValueForMoneyGasStations DESC LIMIT 1;",
            "5": "SELECT Country, COUNT(*) FROM gasstations WHERE Segment = 'Value for money' GROUP BY Country",
            "2": "SELECT Country, COUNT(*) FROM gasstations WHERE Segment = 'Value for money' GROUP BY Country",
            "6": "SELECT Country, COUNT(*) FROM gasstations WHERE Segment = \"Value for money\" GROUP BY Country ORDER BY COUNT(*) DESC LIMIT 1",
            "3": "SELECT Country, COUNT(*) AS num FROM gasstations WHERE Segment = 'Value for money' GROUP BY Country ORDER BY num DESC LIMIT 1"
        }
    },
    {
        "question_id": 1492,
        "database": "debit_card_specializing",
        "evidence": "Percentage of KAM uses Euro = (Total of KAM uses Euro / Total of KAM) * 100%.",
        "question": "What percentage of KAM customers pay in euros?",
        "schema_used": {
            "customers": [
                "segment",
                "customerid",
                "currency"
            ]
        },
        "gold": "SELECT CAST(SUM(Currency = 'EUR') AS FLOAT) * 100 / COUNT(CustomerID) FROM customers WHERE Segment = 'KAM'",
        "candidates": {
            "1": "SELECT CAST(SUM(CASE WHEN Segment = 'KAM' AND Currency = 'EUR' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*)  FROM customers  WHERE Segment = 'KAM';",
            "4": "SELECT CAST(SUM(CASE WHEN T1.Segment = 'KAM' AND T1.Currency = 'EUR' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*)  FROM customers AS T1  WHERE T1.Segment = 'KAM'",
            "2": "SELECT CAST(SUM(CASE WHEN T1.Currency = 'EUR' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM customers AS T1 WHERE T1.Segment = 'KAM'",
            "5": "SELECT CAST(SUM(CASE WHEN Currency = 'EUR' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM customers WHERE Segment = 'KAM'",
            "6": "SELECT CAST(SUM(CASE WHEN Currency = 'EUR' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM customers WHERE Segment = 'KAM'",
            "3": "SELECT   CAST(SUM(CASE WHEN Currency = 'EUR' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM customers WHERE   Segment = 'KAM';"
        }
    },
    {
        "question_id": 1493,
        "database": "debit_card_specializing",
        "evidence": "February 2012 refers to '201202' in yearmonth.date; The first 4 strings of the Date values in the yearmonth table can represent year; The 5th and 6th string of the date can refer to month.",
        "question": "In February 2012, what percentage of customers consumed more than 528.3?",
        "schema_used": {
            "yearmonth": [
                "date",
                "customerid",
                "consumption"
            ]
        },
        "gold": "SELECT CAST(SUM(IIF(Consumption > 528.3, 1, 0)) AS FLOAT) * 100 / COUNT(CustomerID) FROM yearmonth WHERE Date = '201202'",
        "candidates": {
            "4": "SELECT      CAST(SUM(CASE WHEN T1.Consumption > 528.3 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.CustomerID) FROM      yearmonth AS T1 WHERE      T1.Date LIKE '201202%'",
            "1": "SELECT      CAST(SUM(CASE WHEN T1.Consumption > 528.3 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.CustomerID) FROM      yearmonth AS T1 WHERE      T1.Date LIKE '201202%';",
            "3": "SELECT CAST(SUM(IIF(Consumption > 528.3, 1, 0)) AS REAL) * 100 / COUNT(CustomerID) FROM yearmonth WHERE Date = '201202'",
            "2": "SELECT CAST(SUM(CASE WHEN T1.Consumption > 528.3 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM yearmonth AS T1 WHERE T1.Date = '201202'",
            "5": "SELECT CAST(SUM(CASE WHEN T1.Consumption > 528.3 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM yearmonth AS T1 WHERE T1.Date = '201202'",
            "6": "SELECT CAST(SUM(IIF(Consumption > 528.3, 1, 0)) AS REAL) * 100 / COUNT(CustomerID) FROM yearmonth WHERE Date = 201202"
        }
    },
    {
        "question_id": 1494,
        "database": "debit_card_specializing",
        "evidence": "Percentage of premium gas station = (Total of premium gas station in Slovakia / Total of gas station in Slovakia) * 100%.",
        "question": "What percentage of Slovakian gas stations are premium?",
        "schema_used": {
            "gasstations": [
                "country",
                "gasstationid",
                "segment"
            ]
        },
        "gold": "SELECT CAST(SUM(IIF(Segment = 'Premium', 1, 0)) AS FLOAT) * 100 / COUNT(GasStationID) FROM gasstations WHERE Country = 'SVK'",
        "candidates": {
            "4": "SELECT CAST(SUM(CASE WHEN T1.Segment = 'Premium' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.Country)  FROM gasstations AS T1  WHERE T1.Country = 'SVK'",
            "1": "SELECT CAST(SUM(CASE WHEN T1.Country = 'SVK' AND T1.Segment = 'Premium' THEN 1 ELSE 0 END) AS REAL) * 100 / SUM(CASE WHEN T1.Country = 'SVK' THEN 1 ELSE 0 END)  FROM gasstations AS T1",
            "2": "SELECT CAST(SUM(CASE WHEN T1.Segment = 'Premium' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM gasstations AS T1 WHERE T1.Country = 'SVK'",
            "5": "SELECT CAST(SUM(CASE WHEN Segment = 'Premium' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM gasstations WHERE Country = 'SVK'",
            "3": "SELECT CAST(SUM(CASE WHEN Segment = 'Premium' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM gasstations WHERE Country = 'SVK'",
            "6": "SELECT CAST(SUM(CASE WHEN Segment = \"Premium\" THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM gasstations WHERE Country = \"SVK\""
        }
    },
    {
        "question_id": 1495,
        "database": "debit_card_specializing",
        "evidence": "September 2013 refers to yearmonth.date = '201309'",
        "question": "Which client ID consumed the most in September 2013?",
        "schema_used": {
            "customers": [
                "customerid"
            ],
            "yearmonth": [
                "customerid",
                "date",
                "consumption"
            ]
        },
        "gold": "SELECT T1.CustomerID FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Date = '201309' GROUP BY T1.CustomerID ORDER BY SUM(T2.Consumption) DESC LIMIT 1",
        "candidates": {
            "1": "SELECT CustomerID  FROM yearmonth  WHERE Date = '201309'  GROUP BY CustomerID  ORDER BY SUM(Consumption) DESC  LIMIT 1;",
            "2": "SELECT CustomerID FROM yearmonth WHERE Date = '201309' ORDER BY Consumption DESC LIMIT 1",
            "5": "SELECT CustomerID FROM yearmonth WHERE Date = '201309' GROUP BY CustomerID ORDER BY SUM(FuelConsumption) DESC LIMIT 1",
            "4": "SELECT CustomerID  FROM yearmonth  WHERE Date = '201309'  GROUP BY CustomerID  ORDER BY SUM(Date) DESC  LIMIT 1;",
            "6": "SELECT CustomerID FROM yearmonth WHERE Date  =  '201309' GROUP BY CustomerID ORDER BY sum(Gallons) DESC LIMIT 1",
            "3": "SELECT CustomerID FROM yearmonth WHERE Date = '201309' ORDER BY Consumption DESC LIMIT 1"
        }
    },
    {
        "question_id": 1496,
        "database": "debit_card_specializing",
        "evidence": "September 2013 refers to yearmonth.date = '201309'",
        "question": "Which client segment consumed the least in September 2013?",
        "schema_used": {
            "customers": [
                "segment",
                "customerid"
            ],
            "yearmonth": [
                "customerid",
                "date",
                "consumption"
            ]
        },
        "gold": "SELECT T1.Segment FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Date = '201309' GROUP BY T1.CustomerID ORDER BY SUM(T2.Consumption) ASC LIMIT 1",
        "candidates": {
            "5": "SELECT T1.Segment FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Date = '201309' GROUP BY T1.Segment ORDER BY COUNT(T2.CustomerID) LIMIT 1",
            "1": "SELECT T.Segment  FROM (     SELECT T2.Segment, SUM(T1.Consumption) AS total_consumption     FROM yearmonth AS T1      INNER JOIN customers AS T2      ON T1.CustomerID = T2.CustomerID      WHERE T1.Date = '201309'     GROUP BY T2.Segment ) AS T ORDER BY T.total_consumption ASC LIMIT 1;",
            "4": "SELECT T.Segment  FROM (     SELECT T2.Segment, SUM(T1.FuelConsumption) AS total_consumption      FROM yearmonth AS T1      INNER JOIN customers AS T2      ON T1.CustomerID = T2.CustomerID      WHERE T1.Date = '201309'      GROUP BY T2.Segment ) AS T  ORDER BY T.total_consumption ASC  LIMIT 1;",
            "2": "SELECT T1.Segment FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Date = '201309' GROUP BY T1.Segment ORDER BY SUM(T2.Consumption) LIMIT 1",
            "6": "SELECT T2.Segment FROM yearmonth AS T1 JOIN customers AS T2 ON T1.CustomerID  =  T2.CustomerID WHERE T1.Date  =  '201309' GROUP BY T2.Segment ORDER BY sum(T1.Consumption) ASC LIMIT 1",
            "3": "SELECT   T1.Segment FROM customers AS T1 INNER JOIN yearmonth AS T2   ON T1.CustomerID = T2.CustomerID WHERE   T2.Date = 201309 GROUP BY   T1.Segment ORDER BY   SUM(T2.Consumption) LIMIT 1;"
        }
    },
    {
        "question_id": 1497,
        "database": "debit_card_specializing",
        "evidence": "June 2012 refers to yearmonth.date = '201206'",
        "question": "Which SME customer consumed the least in June 2012?",
        "schema_used": {
            "customers": [
                "customerid",
                "segment"
            ],
            "yearmonth": [
                "customerid",
                "date",
                "consumption"
            ]
        },
        "gold": "SELECT T1.CustomerID FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Date = '201206' AND T1.Segment = 'SME' GROUP BY T1.CustomerID ORDER BY SUM(T2.Consumption) ASC LIMIT 1",
        "candidates": {
            "1": "SELECT T2.CustomerID  FROM yearmonth AS T1  INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID  WHERE T1.Date = '201206' AND T2.Segment = 'SME' ORDER BY T1.Consumption ASC  LIMIT 1;",
            "4": "SELECT T2.CustomerID  FROM yearmonth AS T1  INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID  WHERE T1.Date = '201206' AND T2.Segment = 'SME' ORDER BY T1.Consumption ASC  LIMIT 1;",
            "5": "SELECT T1.CustomerID FROM yearmonth AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Date = '201206' AND T2.Segment = 'SME' ORDER BY T1.Consumption LIMIT 1",
            "2": "SELECT T1.CustomerID FROM yearmonth AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Date = '201206' AND T2.Segment = 'SME' ORDER BY T1.Consumption LIMIT 1",
            "3": "SELECT   CustomerID FROM yearmonth WHERE   Date = '201206'   AND CustomerID IN (     SELECT       CustomerID     FROM customers     WHERE       Segment = 'SME'   ) ORDER BY   Consumption LIMIT 1;",
            "6": "SELECT T1.CustomerID FROM customers AS T1 JOIN yearmonth AS T2 ON T1.CustomerID  =  T2.CustomerID WHERE T1.Segment  =  'SME' AND T2.Date  =  '201206' ORDER BY T2.Consumption ASC LIMIT 1"
        }
    },
    {
        "question_id": 1498,
        "database": "debit_card_specializing",
        "evidence": "The first 4 strings of the Date values in the yearmonth table can represent year; The 5th and 6th string of the date can refer to month.",
        "question": "What is the highest monthly consumption in the year 2012?",
        "schema_used": {
            "yearmonth": [
                "consumption",
                "date"
            ]
        },
        "gold": "SELECT SUM(Consumption) FROM yearmonth WHERE SUBSTR(Date, 1, 4) = '2012' GROUP BY SUBSTR(Date, 5, 2) ORDER BY SUM(Consumption) DESC LIMIT 1",
        "candidates": {
            "4": "SELECT MAX(Consumption)  FROM yearmonth  WHERE Date LIKE '2012__'",
            "1": "SELECT MAX(Consumption)  FROM yearmonth  WHERE Date LIKE '2012__';",
            "2": "SELECT MAX(Consumption) FROM yearmonth WHERE SUBSTR(Date, 1, 4) = '2012'",
            "5": "SELECT MAX(Consumption) FROM yearmonth WHERE SUBSTR(Date,1,4)='2012'",
            "6": "SELECT max(Consumption) FROM yearmonth WHERE Date LIKE \"2012%\"",
            "3": "SELECT MAX(Consumption) FROM yearmonth WHERE Date LIKE '2012%'"
        }
    },
    {
        "question_id": 1499,
        "database": "debit_card_specializing",
        "evidence": "Monthly consumption = SUM(consumption) / 12",
        "question": "What is the biggest monthly consumption of the customers who use euro as their currency?",
        "schema_used": {
            "customers": [
                "customerid",
                "currency"
            ],
            "yearmonth": [
                "customerid",
                "consumption"
            ]
        },
        "gold": "SELECT SUM(T2.Consumption) / 12 AS MonthlyConsumption FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Currency = 'EUR' GROUP BY T1.CustomerID ORDER BY MonthlyConsumption DESC LIMIT 1",
        "candidates": {
            "4": "SELECT MAX(Consumption)  FROM yearmonth AS T1  INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID  WHERE T2.Currency = 'EUR';",
            "5": "SELECT MAX(T1.Consumption) FROM yearmonth AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Currency = 'EUR'",
            "1": "SELECT MAX(T1.Consumption)  FROM yearmonth AS T1  INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID  WHERE T2.Currency = 'EUR';",
            "2": "SELECT MAX(T1.Consumption) FROM yearmonth AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Currency = 'EUR'",
            "6": "SELECT max(T1.Consumption) FROM yearmonth AS T1 JOIN customers AS T2 ON T1.CustomerID  =  T2.CustomerID WHERE T2.Currency  =  'EUR'",
            "3": "SELECT max(Consumption) FROM yearmonth AS T1 JOIN customers AS T2 ON T1.CustomerID  =  T2.CustomerID WHERE T2.Currency  =  'EUR'"
        }
    },
    {
        "question_id": 1500,
        "database": "debit_card_specializing",
        "evidence": "September 2013 refers to 201309; The first 4 strings of the Date values in the yearmonth table can represent year; The 5th and 6th string of the date can refer to month.",
        "question": "Please list the product description of the products consumed in September, 2013.",
        "schema_used": {
            "products": [
                "description",
                "productid"
            ],
            "transactions_1k": [
                "customerid",
                "productid"
            ],
            "yearmonth": [
                "customerid",
                "date"
            ]
        },
        "gold": "SELECT T3.Description FROM transactions_1k AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID INNER JOIN products AS T3 ON T1.ProductID = T3.ProductID WHERE T2.Date = '201309'",
        "candidates": {
            "4": "SELECT DISTINCT T3.Description  FROM yearmonth AS T1  INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID  INNER JOIN products AS T3 ON T1.ProductID = T3.ProductID  WHERE SUBSTR(T1.Date, 1, 6) = '201309'",
            "2": "SELECT T1.Description FROM products AS T1 INNER JOIN yearmonth AS T2 ON T1.ProductID = T2.CustomerID WHERE T2.Date LIKE '201309%'",
            "5": "SELECT T1.Description FROM products AS T1 INNER JOIN yearmonth AS T2 ON T1.ProductID = T2.CustomerID WHERE T2.Date LIKE '201309%'",
            "3": "SELECT DISTINCT T3.Description FROM yearmonth AS T1 INNER JOIN transactions_1k AS T2 ON T1.CustomerID = T2.CustomerID INNER JOIN products AS T3 ON T2.ProductID = T3.ProductID WHERE T1.Date LIKE '201309%'",
            "6": "SELECT T2.Description FROM yearmonth AS T1 JOIN products AS T2 ON SUBSTR(T1.Date, 5, 2) = '09' AND SUBSTR(T1.Date, 1, 4) = '2013'",
            "1": "SELECT T2.Description FROM yearmonth AS T1 JOIN products AS T2 ON T1.ProductID = T2.ProductID WHERE T1.Date LIKE '201309%';"
        }
    },
    {
        "question_id": 1501,
        "database": "debit_card_specializing",
        "evidence": "June 2013 refers to '201306'; The first 4 strings of the Date values in the yearmonth table can represent year; The 5th and 6th string of the date can refer to month;",
        "question": "Please list the countries of the gas stations with transactions taken place in June, 2013.",
        "schema_used": {
            "gasstations": [
                "country",
                "gasstationid"
            ],
            "transactions_1k": [
                "gasstationid",
                "customerid"
            ],
            "yearmonth": [
                "customerid",
                "date"
            ]
        },
        "gold": "SELECT DISTINCT T2.Country FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID INNER JOIN yearmonth AS T3 ON T1.CustomerID = T3.CustomerID WHERE T3.Date = '201306'",
        "candidates": {
            "4": "SELECT T3.Country  FROM transactions_1k AS T1  INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID  INNER JOIN gasstations AS T3 ON T1.GasStationID = T3.GasStationID  WHERE T2.Date LIKE '201306%'",
            "1": "SELECT DISTINCT T3.Country  FROM transactions_1k AS T1  INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID  INNER JOIN gasstations AS T3 ON T1.GasStationID = T3.GasStationID  WHERE T2.Date = '201306';",
            "5": "SELECT T1.Country FROM gasstations AS T1 INNER JOIN transactions_1k AS T2 ON T1.GasStationID = T2.GasStationID WHERE STRFTIME('%Y%m', T2.TransactionDateTime) = '201306'",
            "2": "SELECT T1.Country FROM gasstations AS T1 INNER JOIN transactions_1k AS T2 ON T1.GasStationID = T2.GasStationID WHERE STRFTIME('%Y%m', T2.Date) = '201306'",
            "6": "SELECT T3.Country FROM yearmonth AS T1 JOIN transactions_1k AS T2 ON T1.CustomerID  =  T2.CustomerID JOIN gasstations AS T3 ON T2.GasStationID  =  T3.GasStationID WHERE T1.Date  =  '201306'",
            "3": "SELECT DISTINCT T2.Country FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID INNER JOIN yearmonth AS T3 ON T1.CustomerID = T3.CustomerID WHERE SUBSTR(T3.Date, 1, 6) = '201306'"
        }
    },
    {
        "question_id": 1502,
        "database": "debit_card_specializing",
        "evidence": "",
        "question": "Please list the chains of the gas stations with transactions in euro.",
        "schema_used": {
            "gasstations": [
                "chainid",
                "gasstationid"
            ],
            "transactions_1k": [
                "customerid",
                "gasstationid"
            ],
            "customers": [
                "customerid",
                "currency"
            ]
        },
        "gold": "SELECT DISTINCT T3.ChainID FROM transactions_1k AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID INNER JOIN gasstations AS T3 ON T1.GasStationID = T3.GasStationID WHERE T2.Currency = 'EUR'",
        "candidates": {
            "1": "SELECT DISTINCT g.ChainID FROM transactions_1k t INNER JOIN customers c ON t.CustomerID = c.CustomerID INNER JOIN gasstations g ON t.GasStationID = g.GasStationID WHERE c.Currency = 'EUR';",
            "4": "SELECT DISTINCT T1.ChainID  FROM gasstations AS T1  INNER JOIN transactions_1k AS T2 ON T1.GasStationID = T2.GasStationID  INNER JOIN customers AS T3 ON T2.CustomerID = T3.CustomerID  WHERE T3.Currency = 'EUR';",
            "2": "SELECT T1.ChainID FROM gasstations AS T1 INNER JOIN transactions_1k AS T2 ON T1.GasStationID = T2.GasStationID INNER JOIN customers AS T3 ON T2.CustomerID = T3.CustomerID WHERE T3.Currency = 'EUR'",
            "5": "SELECT T1.ChainID FROM gasstations AS T1 INNER JOIN transactions_1k AS T2 ON T1.GasStationID = T2.GasStationID INNER JOIN customers AS T3 ON T2.CustomerID = T3.CustomerID WHERE T3.Currency = 'EUR'",
            "6": "SELECT T3.ChainID FROM transactions_1k AS T1 JOIN customers AS T2 ON T1.CustomerID  =  T2.CustomerID JOIN gasstations AS T3 ON T1.GasStationID  =  T3.GasStationID WHERE T2.Currency  =  'EUR'",
            "3": "SELECT DISTINCT   T2.ChainID FROM transactions_1k AS T1 INNER JOIN gasstations AS T2   ON T1.GasStationID = T2.GasStationID INNER JOIN customers AS T3   ON T1.CustomerID = T3.CustomerID WHERE   T3.Currency = 'EUR';"
        }
    },
    {
        "question_id": 1503,
        "database": "debit_card_specializing",
        "evidence": "",
        "question": "Please list the product description of the products bought in transactions in euro.",
        "schema_used": {
            "transactions_1k": [
                "productid",
                "customerid"
            ],
            "products": [
                "description",
                "productid"
            ],
            "customers": [
                "customerid",
                "currency"
            ]
        },
        "gold": "SELECT DISTINCT T1.ProductID, T3.Description FROM transactions_1k AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID INNER JOIN products AS T3 ON T1.ProductID = T3.ProductID WHERE T2.Currency = 'EUR'",
        "candidates": {
            "4": "SELECT T3.Description  FROM transactions_1k AS T1  INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID  INNER JOIN products AS T3 ON T1.ProductID = T3.ProductID  WHERE T2.Currency = 'EUR';",
            "2": "SELECT T1.Description FROM products AS T1 INNER JOIN transactions_1k AS T2 ON T1.ProductID = T2.ProductID INNER JOIN customers AS T3 ON T2.CustomerID = T3.CustomerID WHERE T3.Currency = 'EUR'",
            "6": "SELECT T3.Description FROM transactions_1k AS T1 JOIN customers AS T2 ON T1.CustomerID  =  T2.CustomerID JOIN products AS T3 ON T1.ProductID  =  T3.ProductID WHERE T2.Currency  =  'EUR'",
            "5": "SELECT T1.Description FROM products AS T1 INNER JOIN transactions_1k AS T2 ON T1.ProductID  =  T2.ProductID INNER JOIN customers AS T3 ON T2.CustomerID  =  T3.CustomerID WHERE T3.Currency  =  'EUR'",
            "3": "SELECT DISTINCT   T2.Description FROM transactions_1k AS T1 INNER JOIN products AS T2   ON T1.ProductID = T2.ProductID INNER JOIN customers AS T3   ON T1.CustomerID = T3.CustomerID WHERE   T3.Currency = 'EUR';",
            "1": "SELECT T3.Description  FROM transactions_1k AS T1  INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID  INNER JOIN products AS T3 ON T1.ProductID = T3.ProductID  WHERE T2.Currency = 'EUR';"
        }
    },
    {
        "question_id": 1504,
        "database": "debit_card_specializing",
        "evidence": "In January, 2012 means Date contains '2012-01'",
        "question": "What is the average total price of the transactions taken place in January, 2012?",
        "schema_used": {
            "transactions_1k": [
                "amount",
                "date"
            ]
        },
        "gold": "SELECT AVG(Amount) FROM transactions_1k WHERE Date LIKE '2012-01%'",
        "candidates": {
            "1": "SELECT AVG(Price) FROM transactions_1k WHERE Date LIKE '2012-01-%';",
            "4": "SELECT AVG(Price) FROM transactions_1k WHERE Date LIKE '2012-01-%'",
            "5": "SELECT AVG(Price) FROM transactions_1k WHERE Date LIKE '2012-01%'",
            "2": "SELECT CAST(SUM(Price) AS REAL) / COUNT(*) FROM transactions_1k WHERE Date LIKE '2012-01%'",
            "6": "SELECT avg(Price) FROM transactions_1k WHERE Date LIKE \"2012-01%\"",
            "3": "SELECT AVG(Price) FROM transactions_1k WHERE Date LIKE '2012-01%'"
        }
    },
    {
        "question_id": 1505,
        "database": "debit_card_specializing",
        "evidence": "Pays in euro = Currency = 'EUR'.",
        "question": "Among the customers who paid in euro, how many of them have a monthly consumption of over 1000?",
        "schema_used": {
            "yearmonth": [
                "customerid",
                "consumption"
            ],
            "customers": [
                "customerid",
                "currency"
            ]
        },
        "gold": "SELECT COUNT(*) FROM yearmonth AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Currency = 'EUR' AND T1.Consumption > 1000.00",
        "candidates": {
            "4": "SELECT COUNT(T1.CustomerID)  FROM yearmonth AS T1  INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID  WHERE T2.Currency = 'EUR' AND T1.Consumption > 1000;",
            "1": "SELECT COUNT(T1.CustomerID)  FROM yearmonth AS T1  INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID  WHERE T2.Currency = 'EUR' AND T1.Consumption > 1000;",
            "2": "SELECT COUNT(T1.CustomerID) FROM yearmonth AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Currency = 'EUR' AND T1.Consumption > 1000",
            "5": "SELECT COUNT(T1.CustomerID) FROM yearmonth AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Currency = 'EUR' AND T1.Consumption > 1000",
            "6": "SELECT COUNT(T1.CustomerID) FROM yearmonth AS T1 JOIN customers AS T2 ON T1.CustomerID  =  T2.CustomerID WHERE T2.Currency  =  'EUR' AND T1.Consumption  >  1000",
            "3": "SELECT   COUNT(T1.CustomerID) FROM yearmonth AS T1 INNER JOIN customers AS T2   ON T1.CustomerID = T2.CustomerID WHERE   T2.Currency = 'EUR' AND T1.Consumption > 1000;"
        }
    },
    {
        "question_id": 1506,
        "database": "debit_card_specializing",
        "evidence": "Czech Republic can be represented as the Country value in the gasstations table is 'CZE'; ",
        "question": "Please list the product descriptions of the transactions taken place in the gas stations in the Czech Republic.",
        "schema_used": {
            "products": [
                "description",
                "productid"
            ],
            "transactions_1k": [
                "gasstationid",
                "productid"
            ],
            "gasstations": [
                "gasstationid",
                "country"
            ]
        },
        "gold": "SELECT DISTINCT T3.Description FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID INNER JOIN products AS T3 ON T1.ProductID = T3.ProductID WHERE T2.Country = 'CZE'",
        "candidates": {
            "4": "SELECT T3.Description  FROM transactions_1k AS T1  INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID  INNER JOIN products AS T3 ON T1.ProductID = T3.ProductID  WHERE T2.Country = 'CZE';",
            "1": "SELECT T3.Description  FROM transactions_1k AS T1  INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID  INNER JOIN products AS T3 ON T1.ProductID = T3.ProductID  WHERE T2.Country = 'CZE';",
            "2": "SELECT T1.Description FROM products AS T1 INNER JOIN transactions_1k AS T2 ON T1.ProductID = T2.ProductID INNER JOIN gasstations AS T3 ON T2.GasStationID = T3.GasStationID WHERE T3.Country = 'CZE'",
            "5": "SELECT T1.Description FROM products AS T1 INNER JOIN transactions_1k AS T2 ON T1.ProductID  =  T2.ProductID INNER JOIN gasstations AS T3 ON T2.GasStationID  =  T3.GasStationID WHERE T3.Country  =  'CZE'",
            "6": "SELECT T3.Description FROM transactions_1k AS T1 JOIN gasstations AS T2 ON T1.GasStationID  =  T2.GasStationID JOIN products AS T3 ON T1.ProductID  =  T3.ProductID WHERE T2.Country  =  'CZE'",
            "3": "SELECT   T2.Description FROM gasstations AS T1 INNER JOIN products AS T2   ON T1.GasStationID = T2.ProductID INNER JOIN transactions_1k AS T3   ON T3.ProductID = T2.ProductID WHERE   T1.Country = 'CZE';"
        }
    },
    {
        "question_id": 1507,
        "database": "debit_card_specializing",
        "evidence": "",
        "question": "Please list the disparate time of the transactions taken place in the gas stations from chain no. 11.",
        "schema_used": {
            "transactions_1k": [
                "time",
                "gasstationid"
            ],
            "gasstations": [
                "gasstationid",
                "chainid"
            ]
        },
        "gold": "SELECT DISTINCT T1.Time FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T2.ChainID = 11",
        "candidates": {
            "4": "SELECT DISTINCT Time  FROM transactions_1k AS T1  INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID  WHERE T2.ChainID = 11;",
            "1": "SELECT DISTINCT Time FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T2.ChainID = 11;",
            "2": "SELECT T1.Time FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T2.ChainID = 11",
            "5": "SELECT T1.Time FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T2.ChainID = 11",
            "6": "SELECT DISTINCT Time FROM transactions_1k AS t1 JOIN gasstations AS t2 ON t1.GasStationID  =  t2.GasStationID WHERE t2.ChainID  =  11",
            "3": "SELECT DISTINCT   Time FROM transactions_1k WHERE   GasStationID IN (     SELECT       GasStationID     FROM gasstations     WHERE       ChainID = 11   );"
        }
    },
    {
        "question_id": 1508,
        "database": "debit_card_specializing",
        "evidence": "Gas station in the Czech Republic implies that Country = 'CZE'",
        "question": "How many transactions taken place in the gas station in the Czech Republic are with a price of over 1000?",
        "schema_used": {
            "transactions_1k": [
                "transactionid",
                "gasstationid",
                "price"
            ],
            "gasstations": [
                "gasstationid",
                "country"
            ]
        },
        "gold": "SELECT COUNT(T1.TransactionID) FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T2.Country = 'CZE' AND T1.Price > 1000",
        "candidates": {
            "4": "SELECT COUNT(*)  FROM transactions_1k AS T1  INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID  WHERE T2.Country = 'CZE' AND T1.Price > 1000;",
            "5": "SELECT COUNT(*) FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T2.Country = 'CZE' AND T1.Price > 1000",
            "1": "SELECT COUNT(*)  FROM transactions_1k AS T1  INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID  WHERE T2.Country = 'CZE' AND T1.Price > 1000;",
            "2": "SELECT COUNT(*) FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T2.Country = 'CZE' AND T1.Price > 1000",
            "6": "SELECT count(*) FROM gasstations AS T1 JOIN transactions_1k AS T2 ON T1.GasStationID  =  T2.GasStationID WHERE T1.Country  =  'CZE' AND T2.Price  >  1000",
            "3": "SELECT COUNT(T1.TransactionID) FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T2.Country = 'CZE' AND T1.Price > 1000"
        }
    },
    {
        "question_id": 1509,
        "database": "debit_card_specializing",
        "evidence": "Czech Republic can be represented as the Country value in the gasstations table is 'CZE'",
        "question": "Among the transactions made in the gas stations in the Czech Republic, how many of them are taken place after 2012/1/1?",
        "schema_used": {
            "transactions_1k": [
                "transactionid",
                "gasstationid",
                "date"
            ],
            "gasstations": [
                "gasstationid",
                "country"
            ]
        },
        "gold": "SELECT COUNT(T1.TransactionID) FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T2.Country = 'CZE' AND STRFTIME('%Y', T1.Date) >= '2012'",
        "candidates": {
            "1": "SELECT COUNT(*)  FROM transactions_1k AS T1  INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID  WHERE T2.Country = 'CZE' AND T1.Date > '2012-01-01';",
            "4": "SELECT COUNT(*)  FROM transactions_1k AS T1  INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID  WHERE T2.Country = 'CZE' AND T1.Date > '2012-01-01'",
            "5": "SELECT COUNT(*) FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T2.Country = 'CZE' AND T1.Date > '2012-01-01'",
            "2": "SELECT COUNT(*) FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T2.Country = 'CZE' AND T1.Date > '2012-01-01'",
            "3": "SELECT   COUNT(T1.Date) FROM transactions_1k AS T1 INNER JOIN gasstations AS T2   ON T1.GasStationID = T2.GasStationID WHERE   T2.Country = 'CZE' AND T1.Date > '2012-01-01';",
            "6": "SELECT count(*) FROM transactions_1k AS T1 JOIN gasstations AS T2 ON T1.GasStationID  =  T2.GasStationID WHERE T2.Country  =  'CZE' AND T1.Date  >  '2012-01-01'"
        }
    },
    {
        "question_id": 1510,
        "database": "debit_card_specializing",
        "evidence": "Gas station in the Czech Republic implies that Country = 'CZE'",
        "question": "What is the average total price of the transactions taken place in gas stations in the Czech Republic?",
        "schema_used": {
            "transactions_1k": [
                "price",
                "gasstationid"
            ],
            "gasstations": [
                "gasstationid",
                "country"
            ]
        },
        "gold": "SELECT AVG(T1.Price) FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T2.Country = 'CZE'",
        "candidates": {
            "4": "SELECT AVG(Price) FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T2.Country = 'CZE'",
            "2": "SELECT AVG(T1.Price) FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T2.Country = 'CZE'",
            "1": "SELECT AVG(Price)  FROM transactions_1k AS T1  INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID  WHERE T2.Country = 'CZE';",
            "5": "SELECT AVG(T1.Price) FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T2.Country = 'CZE'",
            "3": "SELECT   AVG(T1.Price) FROM transactions_1k AS T1 INNER JOIN gasstations AS T2   ON T1.GasStationID = T2.GasStationID WHERE   T2.Country = 'CZE';",
            "6": "SELECT avg(price) FROM transactions_1k AS T1 JOIN gasstations AS T2 ON T1.GasStationID  =  T2.GasStationID WHERE T2.Country  =  'CZE'"
        }
    },
    {
        "question_id": 1511,
        "database": "debit_card_specializing",
        "evidence": "",
        "question": "For the customers who paid in the euro, what is their average total price of the transactions?",
        "schema_used": {
            "transactions_1k": [
                "price",
                "gasstationid",
                "customerid"
            ],
            "gasstations": [
                "gasstationid"
            ],
            "customers": [
                "customerid",
                "currency"
            ]
        },
        "gold": "SELECT AVG(T1.Price) FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID INNER JOIN customers AS T3 ON T1.CustomerID = T3.CustomerID WHERE T3.Currency = 'EUR'",
        "candidates": {
            "4": "SELECT AVG(Price)  FROM transactions_1k AS T1  INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID  WHERE T2.Currency = 'EUR';",
            "1": "SELECT AVG(Price)  FROM transactions_1k AS T1  INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID  WHERE T2.Currency = 'EUR';",
            "5": "SELECT AVG(T1.Price) FROM transactions_1k AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Currency = 'EUR'",
            "2": "SELECT AVG(T1.Price) FROM transactions_1k AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Currency = 'EUR'",
            "3": "SELECT AVG(T1.Price) FROM transactions_1k AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Currency = 'EUR'",
            "6": "SELECT avg(price) FROM TRANSACTIONS_1K AS T1 JOIN CUSTOMERS AS T2 ON T1.CustomerID  =  T2.CustomerID WHERE T2.Currency  =  'EUR'"
        }
    },
    {
        "question_id": 1512,
        "database": "debit_card_specializing",
        "evidence": "'2012/8/25' can be represented by '2012-08-25'",
        "question": "Which customer paid the most in 2012/8/25?",
        "schema_used": {
            "transactions_1k": [
                "customerid",
                "date",
                "price"
            ]
        },
        "gold": "SELECT CustomerID FROM transactions_1k WHERE Date = '2012-08-25' GROUP BY CustomerID ORDER BY SUM(Price) DESC LIMIT 1",
        "candidates": {
            "4": "SELECT CustomerID  FROM transactions_1k  WHERE Date = '2012-08-25'  GROUP BY CustomerID  ORDER BY SUM(Price) DESC  LIMIT 1;",
            "1": "SELECT CustomerID FROM transactions_1k WHERE Date = '2012-08-25' GROUP BY CustomerID ORDER BY SUM(Price) DESC LIMIT 1;",
            "5": "SELECT CustomerID FROM transactions_1k WHERE Date = '2012-08-25' ORDER BY Price DESC LIMIT 1",
            "2": "SELECT CustomerID  FROM  transactions_1k  WHERE  Date = '2012-08-25'  GROUP BY  CustomerID  ORDER BY  SUM(Price) DESC  LIMIT 1",
            "6": "SELECT CustomerID FROM TRANSACTIONS_1K WHERE Date = '2012-08-25' ORDER BY Price DESC LIMIT 1",
            "3": "SELECT CustomerID FROM transactions_1k WHERE Date = '2012-08-25' ORDER BY Price DESC LIMIT 1"
        }
    },
    {
        "question_id": 1513,
        "database": "debit_card_specializing",
        "evidence": "'2012/8/25' can be represented by '2012-08-25'",
        "question": "Which country's gas station had the first paid cusomer in 2012/8/25?",
        "schema_used": {
            "gasstations": [
                "country",
                "gasstationid"
            ],
            "transactions_1k": [
                "gasstationid",
                "date",
                "time"
            ]
        },
        "gold": "SELECT T2.Country FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T1.Date = '2012-08-25' ORDER BY T1.Time DESC LIMIT 1",
        "candidates": {
            "5": "SELECT T1.Country FROM gasstations AS T1 INNER JOIN transactions_1k AS T2 ON T1.GasStationID = T2.GasStationID WHERE T2.Date = '2012-08-25' LIMIT 1",
            "1": "SELECT T2.Country  FROM transactions_1k AS T1  INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID  WHERE Date = '2012-08-25'  ORDER BY T1.Price ASC  LIMIT 1;",
            "4": "SELECT T2.Country  FROM transactions_1k AS T1  INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID  WHERE Date = '2012-08-25'  ORDER BY T1.Date, T1.Time  LIMIT 1;",
            "2": "SELECT T2.Country FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T1.Date = '2012-08-25' ORDER BY T1.Date LIMIT 1",
            "6": "SELECT T2.Country FROM transactions_1k AS T1 JOIN gasstations AS T2 ON T1.GasStationID  =  T2.GasStationID WHERE T1.Date  =  '2012-08-25' LIMIT 1",
            "3": "SELECT   T2.Country FROM transactions_1k AS T1 INNER JOIN gasstations AS T2   ON T1.GasStationID = T2.GasStationID WHERE   T1.Date = '2012-08-25' LIMIT 1;"
        }
    },
    {
        "question_id": 1514,
        "database": "debit_card_specializing",
        "evidence": "'2012/8/24' can be represented by '2012-08-24'; ",
        "question": "What kind of currency did the customer paid at 16:25:00 in 2012/8/24?",
        "schema_used": {
            "customers": [
                "currency",
                "customerid"
            ],
            "transactions_1k": [
                "gasstationid",
                "customerid",
                "date",
                "time"
            ],
            "gasstations": [
                "gasstationid"
            ]
        },
        "gold": "SELECT DISTINCT T3.Currency FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID INNER JOIN customers AS T3 ON T1.CustomerID = T3.CustomerID WHERE T1.Date = '2012-08-24' AND T1.Time = '16:25:00'",
        "candidates": {
            "4": "SELECT T1.Currency  FROM customers AS T1  INNER JOIN transactions_1k AS T2  ON T1.CustomerID = T2.CustomerID  WHERE T2.Date = '2012-08-24' AND T2.Time = '16:25:00'",
            "1": "SELECT T2.Currency  FROM transactions_1k AS T1  INNER JOIN customers AS T2  ON T1.CustomerID = T2.CustomerID  WHERE T1.Date = '2012-08-24' AND T1.Time = '16:25:00';",
            "5": "SELECT T1.Currency FROM customers AS T1 INNER JOIN transactions_1k AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Date = '2012-08-24' AND T2.Time = '16:25:00'",
            "2": "SELECT T1.Currency FROM customers AS T1 INNER JOIN transactions_1k AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Date = '2012-08-24' AND T2.Time = '16:25:00'",
            "3": "SELECT   T2.Currency FROM transactions_1k AS T1 INNER JOIN customers AS T2   ON T1.CustomerID = T2.CustomerID WHERE   T1.Date = '2012-08-24' AND T1.Time = '16:25:00';",
            "6": "SELECT T2.Currency FROM TRANSACTIONS_1K AS T1 JOIN CUSTOMERS AS T2 ON T1.CustomerID  =  T2.CustomerID WHERE T1.Time  =  \"16:25:00\" AND T1.Date  =  \"2012-08-24\""
        }
    },
    {
        "question_id": 1515,
        "database": "debit_card_specializing",
        "evidence": "'2012/8/23' can be represented by '2012-08-23'",
        "question": "What segment did the customer have at 2012/8/23 21:20:00?",
        "schema_used": {
            "customers": [
                "segment",
                "customerid"
            ],
            "transactions_1k": [
                "customerid",
                "date",
                "time"
            ]
        },
        "gold": "SELECT T2.Segment FROM transactions_1k AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.date = '2012-08-23' AND T1.time = '21:20:00'",
        "candidates": {
            "4": "SELECT T2.Segment  FROM transactions_1k AS T1  INNER JOIN customers AS T2  ON T1.CustomerID = T2.CustomerID  WHERE DATE(T1.Date) = '2012-08-23' AND T1.Time = '21:20:00';",
            "5": "SELECT T1.Segment FROM customers AS T1 INNER JOIN transactions_1k AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Date = '2012-08-23' AND T2.Time = '21:20:00'",
            "2": "SELECT T1.Segment FROM customers AS T1 INNER JOIN transactions_1k AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Date = '2012-08-23' AND T2.Time = '21:20:00'",
            "6": "SELECT T2.Segment FROM transactions_1k AS T1 JOIN customers AS T2 ON T1.CustomerID  =  T2.CustomerID WHERE T1.Date  =  '2012-08-23' AND T1.Time  =  '21:20:00'",
            "3": "SELECT T2.Segment FROM transactions_1k AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Date = '2012-08-23' AND T1.Time = '21:20:00'",
            "1": "SELECT T2.Segment FROM transactions_1k AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Date = '2012-08-23' ORDER BY ABS(JULIANDAY(T1.Date || ' ' || T1.Time) - JULIANDAY('2012-08-23 21:20:00')) LIMIT 1;"
        }
    },
    {
        "question_id": 1516,
        "database": "debit_card_specializing",
        "evidence": "'2012/8/26' can be represented by '2012-08-26'; The morning refers to the time before '13:00:00'",
        "question": "How many transactions were paid in CZK in the morning of 2012/8/26?",
        "schema_used": {
            "transactions_1k": [
                "transactionid",
                "customerid",
                "date",
                "time"
            ],
            "customers": [
                "customerid",
                "currency"
            ]
        },
        "gold": "SELECT COUNT(T1.TransactionID) FROM transactions_1k AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Date = '2012-08-26' AND T1.Time < '13:00:00' AND T2.Currency = 'CZK'",
        "candidates": {
            "4": "SELECT COUNT(*)  FROM transactions_1k AS T1  INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID  WHERE T1.Date = '2012-08-26' AND T1.Time < '13:00:00' AND T2.Currency = 'CZK';",
            "1": "SELECT COUNT(*) FROM transactions_1k AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Date = '2012-08-26' AND T1.Time < '13:00:00' AND T2.Currency = 'CZK';",
            "5": "SELECT COUNT(*) FROM transactions_1k AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Date = '2012-08-26' AND T1.Time < '13:00:00' AND T2.Currency = 'CZK'",
            "2": "SELECT COUNT(*) FROM transactions_1k AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Currency = 'CZK' AND T1.Date = '2012-08-26' AND T1.Time < '13:00:00'",
            "6": "SELECT count(*) FROM TRANSACTIONS_1K AS T1 JOIN CUSTOMERS AS T2 ON T1.CustomerID  =  T2.CustomerID WHERE T2.Currency  =  \"CZK\" AND T1.Date  =  \"2012-08-26\" AND T1.Time  <  \"13:00:00\"",
            "3": "SELECT   COUNT(T1.CustomerID) FROM transactions_1k AS T1 INNER JOIN customers AS T2   ON T1.CustomerID = T2.CustomerID WHERE   STRFTIME('%Y-%m-%d', T1.Date) = '2012-08-26' AND T1.Time < '13:00:00' AND T2.Currency = 'CZK';"
        }
    },
    {
        "question_id": 1517,
        "database": "debit_card_specializing",
        "evidence": "",
        "question": "For the earliest customer, what segment did he/she have?",
        "schema_used": {
            "customers": [
                "segment",
                "customerid"
            ],
            "transactions_1k": [
                "customerid",
                "date"
            ]
        },
        "gold": "SELECT T2.Segment FROM transactions_1k AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID ORDER BY Date ASC LIMIT 1",
        "candidates": {
            "4": "SELECT Segment  FROM customers  WHERE CustomerID = (SELECT MIN(CustomerID) FROM customers);",
            "1": "SELECT Segment  FROM customers  WHERE CustomerID = (SELECT MIN(CustomerID) FROM customers);",
            "5": "SELECT T1.Segment FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID ORDER BY T2.Date LIMIT 1",
            "3": "SELECT T2.Segment FROM yearmonth AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID ORDER BY T1.Date LIMIT 1",
            "2": "SELECT T1.Segment FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID ORDER BY T2.Date LIMIT 1",
            "6": "SELECT T2.Segment FROM yearmonth AS T1 JOIN customers AS T2 ON T1.CustomerID  =  T2.CustomerID ORDER BY T1.Date LIMIT 1"
        }
    },
    {
        "question_id": 1518,
        "database": "debit_card_specializing",
        "evidence": "'2012/8/24 12:42:00' can refer to date = '2012-08-24' AND T1.time = '12:42:00' in the database",
        "question": "For the deal happened at 2012/8/24 12:42:00, which country was it?",
        "schema_used": {
            "gasstations": [
                "country",
                "gasstationid"
            ],
            "transactions_1k": [
                "gasstationid",
                "date",
                "time"
            ]
        },
        "gold": "SELECT T2.Country FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T1.Date = '2012-08-24' AND T1.Time = '12:42:00'",
        "candidates": {
            "4": "SELECT T2.Country  FROM transactions_1k AS T1  INNER JOIN gasstations AS T2  ON T1.GasStationID = T2.GasStationID  WHERE T1.Date = '2012-08-24' AND T1.Time = '12:42:00'",
            "1": "SELECT T2.Country  FROM transactions_1k AS T1  INNER JOIN gasstations AS T2  ON T1.GasStationID = T2.GasStationID  WHERE DATE(T1.Date) = '2012-08-24' AND T1.Time = '12:42:00';",
            "5": "SELECT T2.Country FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T1.Date = '2012-08-24' AND T1.Time = '12:42:00'",
            "2": "SELECT T2.Country FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T1.Date = '2012-08-24' AND T1.Time = '12:42:00'",
            "3": "SELECT   T2.Country FROM transactions_1k AS T1 INNER JOIN gasstations AS T2   ON T1.GasStationID = T2.GasStationID WHERE   T1.Date = '2012-08-24' AND T1.Time = '12:42:00';",
            "6": "SELECT T2.Country FROM transactions_1k AS T1 JOIN gasstations AS T2 ON T1.GasStationID  =  T2.GasStationID WHERE T1.Date  =  '2012-08-24' AND T1.Time  =  '12:42:00'"
        }
    },
    {
        "question_id": 1519,
        "database": "debit_card_specializing",
        "evidence": "'2012/8/23 21:20:00' can refer to date = '2012-08-23' AND T1.time = '21:20:00' in the database",
        "question": "What was the product id of the transaction happened at 2012/8/23 21:20:00?",
        "schema_used": {
            "transactions_1k": [
                "productid",
                "gasstationid",
                "date",
                "time"
            ],
            "gasstations": [
                "gasstationid"
            ]
        },
        "gold": "SELECT T1.ProductID FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T1.Date = '2012-08-23' AND T1.Time = '21:20:00'",
        "candidates": {
            "4": "SELECT ProductID FROM transactions_1k WHERE Date = '2012-08-23' AND Time = '21:20:00'",
            "5": "SELECT ProductID FROM transactions_1k WHERE Date = '2012-08-23' AND Time = '21:20:00'",
            "1": "SELECT ProductID  FROM transactions_1k  WHERE Date = '2012-08-23' AND Time = '21:20:00';",
            "2": "SELECT ProductID FROM transactions_1k WHERE Date = '2012-08-23' AND Time = '21:20:00'",
            "6": "SELECT ProductID FROM transactions_1k WHERE Date = '2012-08-23' AND Time = '21:20:00'",
            "3": "SELECT ProductID FROM transactions_1k WHERE Date = '2012-08-23' AND Time = '21:20:00'"
        }
    },
    {
        "question_id": 1520,
        "database": "debit_card_specializing",
        "evidence": "'2012/8/24' can be represented by '2012-08-24'; expense and the consumption has the similar meaning.",
        "question": "For the customer who paid 124.05 in 2012/8/24, how much did he/she spend during the January of 2012? And what is the date and expenses exactly?",
        "schema_used": {
            "transactions_1k": [
                "customerid",
                "date",
                "price"
            ],
            "yearmonth": [
                "date",
                "consumption",
                "customerid"
            ]
        },
        "gold": "SELECT T1.CustomerID, T2.Date, T2.Consumption FROM transactions_1k AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Date = '2012-08-24' AND T1.Price = 124.05 AND T2.Date = '201201'",
        "candidates": {
            "5": "SELECT T1.Consumption, T2.Date, T2.Price FROM yearmonth AS T1 INNER JOIN transactions_1k AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Date LIKE '2012-01%' AND T2.Price = 124.05",
            "4": "SELECT T1.Date, T1.Price  FROM transactions_1k AS T1  WHERE T1.CustomerID = (     SELECT T2.CustomerID      FROM transactions_1k AS T2      WHERE T2.Date = '2012-08-24' AND T2.Price = 124.05 )  AND strftime('%Y-%m', T1.Date) = '2012-01'",
            "6": "SELECT T1.Consumption, T2.Date, T2.Price FROM yearmonth AS T1 JOIN transactions_1k AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Price = 124.05 AND T2.Date = '2012-08-24' AND T1.Consumption LIKE '2012-01%'",
            "2": "SELECT T1.Consumption, T2.Date, T2.Price FROM yearmonth AS T1 INNER JOIN transactions_1k AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Date LIKE '2012-01%' AND T2.Price = 124.05",
            "3": "SELECT   T1.Consumption,   T2.Date,   T2.Price FROM yearmonth AS T1 INNER JOIN transactions_1k AS T2   ON T1.CustomerID = T2.CustomerID WHERE   T2.Price = 124.05 AND T2.Date = '2012-08-24' AND T1.Date LIKE '201201%';",
            "1": "SELECT T1.Date, T1.Price  FROM transactions_1k AS T1  WHERE T1.Date = '2012-08-24' AND T1.Price = 124.05;  SELECT T2.Consumption  FROM yearmonth AS T2  WHERE T2.CustomerID = (SELECT CustomerID FROM transactions_1k WHERE Date = '2012-08-24' AND Price = 124.05)  AND T2.Date = '201201';"
        }
    },
    {
        "question_id": 1521,
        "database": "debit_card_specializing",
        "evidence": "Czech Republic can be represented as the Country value in the gasstations table is 'CZE'; '2012/8/26' can be represented by '2012-08-26'; during 8:00-9:00 can be represented as Time BETWEEN '08:00:00' AND '09:00:00'",
        "question": "For all the transactions happened during 8:00-9:00 in 2012/8/26, how many happened in CZE?",
        "schema_used": {
            "transactions_1k": [
                "transactionid",
                "gasstationid",
                "date",
                "time"
            ],
            "gasstations": [
                "gasstationid",
                "country"
            ]
        },
        "gold": "SELECT COUNT(T1.TransactionID) FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T1.Date = '2012-08-26' AND T1.Time BETWEEN '08:00:00' AND '09:00:00' AND T2.Country = 'CZE'",
        "candidates": {
            "2": "SELECT COUNT(*) FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T1.Date = '2012-08-26' AND T1.Time BETWEEN '08:00:00' AND '09:00:00' AND T2.Country = 'CZE'",
            "1": "SELECT COUNT(T1.GasStationID) FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T1.Date = '2012-08-26'  AND T1.Time BETWEEN '08:00:00' AND '09:00:00' AND T2.Country = 'CZE';",
            "4": "SELECT COUNT(t1.Date) FROM transactions_1k AS t1 INNER JOIN gasstations AS t2 ON t1.GasStationID = t2.GasStationID WHERE t1.Date = '2012-08-26'  AND t1.Time BETWEEN '08:00:00' AND '09:00:00' AND t2.Country = 'CZE';",
            "5": "SELECT COUNT(*) FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T1.Date = '2012-08-26' AND T1.Time BETWEEN '08:00:00' AND '09:00:00' AND T2.Country = 'CZE'",
            "6": "SELECT count(*) FROM transactions_1k AS t1 JOIN gasstations AS t2 ON t1.GasStationID  =  t2.GasStationID WHERE t1.Date  =  '2012-08-26' AND t1.Time BETWEEN '08:00:00' AND '09:00:00' AND t2.Country  =  'CZE'",
            "3": "SELECT   COUNT(T1.GasStationID) FROM transactions_1k AS T1 INNER JOIN gasstations AS T2   ON T1.GasStationID = T2.GasStationID WHERE   T1.Date = '2012-08-26' AND T1.Time BETWEEN '08:00:00' AND '09:00:00' AND T2.Country = 'CZE';"
        }
    },
    {
        "question_id": 1522,
        "database": "debit_card_specializing",
        "evidence": "June of 2013 means Date contains '201306' in the yearmonth.date of the database",
        "question": "There's one customer spent 214582.17 in the June of 2013, which currency did he/she use?",
        "schema_used": {
            "customers": [
                "currency",
                "customerid"
            ],
            "yearmonth": [
                "customerid",
                "date",
                "consumption"
            ]
        },
        "gold": "SELECT T2.Currency FROM yearmonth AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Date = '201306' AND T1.Consumption = 214582.17",
        "candidates": {
            "4": "SELECT T2.Currency  FROM yearmonth AS T1  INNER JOIN customers AS T2  ON T1.CustomerID = T2.CustomerID  WHERE T1.Date LIKE '%201306%' AND T1.Consumption = 214582.17;",
            "1": "SELECT T2.Currency  FROM yearmonth AS T1  INNER JOIN customers AS T2  ON T1.CustomerID = T2.CustomerID  WHERE T1.Date LIKE '%201306%'  AND T1.Consumption = 214582.17;",
            "2": "SELECT T1.Currency FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Consumption = 214582.17 AND T2.Date = '201306'",
            "5": "SELECT T1.Currency FROM customers AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Consumption = 214582.17 AND T2.Date = '201306'",
            "6": "SELECT T2.Currency FROM yearmonth AS T1 JOIN customers AS T2 ON T1.CustomerID  =  T2.CustomerID WHERE T1.Date LIKE '201306' AND T1.Consumption  =  214582.17",
            "3": "SELECT   T2.Currency FROM yearmonth AS T1 INNER JOIN customers AS T2   ON T1.CustomerID = T2.CustomerID WHERE   T1.Date LIKE '201306' AND T1.Consumption = 214582.17;"
        }
    },
    {
        "question_id": 1523,
        "database": "debit_card_specializing",
        "evidence": "",
        "question": "Which country was the card owner of No.667467 in?",
        "schema_used": {
            "gasstations": [
                "country",
                "gasstationid"
            ],
            "transactions_1k": [
                "gasstationid",
                "cardid"
            ]
        },
        "gold": "SELECT T2.Country FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T1.CardID = '667467'",
        "candidates": {
            "4": "SELECT T2.Country  FROM transactions_1k AS T1  INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID  WHERE T1.CardID = 667467;",
            "1": "SELECT T2.Country  FROM transactions_1k AS T1  INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID  WHERE T1.CardID = 667467;",
            "2": "SELECT T1.Country FROM gasstations AS T1 INNER JOIN transactions_1k AS T2 ON T1.GasStationID = T2.GasStationID WHERE T2.CardID = 667467",
            "5": "SELECT T2.Country FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T1.CardID = 667467",
            "3": "SELECT   T2.Country FROM transactions_1k AS T1 INNER JOIN gasstations AS T2   ON T1.GasStationID = T2.GasStationID WHERE   T1.CardID = 667467;",
            "6": "SELECT T2.Country FROM transactions_1k AS T1 JOIN gasstations AS T2 ON T1.GasStationID  =  T2.GasStationID WHERE T1.CardID  =  667467"
        }
    },
    {
        "question_id": 1524,
        "database": "debit_card_specializing",
        "evidence": "'2012/8/24' can be represented by '2012-08-24'",
        "question": "What's the nationality of the customer who spent 548.4 in 2012/8/24?",
        "schema_used": {
            "gasstations": [
                "country",
                "gasstationid"
            ],
            "transactions_1k": [
                "gasstationid",
                "date",
                "price"
            ]
        },
        "gold": "SELECT T2.Country FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T1.Date = '2012-08-24' AND T1.Price = 548.4",
        "candidates": {
            "5": "SELECT T2.Country FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T1.Date = '2012-08-24' AND T1.Price = 548.4",
            "2": "SELECT T1.Country FROM gasstations AS T1 INNER JOIN transactions_1k AS T2 ON T1.GasStationID = T2.GasStationID WHERE T2.Date = '2012-08-24' AND T2.Price = 548.4",
            "4": "SELECT T2.Country  FROM transactions_1k AS T1  INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID  WHERE T1.Date = '2012-08-24' AND T1.Price = 548.4;",
            "6": "SELECT T2.Country FROM transactions_1k AS T1 JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T1.Price = 548.4 AND T1.Date = '2012-08-24'",
            "3": "SELECT T2.Country FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T1.Date = '2012-08-24' AND T1.Price = 548.4",
            "1": "SELECT T2.Country  FROM transactions_1k AS T1  INNER JOIN gasstations AS T2  ON T1.GasStationID = T2.GasStationID  WHERE T1.Date = '2012-08-24' AND T1.Price = 548.4;"
        }
    },
    {
        "question_id": 1525,
        "database": "debit_card_specializing",
        "evidence": "'2012/8/25' can be represented by '2012-08-25'",
        "question": "What is the percentage of the customers who used EUR in 2012/8/25?",
        "schema_used": {
            "transactions_1k": [
                "customerid",
                "date"
            ],
            "customers": [
                "customerid",
                "currency"
            ]
        },
        "gold": "SELECT CAST(SUM(IIF(T2.Currency = 'EUR', 1, 0)) AS FLOAT) * 100 / COUNT(T1.CustomerID) FROM transactions_1k AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Date = '2012-08-25'",
        "candidates": {
            "4": "SELECT CAST(SUM(CASE WHEN T2.Currency = 'EUR' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.CustomerID)  FROM transactions_1k AS T1  INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID  WHERE T1.Date = '2012-08-25'",
            "2": "SELECT CAST(SUM(CASE WHEN T1.Currency = 'EUR' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM customers AS T1 INNER JOIN transactions_1k AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Date = '2012-08-25'",
            "5": "SELECT CAST(SUM(CASE WHEN T1.Currency = 'EUR' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM customers AS T1 INNER JOIN transactions_1k AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Date = '2012-08-25'",
            "1": "SELECT CAST(SUM(IIF(T1.Date = '2012-08-25' AND T2.Currency = 'EUR', 1, 0)) AS REAL) * 100 / COUNT(DISTINCT T1.CustomerID)  FROM transactions_1k AS T1  INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID  WHERE T1.Date = '2012-08-25';",
            "6": "SELECT CAST(SUM(IIF(T2.Currency = 'EUR', 1, 0)) AS REAL) * 100 / COUNT(T1.CustomerID) FROM transactions_1k AS T1 JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Date = '2012-08-25'",
            "3": "SELECT CAST(SUM(IIF(T2.Currency = 'EUR', 1, 0)) AS REAL) * 100 / COUNT(T1.CustomerID) FROM transactions_1k AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Date = '2012-08-25'"
        }
    },
    {
        "question_id": 1526,
        "database": "debit_card_specializing",
        "evidence": "'2012/8/24' can be represented by '2012-08-24'; Consumption decrease rate = (consumption_2012 - consumption_2013) / consumption_2012",
        "question": "For the customer who paid 634.8 in 2012/8/25, what was the consumption decrease rate from Year 2012 to 2013?",
        "schema_used": {
            "transactions_1k": [
                "customerid",
                "gasstationid",
                "date",
                "price"
            ],
            "gasstations": [
                "gasstationid"
            ],
            "yearmonth": [
                "customerid",
                "consumption",
                "date"
            ]
        },
        "gold": "SELECT CAST(SUM(IIF(SUBSTR(Date, 1, 4) = '2012', Consumption, 0)) - SUM(IIF(SUBSTR(Date, 1, 4) = '2013', Consumption, 0)) AS FLOAT) / SUM(IIF(SUBSTR(Date, 1, 4) = '2012', Consumption, 0)) FROM yearmonth WHERE CustomerID = ( SELECT T1.CustomerID FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T1.Date = '2012-08-25' AND T1.Price = 634.8 )",
        "candidates": {
            "4": "SELECT      (T1.Consumption - T3.Consumption) * 100 / T1.Consumption AS decrease_rate FROM      yearmonth AS T1 JOIN      transactions_1k AS T2 ON T1.CustomerID = T2.CustomerID JOIN      yearmonth AS T3 ON T1.CustomerID = T3.CustomerID WHERE      T2.Date = '2012-08-25' AND T2.Price = 634.8     AND T1.Date = 201208     AND T3.Date = 201308",
            "5": "SELECT CAST((SUM(CASE WHEN T1.Date LIKE '2012%' THEN T1.Consumption ELSE 0 END) - SUM(CASE WHEN T1.Date LIKE '2013%' THEN T1.Consumption ELSE 0 END)) AS REAL) * 100 / SUM(CASE WHEN T1.Date LIKE '2012%' THEN T1.Consumption ELSE 0 END) FROM yearmonth AS T1 INNER JOIN transactions_1k AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Date = '2012-08-25' AND T2.Price = 634.8",
            "2": "SELECT CAST((SUM(CASE WHEN T1.Date LIKE '2012%' THEN T1.Consumption ELSE 0 END) - SUM(CASE WHEN T1.Date LIKE '2013%' THEN T1.Consumption ELSE 0 END)) AS REAL) * 100 / SUM(CASE WHEN T1.Date LIKE '2012%' THEN T1.Consumption ELSE 0 END) FROM yearmonth AS T1 INNER JOIN transactions_1k AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Date = '2012-08-25' AND T2.Price = 634.8",
            "6": "SELECT CAST(SUM(CASE WHEN T1.Date LIKE '2012%' THEN T1.Consumption ELSE 0 END) - SUM(CASE WHEN T1.Date LIKE '2013%' THEN T1.Consumption ELSE 0 END) AS REAL) * 100 / SUM(CASE WHEN T1.Date LIKE '2012%' THEN T1.Consumption ELSE 0 END) FROM yearmonth AS T1 JOIN transactions_1k AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Date = '2012-08-25' AND T2.Price = 634.8",
            "3": "SELECT CAST(SUM(CASE WHEN T1.Date LIKE '2012%' THEN T1.Consumption ELSE 0 END) - SUM(CASE WHEN T1.Date LIKE '2013%' THEN T1.Consumption ELSE 0 END) AS REAL) * 100 / SUM(CASE WHEN T1.Date LIKE '2012%' THEN T1.Consumption ELSE 0 END) FROM yearmonth AS T1 INNER JOIN transactions_1k AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.Date = '2012-08-25' AND T2.Price = 634.8",
            "1": "SELECT WITH CustomerIDCTE AS (     SELECT CustomerID     FROM transactions_1k     WHERE Date = '2012-08-25' AND Price = 634.8 ), ConsumptionCTE AS (     SELECT          CustomerID,         CAST(SUM(CASE WHEN Date LIKE '2012%' THEN Consumption ELSE 0 END) AS REAL) AS consumption_2012,         CAST(SUM(CASE WHEN Date LIKE '2013%' THEN Consumption ELSE 0 END) AS REAL) AS consumption_2013     FROM yearmonth     WHERE CustomerID IN (SELECT CustomerID FROM CustomerIDCTE)     GROUP BY CustomerID ) SELECT      CustomerID,     ((consumption_2012 - consumption_2013) / consumption_2012) * 100 AS consumption_decrease_rate FROM ConsumptionCTE;"
        }
    },
    {
        "question_id": 1527,
        "database": "debit_card_specializing",
        "evidence": "",
        "question": "Which gas station has the highest amount of revenue?",
        "schema_used": {
            "transactions_1k": [
                "gasstationid",
                "price"
            ]
        },
        "gold": "SELECT GasStationID FROM transactions_1k GROUP BY GasStationID ORDER BY SUM(Price) DESC LIMIT 1",
        "candidates": {
            "5": "SELECT GasStationID FROM transactions_1k GROUP BY GasStationID ORDER BY SUM(Amount*Price) DESC LIMIT 1",
            "2": "SELECT GasStationID, SUM(Amount * Price) AS TotalRevenue  FROM  transactions_1k  GROUP BY  GasStationID  ORDER BY  TotalRevenue DESC  LIMIT 1",
            "4": "SELECT GasStationID  FROM transactions_1k  GROUP BY GasStationID  ORDER BY SUM(Amount * Price) DESC  LIMIT 1;",
            "1": "SELECT GasStationID  FROM transactions_1k  GROUP BY GasStationID  ORDER BY SUM(Price * Amount) DESC  LIMIT 1;",
            "3": "SELECT GasStationID FROM transactions_1k ORDER BY Price DESC LIMIT 1",
            "6": "SELECT GasStationID FROM transactions_1k ORDER BY Price DESC LIMIT 1"
        }
    },
    {
        "question_id": 1528,
        "database": "debit_card_specializing",
        "evidence": "",
        "question": "What is the percentage of \"premium\" against the overall segment in Country = \"SVK\"?",
        "schema_used": {
            "gasstations": [
                "country",
                "segment"
            ]
        },
        "gold": "SELECT CAST(SUM(IIF(Country = 'SVK' AND Segment = 'Premium', 1, 0)) AS FLOAT) * 100 / SUM(IIF(Country = 'SVK', 1, 0)) FROM gasstations",
        "candidates": {
            "1": "SELECT CAST(SUM(CASE WHEN Segment = 'Premium' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*)  FROM gasstations  WHERE Country = 'SVK';",
            "4": "SELECT CAST(SUM(CASE WHEN T1.Segment = 'Premium' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.Segment)  FROM gasstations AS T1  WHERE T1.Country = 'SVK';",
            "2": "SELECT CAST(SUM(CASE WHEN T1.Segment = 'Premium' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM gasstations AS T1 WHERE T1.Country = 'SVK'",
            "5": "SELECT CAST(SUM(CASE WHEN Segment = 'Premium' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM gasstations WHERE Country = 'SVK'",
            "6": "SELECT CAST(SUM(CASE WHEN Segment = \"Premium\" THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM gasstations WHERE Country = \"SVK\"",
            "3": "SELECT CAST(SUM(CASE WHEN Country = \"SVK\" THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM gasstations WHERE Segment = \"Premium\""
        }
    },
    {
        "question_id": 1529,
        "database": "debit_card_specializing",
        "evidence": "January 2012 refers to the Date value = '201201'",
        "question": "What is the amount spent by customer \"38508\" at the gas stations? How much had the customer spent in January 2012?",
        "schema_used": {
            "transactions_1k": [
                "price",
                "gasstationid",
                "customerid"
            ],
            "gasstations": [
                "gasstationid"
            ],
            "yearmonth": [
                "customerid",
                "date"
            ]
        },
        "gold": "SELECT SUM(T1.Price) , SUM(IIF(T3.Date = '201201', T1.Price, 0)) FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID INNER JOIN yearmonth AS T3 ON T1.CustomerID = T3.CustomerID WHERE T1.CustomerID = '38508'",
        "candidates": {
            "1": "SELECT SUM(T1.Amount)  FROM transactions_1k AS T1  INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID  WHERE T1.CustomerID = 38508 AND strftime('%Y%m', T1.Date) = '201201';",
            "5": "SELECT SUM(Amount),SUM(CASE WHEN STRFTIME('%Y-%m', Date)='2012-01' THEN Amount ELSE 0 END) FROM transactions_1k WHERE CustomerID=38508",
            "2": "SELECT SUM(T1.Amount),  SUM(CASE WHEN STRFTIME('%Y-%m', T1.Date) = '2012-01' THEN T1.Amount ELSE 0 END)  FROM transactions_1k AS T1  INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID  WHERE T1.CustomerID = 38508",
            "3": "SELECT SUM(Amount) FROM transactions_1k WHERE CustomerID = 38508 AND STRFTIME('%Y-%m', Date) = '2012-01'",
            "6": "SELECT Amount FROM TRANSACTIONS_1K WHERE CustomerID  =  38508 INTERSECT SELECT Amount FROM TRANSACTIONS_1K WHERE Date LIKE '2012-01%'",
            "4": "SELECT      SUM(T1.Amount * T1.Price) AS TotalSpent,     SUM(CASE WHEN strftime('%Y-%m', T1.Date) = '2012-01' THEN T1.Amount * T1.Price ELSE 0 END) AS SpentInJanuary2012 FROM      transactions_1k AS T1 INNER JOIN      customers AS T2  ON      T1.CustomerID = T2.CustomerID WHERE      T1.CustomerID = 38508;"
        }
    },
    {
        "question_id": 1530,
        "database": "debit_card_specializing",
        "evidence": "Description of products contains full name",
        "question": "Which are the top five best selling products? Please state the full name of them.",
        "schema_used": {
            "products": [
                "description",
                "productid"
            ],
            "transactions_1k": [
                "productid",
                "amount"
            ]
        },
        "gold": "SELECT T2.Description FROM transactions_1k AS T1 INNER JOIN products AS T2 ON T1.ProductID = T2.ProductID ORDER BY T1.Amount DESC LIMIT 5",
        "candidates": {
            "4": "SELECT p.Description  FROM transactions_1k t  INNER JOIN products p ON t.ProductID = p.ProductID  GROUP BY p.ProductID  ORDER BY SUM(t.Amount) DESC  LIMIT 5;",
            "5": "SELECT Description FROM transactions_1k AS T1 INNER JOIN products AS T2 ON T1.ProductID  =  T2.ProductID GROUP BY T2.Description ORDER BY SUM(T1.Amount) DESC LIMIT 5",
            "2": "SELECT T1.Description FROM transactions_1k AS T2 INNER JOIN products AS T1 ON T1.ProductID  =  T2.ProductID GROUP BY T1.ProductID ORDER BY SUM(T2.Amount) DESC LIMIT 5",
            "6": "SELECT T2.Description FROM transactions_1k AS T1 JOIN products AS T2 ON T1.ProductID  =  T2.ProductID GROUP BY T2.Description ORDER BY sum(T1.Amount) DESC LIMIT 5",
            "1": "SELECT t2.Description AS ProductName FROM transactions_1k AS t1 INNER JOIN products AS t2 ON t1.ProductID = t2.ProductID GROUP BY t1.ProductID ORDER BY SUM(t1.Amount) DESC LIMIT 5;",
            "3": "SELECT T2.Description FROM transactions_1k AS T1 INNER JOIN products AS T2 ON T1.ProductID = T2.ProductID GROUP BY T2.ProductID ORDER BY SUM(T1.Amount) DESC LIMIT 5"
        }
    },
    {
        "question_id": 1531,
        "database": "debit_card_specializing",
        "evidence": "average price per single item = Total(price) / Total(amount)",
        "question": "Who is the top spending customer and how much is the average price per single item purchased by this customer? What currency was being used?",
        "schema_used": {
            "yearmonth": [
                "customerid",
                "consumption"
            ],
            "transactions_1k": [
                "customerid",
                "price",
                "amount"
            ],
            "customers": [
                "currency",
                "customerid"
            ]
        },
        "gold": "SELECT T2.CustomerID, SUM(T2.Price / T2.Amount), T1.Currency FROM customers AS T1 INNER JOIN transactions_1k AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.CustomerID = ( SELECT CustomerID FROM yearmonth ORDER BY Consumption DESC LIMIT 1 ) GROUP BY T2.CustomerID, T1.Currency",
        "candidates": {
            "4": "SELECT      c.CustomerID,      c.Currency,      SUM(t.Amount * t.Price) / SUM(t.Amount) AS Avg_Price_Per_Item FROM      transactions_1k t JOIN      customers c ON t.CustomerID = c.CustomerID GROUP BY      t.CustomerID, c.Currency ORDER BY      SUM(t.Amount * t.Price) DESC LIMIT 1;",
            "5": "SELECT T1.CustomerID,  AVG(T1.Price) ,  T2.Currency  FROM transactions_1k AS T1  INNER JOIN customers AS T2  ON T1.CustomerID = T2.CustomerID  GROUP BY T1.CustomerID  ORDER BY SUM(T1.Price * T1.Amount) DESC  LIMIT 1",
            "1": "SELECT      T2.CustomerID,      AVG(T1.Price) AS Avg_Price_Per_Item,      T2.Currency FROM      transactions_1k AS T1 INNER JOIN      customers AS T2  ON      T1.CustomerID = T2.CustomerID GROUP BY      T2.CustomerID, T2.Currency ORDER BY      SUM(T1.Price) DESC LIMIT 1;",
            "6": "SELECT T1.CustomerID ,  SUM(T1.Price) / SUM(T1.Amount), T2.Currency FROM transactions_1k AS T1 JOIN customers AS T2 ON T1.CustomerID  =  T2.CustomerID GROUP BY T1.CustomerID ORDER BY SUM(T1.Price) DESC LIMIT 1",
            "3": "SELECT   T1.CustomerID,   SUM(T1.Price) / SUM(T1.Amount),   T2.Currency FROM transactions_1k AS T1 INNER JOIN customers AS T2   ON T1.CustomerID = T2.CustomerID GROUP BY   T1.CustomerID ORDER BY   SUM(T1.Price) DESC LIMIT 1;",
            "2": "SELECT T1.CustomerID, AVG(T1.Price) , T2.Currency FROM transactions_1k AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID GROUP BY T1.CustomerID ORDER BY SUM(T1.Price) DESC LIMIT 1"
        }
    },
    {
        "question_id": 1532,
        "database": "debit_card_specializing",
        "evidence": "",
        "question": "Which country had the gas station that sold the most expensive product id No.2 for one unit?",
        "schema_used": {
            "gasstations": [
                "country",
                "gasstationid"
            ],
            "transactions_1k": [
                "gasstationid",
                "productid",
                "price"
            ]
        },
        "gold": "SELECT T2.Country FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T1.ProductID = 2 ORDER BY T1.Price DESC LIMIT 1",
        "candidates": {
            "4": "SELECT T2.Country  FROM transactions_1k AS T1  INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID  WHERE T1.ProductID = 2  ORDER BY T1.Price DESC  LIMIT 1;",
            "1": "SELECT T2.Country  FROM transactions_1k AS T1  INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID  WHERE T1.ProductID = 2  ORDER BY T1.Price DESC  LIMIT 1;",
            "2": "SELECT T2.Country FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID = T2.GasStationID WHERE T1.ProductID = 2 ORDER BY T1.Price DESC LIMIT 1",
            "5": "SELECT T2.Country FROM transactions_1k AS T1 INNER JOIN gasstations AS T2 ON T1.GasStationID  =  T2.GasStationID WHERE T1.ProductID  =  2 ORDER BY T1.Price DESC LIMIT 1",
            "6": "SELECT T2.Country FROM transactions_1k AS T1 JOIN gasstations AS T2 ON T1.GasStationID  =  T2.GasStationID WHERE T1.ProductID  =  2 ORDER BY T1.Price DESC LIMIT 1",
            "3": "SELECT   T2.Country FROM transactions_1k AS T1 INNER JOIN gasstations AS T2   ON T1.GasStationID = T2.GasStationID WHERE   T1.ProductID = 2 ORDER BY   T1.Price DESC LIMIT 1;"
        }
    },
    {
        "question_id": 1533,
        "database": "debit_card_specializing",
        "evidence": "August of 2012 refers to the Date value = '201208' ; Price per unit of product = Price / Amount;",
        "question": "For all the people who paid more than 29.00 per unit of product id No.5. Give their consumption status in the August of 2012.",
        "schema_used": {
            "yearmonth": [
                "consumption",
                "customerid",
                "date"
            ],
            "transactions_1k": [
                "customerid",
                "productid",
                "price",
                "amount"
            ]
        },
        "gold": "SELECT T2.Consumption FROM transactions_1k AS T1 INNER JOIN yearmonth AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.Price / T1.Amount > 29.00 AND T1.ProductID = 5 AND T2.Date = '201208'",
        "candidates": {
            "4": "SELECT ym.CustomerID, ym.Consumption FROM yearmonth AS ym JOIN transactions_1k AS t ON ym.CustomerID = t.CustomerID WHERE t.ProductID = 5 AND t.Price / t.Amount > 29.00 AND ym.Date = '201208'",
            "2": "SELECT T1.Consumption FROM yearmonth AS T1 INNER JOIN transactions_1k AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.ProductID = 5 AND T2.Price / T2.Amount > 29.00 AND T1.Date = '201208'",
            "5": "SELECT T1.Consumption FROM yearmonth AS T1 INNER JOIN customers AS T2 ON T1.CustomerID = T2.CustomerID INNER JOIN transactions_1k AS T3 ON T2.CustomerID = T3.CustomerID WHERE T3.ProductID = 5 AND T3.Price / T3.Amount > 29.00 AND T1.Date = '201208'",
            "6": "SELECT T1.Consumption FROM yearmonth AS T1 JOIN transactions_1k AS T2 ON T1.CustomerID = T2.CustomerID WHERE T2.ProductID = 5 AND T2.Price / T2.Amount > 29 AND T1.Date = 201208",
            "3": "SELECT   T1.Consumption FROM yearmonth AS T1 INNER JOIN transactions_1k AS T2   ON T1.CustomerID = T2.CustomerID WHERE   T2.ProductID = 5 AND T2.Price / T2.Amount > 29.00 AND T1.Date = 201208;",
            "1": "SELECT ym.CustomerID, ym.Date, ym.Consumption FROM yearmonth AS ym JOIN (     SELECT CustomerID     FROM transactions_1k     WHERE ProductID = 5 AND Price / Amount > 29.00     GROUP BY CustomerID ) AS t ON ym.CustomerID = t.CustomerID WHERE ym.Date = '201208';"
        }
    },
    {
        "question_id": 89,
        "database": "financial",
        "evidence": "A3 contains the data of region; 'POPLATEK PO OBRATU' represents for 'issuance after transaction'.",
        "question": "How many accounts who choose issuance after transaction are staying in East Bohemia region?",
        "schema_used": {
            "account": [
                "account_id",
                "district_id",
                "frequency"
            ],
            "district": [
                "district_id",
                "a3"
            ]
        },
        "gold": "SELECT COUNT(T2.account_id) FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id WHERE T1.A3 = 'east Bohemia' AND T2.frequency = 'POPLATEK PO OBRATU'",
        "candidates": {
            "4": "SELECT COUNT(*)  FROM account AS T1  INNER JOIN district AS T2 ON T1.district_id = T2.district_id  WHERE T1.frequency = 'POPLATEK PO OBRATU' AND T2.A3 = 'east bohemia';",
            "1": "SELECT COUNT(T1.account_id) FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.frequency = 'POPLATEK PO OBRATU' AND T2.A3 = 'East Bohemia';",
            "5": "SELECT COUNT(*) FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A3 = 'East Bohemia' AND T1.frequency = 'POPLATEK PO OBRATU'",
            "2": "SELECT COUNT(T1.account_id) FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A3 = 'East Bohemia' AND T1.frequency = 'POPLATEK PO OBRATU'",
            "6": "SELECT COUNT(*) FROM account AS T1 JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A3 = 'east Bohemia' AND T1.frequency = 'POPLATEK PO OBRATU'",
            "3": "SELECT COUNT(T1.account_id) FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A3 = 'east Bohemia' AND T1.frequency = 'POPLATEK PO OBRATU'"
        }
    },
    {
        "question_id": 90,
        "database": "financial",
        "evidence": "A3 contains the data of region",
        "question": "How many accounts who have region in Prague are eligible for loans?",
        "schema_used": {
            "account": [
                "account_id",
                "district_id"
            ],
            "loan": [
                "account_id"
            ],
            "district": [
                "district_id",
                "a3"
            ]
        },
        "gold": "SELECT COUNT(T1.account_id) FROM account AS T1 INNER JOIN loan AS T2 ON T1.account_id = T2.account_id INNER JOIN district AS T3 ON T1.district_id = T3.district_id WHERE T3.A3 = 'Prague'",
        "candidates": {
            "4": "SELECT COUNT(DISTINCT loan.account_id)  FROM loan  INNER JOIN account ON loan.account_id = account.account_id  INNER JOIN district ON account.district_id = district.district_id  WHERE district.A3 = 'Prague';",
            "1": "SELECT COUNT(DISTINCT loan.account_id) FROM loan INNER JOIN account ON loan.account_id = account.account_id INNER JOIN district ON account.district_id = district.district_id WHERE district.A3 = 'Prague';",
            "5": "SELECT COUNT(T1.account_id) FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A3 = 'Prague'",
            "2": "SELECT COUNT(T1.account_id) FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN loan AS T3 ON T1.account_id = T3.account_id WHERE T2.A3 = 'Prague'",
            "6": "SELECT COUNT(T1.account_id) FROM account AS T1 JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A3 = 'Prague'",
            "3": "SELECT   COUNT(T1.account_id) FROM account AS T1 INNER JOIN district AS T2   ON T1.district_id = T2.district_id INNER JOIN loan AS T3   ON T1.account_id = T3.account_id WHERE   T2.A3 = 'Prague';"
        }
    },
    {
        "question_id": 91,
        "database": "financial",
        "evidence": "A12 refers to unemploymant rate 1995; A13 refers to unemploymant rate 1996",
        "question": "The average unemployment ratio of 1995 and 1996, which one has higher percentage?",
        "schema_used": {
            "district": [
                "a13",
                "a12"
            ]
        },
        "gold": "SELECT DISTINCT IIF(AVG(A13) > AVG(A12), '1996', '1995') FROM district",
        "candidates": {
            "4": "SELECT      CASE          WHEN AVG(A12) > AVG(A13) THEN '1995'         ELSE '1996'     END AS Higher_Unemployment_Year FROM district",
            "5": "SELECT CASE WHEN AVG(A12) > AVG(A13) THEN '1995' ELSE '1996' END FROM district",
            "2": "SELECT CASE WHEN AVG(A12) > AVG(A13) THEN '1995' ELSE '1996' END FROM district",
            "3": "SELECT CASE WHEN AVG(A12) > AVG(A13) THEN 1995 ELSE 1996 END FROM district",
            "6": "SELECT CASE WHEN AVG(A12) > AVG(A13) THEN '1995' ELSE '1996' END FROM district",
            "1": "SELECT WITH avg_unemployment AS (     SELECT         AVG(A12) AS avg_1995,         AVG(A13) AS avg_1996     FROM         district ) SELECT     CASE         WHEN avg_1995 > avg_1996 THEN '1995'         ELSE '1996'     END AS higher_unemployment_year FROM     avg_unemployment;"
        }
    },
    {
        "question_id": 92,
        "database": "financial",
        "evidence": "A11 refers to average salary; Female mapps to gender = 'F'",
        "question": "List out the no. of districts that have female average salary is more than 6000 but less than 10000?",
        "schema_used": {
            "client": [
                "district_id",
                "gender"
            ],
            "district": [
                "district_id",
                "a11"
            ]
        },
        "gold": "SELECT COUNT(DISTINCT T2.district_id)  FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'F' AND T2.A11 BETWEEN 6000 AND 10000",
        "candidates": {
            "4": "SELECT COUNT(DISTINCT T1.district_id)  FROM client AS T1  INNER JOIN district AS T2  ON T1.district_id = T2.district_id  WHERE T1.gender = 'F' AND T2.A11 > 6000 AND T2.A11 < 10000;",
            "1": "SELECT COUNT(DISTINCT T1.district_id)  FROM client AS T1  INNER JOIN district AS T2  ON T1.district_id = T2.district_id  WHERE T1.gender = 'F'  AND T2.A11 > 6000  AND T2.A11 < 10000;",
            "5": "SELECT COUNT(*) FROM district WHERE A11 BETWEEN 6000 AND 10000",
            "3": "SELECT count(T1.district_id) FROM district AS T1 JOIN client AS T2 ON T1.district_id  =  T2.district_id WHERE T2.gender  =  'F' AND T1.A11 BETWEEN 6000 AND 10000",
            "2": "SELECT COUNT(DISTINCT T1.district_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id  =  T2.district_id WHERE T1.gender  =  'F' AND T2.A11  >  6000 AND T2.A11  <  10000",
            "6": "SELECT count(DISTINCT T1.district_id) FROM district AS T1 JOIN client AS T2 ON T1.district_id  =  T2.district_id WHERE T2.gender  =  'F' AND T1.A11  >  6000 AND T1.A11  <  10000"
        }
    },
    {
        "question_id": 93,
        "database": "financial",
        "evidence": "Male means that gender = 'M'; A3 refers to region; A11 pertains to average salary.",
        "question": "How many male customers who are living in North Bohemia have average salary greater than 8000?",
        "schema_used": {
            "client": [
                "client_id",
                "district_id",
                "gender"
            ],
            "district": [
                "district_id",
                "a11",
                "a3"
            ]
        },
        "gold": "SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'M' AND T2.A3 = 'north Bohemia' AND T2.A11 > 8000",
        "candidates": {
            "5": "SELECT COUNT(*) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'M' AND T2.A3 = 'North Bohemia' AND T2.A11 > 8000",
            "2": "SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'M' AND T2.A3 = 'North Bohemia' AND T2.A11 > 8000",
            "4": "SELECT COUNT(*)  FROM client AS T1  INNER JOIN district AS T2 ON T1.district_id = T2.district_id  WHERE T1.gender = 'M' AND T2.A3 = 'North Bohemia' AND T2.A11 > 8000;",
            "1": "SELECT COUNT(T1.client_id)  FROM client AS T1  INNER JOIN district AS T2 ON T1.district_id = T2.district_id  WHERE T1.gender = 'M' AND T2.A3 = 'North Bohemia' AND T2.A11 > 8000;",
            "6": "SELECT count(*) FROM client AS t1 JOIN district AS t2 ON t1.district_id  =  t2.district_id WHERE t1.gender  =  'M' AND t2.A3  =  'north Bohemia' AND t2.A11  >  8000",
            "3": "SELECT   COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T2   ON T1.district_id = T2.district_id WHERE   T2.A3 = 'north Bohemia' AND T2.A11 > 8000 AND T1.gender = 'M';"
        }
    },
    {
        "question_id": 94,
        "database": "financial",
        "evidence": "Female means gender = 'F'; A11 refers to average salary; Gap = highest average salary - lowest average salary; If the person A's birthdate > B's birthdate, it means that person B is order than person A.",
        "question": "List out the account numbers of female clients who are oldest and has lowest average salary, calculate the gap between this lowest average salary with the highest average salary?",
        "schema_used": {
            "district": [
                "a11",
                "district_id"
            ],
            "client": [
                "district_id",
                "gender",
                "birth_date",
                "client_id"
            ],
            "account": [
                "account_id",
                "district_id"
            ],
            "disp": [
                "account_id",
                "client_id"
            ]
        },
        "gold": "SELECT T1.account_id , ( SELECT MAX(A11) - MIN(A11) FROM district ) FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN disp AS T3 ON T1.account_id = T3.account_id INNER JOIN client AS T4 ON T3.client_id = T4.client_id WHERE T2.district_id = ( SELECT district_id FROM client WHERE gender = 'F' ORDER BY birth_date ASC LIMIT 1 ) ORDER BY T2.A11 DESC LIMIT 1",
        "candidates": {
            "5": "SELECT T1.account_id, MAX(T3.A11) - MIN(T3.A11) FROM account AS T1 INNER JOIN client AS T2 ON T1.district_id = T2.district_id INNER JOIN district AS T3 ON T2.district_id = T3.district_id WHERE T2.gender = 'F' GROUP BY T1.account_id ORDER BY T2.birth_date LIMIT 1",
            "2": "SELECT T1.account_id, (   SELECT     MAX(T3.A11) - MIN(T3.A11)   FROM district AS T3 ) FROM account AS T1 INNER JOIN client AS T2   ON T1.district_id = T2.district_id INNER JOIN district AS T3   ON T1.district_id = T3.district_id WHERE   T2.gender = 'F' ORDER BY   T2.birth_date DESC,   T3.A11 LIMIT 1;",
            "4": "SELECT WITH FemaleClients AS (     SELECT          c.client_id,         c.birth_date,         d.A11,         a.account_id     FROM          client AS c     INNER JOIN          district AS d ON c.district_id = d.district_id     INNER JOIN          account AS a ON c.district_id = a.district_id     WHERE          c.gender = 'F' ), OldestClient AS (     SELECT          fc.account_id,         fc.A11     FROM          FemaleClients AS fc     ORDER BY          fc.birth_date ASC     LIMIT 1 ) SELECT      oc.account_id,     (SELECT MAX(A11) FROM district) - oc.A11 AS salary_gap FROM      OldestClient AS oc;",
            "3": "SELECT   T1.account_id FROM account AS T1 INNER JOIN disp AS T2   ON T1.account_id = T2.account_id INNER JOIN client AS T3   ON T2.client_id = T3.client_id INNER JOIN district AS T4   ON T3.district_id = T4.district_id WHERE   T3.gender = 'F' ORDER BY   T3.birth_date,   T4.A11 LIMIT 1;",
            "6": "SELECT T1.account_id ,  (SELECT MAX(A11) FROM district) - T3.A11 FROM account AS T1 JOIN client AS T2 ON T1.district_id  =  T2.district_id JOIN district AS T3 ON T3.district_id  =  T1.district_id WHERE T2.gender  =  'F' ORDER BY T2.birth_date ,  T3.A11 LIMIT 1",
            "1": "SELECT WITH FemaleClients AS (     SELECT          c.client_id,          c.gender,          c.birth_date,          d.A11,          a.account_id     FROM          client c      JOIN          account a ON c.district_id = a.district_id      JOIN          district d ON c.district_id = d.district_id      WHERE          c.gender = 'F' ), OldestFemaleClient AS (     SELECT          fc.client_id,          fc.gender,          fc.birth_date,          fc.A11,          fc.account_id     FROM          FemaleClients fc     ORDER BY          fc.birth_date ASC      LIMIT 1 ), LowestAvgSalary AS (     SELECT          MIN(A11) AS min_salary     FROM          district ), HighestAvgSalary AS (     SELECT          MAX(A11) AS max_salary     FROM          district ) SELECT      o.account_id,      (h.max_salary - l.min_salary) AS salary_gap FROM      OldestFemaleClient o,      LowestAvgSalary l,      HighestAvgSalary h;"
        }
    },
    {
        "question_id": 95,
        "database": "financial",
        "evidence": "If the person A's birthdate < B's birthdate, it means that person B is younger than person A; A11 refers to average salary",
        "question": "List out the account numbers of clients who are youngest and have highest average salary?",
        "schema_used": {
            "client": [
                "client_id",
                "birth_date"
            ],
            "account": [
                "account_id",
                "district_id"
            ],
            "district": [
                "a11",
                "district_id"
            ],
            "disp": [
                "account_id",
                "client_id"
            ]
        },
        "gold": "SELECT T1.account_id  FROM account AS T1 INNER JOIN disp AS T2 ON T1.account_id = T2.account_id INNER JOIN client AS T3 ON T2.client_id = T3.client_id INNER JOIN district AS T4 on T4.district_id = T1.district_id WHERE T2.client_id = ( SELECT client_id FROM client ORDER BY birth_date DESC LIMIT 1) GROUP BY T4.A11, T1.account_id",
        "candidates": {
            "4": "SELECT t.account FROM trans t JOIN account a ON t.account_id = a.account_id JOIN client c ON a.district_id = c.district_id JOIN district d ON a.district_id = d.district_id WHERE c.birth_date = (SELECT MAX(birth_date) FROM client) AND d.A11 = (SELECT MAX(A11) FROM district)",
            "5": "SELECT T1.account FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN client AS T3 ON T2.district_id = T3.district_id WHERE T3.birth_date = ( SELECT MAX(birth_date) FROM client ) AND T2.A11 = ( SELECT MAX(A11) FROM district )",
            "2": "SELECT T1.account FROM trans AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN district AS T3 ON T2.district_id = T3.district_id INNER JOIN client AS T4 ON T2.account_id = T4.client_id WHERE T4.birth_date = ( SELECT MAX(birth_date) FROM client ) AND T3.A11 = ( SELECT MAX(A11) FROM district )",
            "6": "SELECT T1.account FROM trans AS T1 JOIN account AS T2 ON T1.account_id  =  T2.account_id JOIN district AS T3 ON T2.district_id  =  T3.district_id JOIN client AS T4 ON T3.district_id  =  T4.district_id ORDER BY T4.birth_date DESC, T3.A11 DESC",
            "3": "SELECT   T1.account FROM trans AS T1 INNER JOIN account AS T2   ON T1.account_id = T2.account_id INNER JOIN district AS T3   ON T2.district_id = T3.district_id INNER JOIN disp AS T4   ON T2.account_id = T4.account_id INNER JOIN client AS T5   ON T4.client_id = T5.client_id WHERE   T3.A11 = (     SELECT       MAX(A11)     FROM district   ) ORDER BY   T5.birth_date DESC;",
            "1": "SELECT WITH YoungestClient AS (     SELECT client_id, birth_date     FROM client     ORDER BY birth_date DESC     LIMIT 1 ), HighestSalaryDistrict AS (     SELECT district_id     FROM district     ORDER BY A11 DESC     LIMIT 1 ) SELECT t.account FROM trans t JOIN account a ON t.account_id = a.account_id JOIN HighestSalaryDistrict hsd ON a.district_id = hsd.district_id JOIN YoungestClient yc ON c.client_id = yc.client_id;"
        }
    },
    {
        "question_id": 96,
        "database": "financial",
        "evidence": "'POPLATEK TYDNE' stands for weekly issuance",
        "question": "How many customers who choose statement of weekly issuance are Owner?",
        "schema_used": {
            "account": [
                "account_id",
                "frequency"
            ],
            "disp": [
                "account_id",
                "type"
            ]
        },
        "gold": "SELECT COUNT(T1.account_id) FROM account AS T1 INNER JOIN disp AS T2 ON T1.account_id = T2.account_id WHERE T2.type = 'OWNER' AND T1.frequency = 'POPLATEK TYDNE'",
        "candidates": {
            "4": "SELECT COUNT(*) FROM disp AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE T2.frequency = 'POPLATEK TYDNE' AND T1.type = 'OWNER';",
            "1": "SELECT COUNT(*) FROM account AS T1 INNER JOIN disp AS T2 ON T1.account_id = T2.account_id WHERE T2.type = 'OWNER' AND T1.frequency = 'POPLATEK TYDNE';",
            "5": "SELECT COUNT(*) FROM account AS T1 INNER JOIN disp AS T2 ON T1.account_id = T2.account_id WHERE T1.frequency = 'POPLATEK TYDNE' AND T2.type = 'OWNER'",
            "2": "SELECT COUNT(T1.client_id) FROM disp AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE T2.frequency = 'POPLATEK TYDNE' AND T1.type = 'OWNER'",
            "6": "SELECT count(*) FROM disp AS T1 JOIN account AS T2 ON T1.account_id  =  T2.account_id WHERE T2.frequency  =  'POPLATEK TYDNE' AND T1.type  =  'OWNER'",
            "3": "SELECT   COUNT(T1.account_id) FROM account AS T1 INNER JOIN disp AS T2   ON T1.account_id = T2.account_id WHERE   T2.type = 'OWNER' AND T1.frequency = 'POPLATEK TYDNE';"
        }
    },
    {
        "question_id": 97,
        "database": "financial",
        "evidence": "'POPLATEK PO OBRATU' stands for issuance after transaction",
        "question": "List out the id number of client who choose statement of issuance after transaction are Disponent?",
        "schema_used": {
            "disp": [
                "client_id",
                "account_id",
                "type"
            ],
            "account": [
                "account_id",
                "frequency"
            ]
        },
        "gold": "SELECT T2.client_id FROM account AS T1 INNER JOIN disp AS T2 ON T1.account_id = T2.account_id WHERE T1.frequency = 'POPLATEK PO OBRATU' AND T2.type = 'DISPONENT'",
        "candidates": {
            "4": "SELECT DISTINCT d.client_id  FROM disp AS d  JOIN account AS a ON d.account_id = a.account_id  WHERE a.frequency = 'POPLATEK PO OBRATU' AND d.type = 'DISPONENT';",
            "1": "SELECT T1.client_id  FROM disp AS T1  INNER JOIN account AS T2 ON T1.account_id = T2.account_id  WHERE T2.frequency = 'POPLATEK PO OBRATU' AND T1.type = 'DISPONENT';",
            "2": "SELECT T1.client_id FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN account AS T3 ON T2.account_id = T3.account_id WHERE T2.type = 'DISPONENT' AND T3.frequency = 'POPLATEK PO OBRATU'",
            "5": "SELECT T1.client_id FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN account AS T3 ON T2.account_id = T3.account_id WHERE T3.frequency = 'POPLATEK PO OBRATU' AND T2.type = 'DISPONENT'",
            "3": "SELECT T1.client_id FROM disp AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE T2.frequency = 'POPLATEK PO OBRATU' AND T1.type = 'DISPONENT'",
            "6": "SELECT T1.client_id FROM disp AS T1 JOIN account AS T2 ON T1.account_id  =  T2.account_id WHERE T2.frequency  =  'POPLATEK PO OBRATU' AND T1.type  =  'DISPONENT'"
        }
    },
    {
        "question_id": 98,
        "database": "financial",
        "evidence": "'POPLATEK TYDNE' stands for weekly issuance",
        "question": "Among the accounts who have approved loan date in 1997, list out the accounts that have the lowest approved amount and choose weekly issuance statement.",
        "schema_used": {
            "account": [
                "account_id",
                "frequency"
            ],
            "loan": [
                "account_id",
                "amount",
                "date"
            ]
        },
        "gold": "SELECT T2.account_id FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE STRFTIME('%Y', T1.date) = '1997' AND T2.frequency = 'POPLATEK TYDNE' ORDER BY T1.amount LIMIT 1",
        "candidates": {
            "4": "SELECT T1.account_id  FROM account AS T1  INNER JOIN loan AS T2 ON T1.account_id = T2.account_id  WHERE T2.date LIKE '1997%' AND T1.frequency = 'POPLATEK TYDNE'  ORDER BY T2.amount ASC  LIMIT 1;",
            "1": "SELECT T1.account_id FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE STRFTIME('%Y', T1.date) = '1997'    AND T2.frequency = 'POPLATEK TYDNE' ORDER BY T1.amount ASC LIMIT 1;",
            "5": "SELECT T1.account_id FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE STRFTIME('%Y', T1.date) = '1997' AND T2.frequency = 'POPLATEK TYDNE' ORDER BY T1.amount LIMIT 1",
            "2": "SELECT T1.account_id FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE STRFTIME('%Y', T1.date) = '1997' AND T2.frequency = 'POPLATEK TYDNE' ORDER BY T1.amount LIMIT 1",
            "6": "SELECT T1.account_id FROM account AS T1 JOIN loan AS T2 ON T1.account_id  =  T2.account_id WHERE T1.frequency  =  'POPLATEK TYDNE' AND T2.date LIKE '1997%' ORDER BY T2.amount ASC LIMIT 1",
            "3": "SELECT   T1.account_id FROM loan AS T1 INNER JOIN account AS T2   ON T1.account_id = T2.account_id WHERE   STRFTIME('%Y', T1.date) = '1997' AND T2.frequency = 'POPLATEK TYDNE' ORDER BY   T1.amount LIMIT 1;"
        }
    },
    {
        "question_id": 99,
        "database": "financial",
        "evidence": "Loan validity more than 12 months refers to duration > 12",
        "question": "Among the accounts who have loan validity more than 12 months, list out the accounts that have the highest approved amount and have account opening date in 1993.",
        "schema_used": {
            "loan": [
                "account_id",
                "amount",
                "duration"
            ],
            "account": [
                "account_id",
                "date"
            ]
        },
        "gold": "SELECT T1.account_id FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE STRFTIME('%Y', T2.date) = '1993' AND T1.duration > 12 ORDER BY T1.amount DESC LIMIT 1",
        "candidates": {
            "4": "SELECT T1.account_id  FROM loan AS T1  INNER JOIN account AS T2 ON T1.account_id = T2.account_id  WHERE T1.duration > 12 AND strftime('%Y', T2.open_date) = '1993'  ORDER BY T1.amount DESC  LIMIT 1;",
            "1": "SELECT T1.account_id FROM loan AS T1 JOIN account AS T2 ON T1.account_id = T2.account_id WHERE T1.duration > 12 AND strftime('%Y', T2.date) = '1993' ORDER BY T1.amount DESC LIMIT 1;",
            "2": "SELECT T1.account_id FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE T1.duration > 12 AND STRFTIME('%Y', T2.date) = '1993' ORDER BY T1.amount DESC LIMIT 1",
            "5": "SELECT T1.account_id FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE T1.duration > 12 AND STRFTIME('%Y', T2.date) = '1993' ORDER BY T1.amount DESC LIMIT 1",
            "3": "SELECT   T1.account_id FROM account AS T1 INNER JOIN loan AS T2   ON T1.account_id = T2.account_id WHERE   T2.duration > 12 AND STRFTIME('%Y', T1.date) = '1993' ORDER BY   T2.amount DESC LIMIT 1;",
            "6": "SELECT T1.account_id FROM account AS T1 JOIN loan AS T2 ON T1.account_id  =  T2.account_id WHERE T2.duration  >  12 AND STRFTIME('%Y', T1.date)  =  '1993' ORDER BY T2.amount DESC LIMIT 1"
        }
    },
    {
        "question_id": 100,
        "database": "financial",
        "evidence": "Customers refer to clients; Female refers to gender = 'F'; Names of districts appear in column A2",
        "question": "Among the account opened, how many female customers who were born before 1950 and stayed in Sokolov?",
        "schema_used": {
            "client": [
                "client_id",
                "district_id",
                "gender",
                "birth_date"
            ],
            "district": [
                "district_id",
                "a2"
            ]
        },
        "gold": "SELECT COUNT(T2.client_id) FROM district AS T1 INNER JOIN client AS T2 ON T1.district_id = T2.district_id WHERE T2.gender = 'F' AND STRFTIME('%Y', T2.birth_date) < '1950' AND T1.A2 = 'Sokolov'",
        "candidates": {
            "4": "SELECT COUNT(client.gender)  FROM client  INNER JOIN district ON client.district_id = district.district_id  WHERE client.gender = 'F' AND client.birth_date < '1950-01-01' AND district.A2 = 'Sokolov';",
            "1": "SELECT COUNT(*)  FROM client AS T1  INNER JOIN district AS T2 ON T1.district_id = T2.district_id  WHERE T1.gender = 'F' AND strftime('%Y', T1.birth_date) < '1950' AND T2.A2 = 'Sokolov';",
            "5": "SELECT COUNT(*) FROM client INNER JOIN district ON client.district_id = district.district_id WHERE district.A2 = 'Sokolov' AND client.gender = 'F' AND SUBSTR(client.birth_date,1,4) < '1950'",
            "2": "SELECT COUNT(T1.gender) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'F' AND T1.birth_date < '1950-01-01' AND T2.A2 = 'Sokolov'",
            "6": "SELECT count(*) FROM client AS t1 JOIN district AS t2 ON t1.district_id  =  t2.district_id WHERE t1.gender  =  'F' AND t2.A2  =  'Sokolov' AND t1.birth_date  <  '19500101'",
            "3": "SELECT   COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T2   ON T1.district_id = T2.district_id WHERE   T1.gender = 'F' AND T2.A2 = 'Sokolov' AND T1.birth_date < '1950-01-01';"
        }
    },
    {
        "question_id": 101,
        "database": "financial",
        "evidence": "",
        "question": "List out the accounts who have the earliest trading date in 1995 ?",
        "schema_used": {
            "trans": [
                "account_id",
                "date"
            ]
        },
        "gold": "SELECT account_id FROM trans WHERE STRFTIME('%Y', date) = '1995' ORDER BY date ASC LIMIT 1",
        "candidates": {
            "4": "SELECT account_id  FROM account  WHERE date = (SELECT MIN(date) FROM account WHERE strftime('%Y', date) = '1995')",
            "1": "SELECT account_id  FROM account  WHERE date = (SELECT MIN(date) FROM account WHERE strftime('%Y', date) = '1995');",
            "2": "SELECT account_id, date FROM account WHERE strftime('%Y', date) = '1995' ORDER BY date LIMIT 1",
            "5": "SELECT account_id FROM account WHERE strftime('%Y', date) = '1995' ORDER BY date LIMIT 1",
            "3": "SELECT   account_id FROM account WHERE   STRFTIME('%Y', date) = '1995' ORDER BY   date LIMIT 1;",
            "6": "SELECT account_id FROM account WHERE date LIKE '1995%' ORDER BY date LIMIT 1"
        }
    },
    {
        "question_id": 102,
        "database": "financial",
        "evidence": "",
        "question": "State different accounts who have account opening date before 1997 and own an amount of money greater than 3000USD",
        "schema_used": {
            "account": [
                "account_id",
                "date"
            ],
            "trans": [
                "account_id",
                "amount"
            ]
        },
        "gold": "SELECT DISTINCT T2.account_id FROM trans AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE STRFTIME('%Y', T2.date) < '1997' AND T1.amount > 3000",
        "candidates": {
            "4": "SELECT DISTINCT t.account_id FROM trans AS t INNER JOIN account AS a ON t.account_id = a.account_id WHERE a.date < '1997-01-01' AND t.amount > 3000;",
            "1": "SELECT DISTINCT T1.account_id FROM account AS T1 INNER JOIN trans AS T2 ON T1.account_id = T2.account_id WHERE T1.date < '1997-01-01' AND T2.amount > 3000;",
            "5": "SELECT T1.account_id FROM account AS T1 INNER JOIN trans AS T2 ON T1.account_id = T2.account_id WHERE STRFTIME('%Y', T1.date) < '1997' AND T2.amount > 3000",
            "2": "SELECT T1.account_id FROM account AS T1 INNER JOIN trans AS T2 ON T1.account_id = T2.account_id WHERE STRFTIME('%Y', T1.date) < '1997' AND T2.amount > 3000 GROUP BY T1.account_id",
            "6": "SELECT T1.account_id FROM account AS T1 JOIN trans AS T2 ON T1.account_id = T2.account_id WHERE T1.date < '19970101' AND T2.amount > 3000 GROUP BY T1.account_id",
            "3": "SELECT DISTINCT T1.account_id FROM account AS T1 INNER JOIN trans AS T2   ON T1.account_id = T2.account_id WHERE   STRFTIME('%Y', T1.date) < '1997' AND T2.amount > 3000;"
        }
    },
    {
        "question_id": 103,
        "database": "financial",
        "evidence": "",
        "question": "Which client issued his/her card in 1994/3/3, give his/her client id.",
        "schema_used": {
            "disp": [
                "client_id",
                "disp_id"
            ],
            "client": [
                "client_id"
            ],
            "card": [
                "disp_id",
                "issued"
            ]
        },
        "gold": "SELECT T2.client_id FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN card AS T3 ON T2.disp_id = T3.disp_id WHERE T3.issued = '1994-03-03'",
        "candidates": {
            "4": "SELECT T1.client_id  FROM card AS T1  INNER JOIN disp AS T2 ON T1.disp_id = T2.disp_id  WHERE DATE(T1.issued) = '1994-03-03';",
            "1": "SELECT T1.client_id  FROM card AS T1  INNER JOIN disp AS T2 ON T1.disp_id = T2.disp_id  WHERE DATE(T1.issued) = '1994-03-03';",
            "5": "SELECT T1.client_id FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN card AS T3 ON T2.disp_id = T3.disp_id WHERE T3.issued = '1994-03-03'",
            "2": "SELECT T1.client_id FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN card AS T3 ON T2.disp_id = T3.disp_id WHERE T3.issued = '1994-03-03'",
            "6": "SELECT T2.client_id FROM card AS T1 INNER JOIN disp AS T2 ON T1.disp_id = T2.disp_id WHERE T1.issued = '1994-03-03'",
            "3": "SELECT   T1.client_id FROM disp AS T1 INNER JOIN card AS T2   ON T1.disp_id = T2.disp_id WHERE   T2.issued = '1994-03-03';"
        }
    },
    {
        "question_id": 104,
        "database": "financial",
        "evidence": "",
        "question": "The transaction of 840 USD happened in 1998/10/14, when was this account opened?",
        "schema_used": {
            "account": [
                "date",
                "account_id"
            ],
            "trans": [
                "account_id",
                "amount",
                "date"
            ]
        },
        "gold": "SELECT T1.date FROM account AS T1 INNER JOIN trans AS T2 ON T1.account_id = T2.account_id WHERE T2.amount = 840 AND T2.date = '1998-10-14'",
        "candidates": {
            "4": "SELECT T2.date FROM trans AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE T1.amount = 840 AND T1.date = '1998-10-14'",
            "5": "SELECT T1.date FROM account AS T1 INNER JOIN trans AS T2 ON T1.account_id = T2.account_id WHERE T2.amount = 840 AND T2.date = '1998-10-14'",
            "2": "SELECT T1.date FROM account AS T1 INNER JOIN trans AS T2 ON T1.account_id = T2.account_id WHERE T2.amount = 840 AND T2.date = '1998-10-14'",
            "6": "SELECT T1.date FROM account AS T1 JOIN trans AS T2 ON T1.account_id  =  T2.account_id WHERE T2.date  =  '1998-10-14' AND T2.amount  =  840",
            "3": "SELECT T2.date FROM trans AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE T1.amount = 840 AND T1.date = '1998-10-14'",
            "1": "SELECT T1.date  FROM account AS T1  INNER JOIN trans AS T2  ON T1.account_id = T2.account_id  WHERE T2.amount = 840 AND T2.date = '1998-10-14'"
        }
    },
    {
        "question_id": 105,
        "database": "financial",
        "evidence": "",
        "question": "There was a loan approved in 1994/8/25, where was that account opened, give the district Id of the branch.",
        "schema_used": {
            "account": [
                "district_id",
                "account_id"
            ],
            "loan": [
                "account_id",
                "date"
            ]
        },
        "gold": "SELECT T1.district_id FROM account AS T1 INNER JOIN loan AS T2 ON T1.account_id = T2.account_id WHERE T2.date = '1994-08-25'",
        "candidates": {
            "5": "SELECT T1.district_id FROM account AS T1 INNER JOIN loan AS T2 ON T1.account_id = T2.account_id WHERE T2.date = '1994-08-25'",
            "4": "SELECT T1.district_id  FROM loan AS T2  INNER JOIN account AS T1  ON T2.account_id = T1.account_id  WHERE T2.date = '1994-08-25'",
            "1": "SELECT T1.district_id  FROM loan AS T2  INNER JOIN account AS T1 ON T2.account_id = T1.account_id  WHERE T2.date = '1994-08-25';",
            "2": "SELECT T1.district_id FROM account AS T1 INNER JOIN loan AS T2 ON T1.account_id = T2.account_id WHERE T2.date = '1994-08-25'",
            "6": "SELECT T2.district_id FROM loan AS T1 JOIN account AS T2 ON T1.account_id  =  T2.account_id WHERE T1.date  =  '1994-08-25'",
            "3": "SELECT T2.district_id FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE T1.date = '1994-08-25'"
        }
    },
    {
        "question_id": 106,
        "database": "financial",
        "evidence": "",
        "question": "What is the biggest amount of transaction that the client whose card was opened in 1996/10/21 made?",
        "schema_used": {
            "trans": [
                "amount",
                "account_id"
            ],
            "card": [
                "disp_id",
                "issued"
            ],
            "disp": [
                "disp_id",
                "account_id"
            ],
            "account": [
                "account_id"
            ]
        },
        "gold": "SELECT T4.amount FROM card AS T1 JOIN disp AS T2 ON T1.disp_id = T2.disp_id JOIN account AS T3 on T2.account_id = T3.account_id JOIN trans AS T4 on T3.account_id = T4.account_id WHERE T1.issued = '1996-10-21' ORDER BY T4.amount DESC LIMIT 1",
        "candidates": {
            "4": "SELECT MAX(t.amount)  FROM trans AS t  INNER JOIN disp AS d ON t.account_id = d.account_id  INNER JOIN card AS c ON d.disp_id = c.disp_id  WHERE STRFTIME('%Y-%m-%d', c.issued) = '1996-10-21';",
            "2": "SELECT MAX(T1.amount) FROM trans AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN disp AS T3 ON T2.account_id = T3.account_id INNER JOIN card AS T4 ON T3.disp_id = T4.disp_id WHERE T4.issued = '1996-10-21'",
            "1": "SELECT MAX(T1.amount)  FROM trans AS T1  INNER JOIN disp AS T2 ON T1.account_id = T2.account_id  INNER JOIN card AS T3 ON T2.disp_id = T3.disp_id  WHERE STRFTIME('%Y-%m-%d', T3.issued) = '1996-10-21';",
            "5": "SELECT MAX(T1.amount) FROM trans AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN disp AS T3 ON T2.account_id = T3.account_id INNER JOIN card AS T4 ON T3.disp_id = T4.disp_id WHERE T4.issued = '1996-10-21'",
            "6": "SELECT T1.amount FROM trans AS T1 INNER JOIN disp AS T2 ON T1.account_id = T2.account_id INNER JOIN card AS T3 ON T2.disp_id = T3.disp_id WHERE T3.issued = '1996-10-21' ORDER BY T1.amount DESC LIMIT 1",
            "3": "SELECT   T1.amount FROM trans AS T1 INNER JOIN disp AS T2   ON T1.account_id = T2.account_id INNER JOIN card AS T3   ON T2.disp_id = T3.disp_id WHERE   T3.issued = '1998-10-16' ORDER BY   T1.amount DESC LIMIT 1;"
        }
    },
    {
        "question_id": 107,
        "database": "financial",
        "evidence": "Earlier birthdate refers to older age; A11 refers to average salary",
        "question": "What is the gender of the oldest client who opened his/her account in the highest average salary branch?",
        "schema_used": {
            "client": [
                "gender",
                "district_id",
                "birth_date"
            ],
            "district": [
                "district_id",
                "a11"
            ]
        },
        "gold": "SELECT T2.gender FROM district AS T1 INNER JOIN client AS T2 ON T1.district_id = T2.district_id ORDER BY T1.A11 DESC, T2.birth_date ASC LIMIT 1",
        "candidates": {
            "4": "SELECT T2.gender  FROM disp AS T1  INNER JOIN client AS T2 ON T1.client_id = T2.client_id  INNER JOIN account AS T3 ON T1.account_id = T3.account_id  INNER JOIN district AS T4 ON T3.district_id = T4.district_id  WHERE T4.A11 = (SELECT MAX(A11) FROM district) ORDER BY T2.birth_date ASC  LIMIT 1;",
            "5": "SELECT T1.gender FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN account AS T3 ON T2.account_id = T3.account_id INNER JOIN district AS T4 ON T3.district_id = T4.district_id ORDER BY T1.birth_date ASC, T4.A11 DESC LIMIT 1",
            "2": "SELECT T1.gender FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN account AS T3 ON T2.account_id = T3.account_id INNER JOIN district AS T4 ON T3.district_id = T4.district_id ORDER BY T1.birth_date ASC, T4.A11 DESC LIMIT 1",
            "1": "SELECT T2.gender  FROM account AS T1  INNER JOIN disp AS T3 ON T1.account_id = T3.account_id  INNER JOIN client AS T2 ON T3.client_id = T2.client_id  WHERE T1.district_id = (     SELECT district_id      FROM district      ORDER BY A11 DESC      LIMIT 1 ) ORDER BY T2.birth_date ASC  LIMIT 1;",
            "6": "SELECT T3.gender FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id INNER JOIN disp AS T4 ON T2.account_id = T4.account_id INNER JOIN client AS T3 ON T4.client_id = T3.client_id ORDER BY T1.A11 DESC ,  T3.birth_date LIMIT 1",
            "3": "SELECT   T1.gender FROM client AS T1 INNER JOIN disp AS T2   ON T1.client_id = T2.client_id INNER JOIN account AS T3   ON T2.account_id = T3.account_id INNER JOIN district AS T4   ON T3.district_id = T4.district_id ORDER BY   T1.birth_date,   T4.A11 DESC LIMIT 1;"
        }
    },
    {
        "question_id": 108,
        "database": "financial",
        "evidence": "",
        "question": "For the client who applied the biggest loan, what was his/her first amount of transaction after opened the account?",
        "schema_used": {
            "trans": [
                "amount",
                "account_id",
                "date"
            ],
            "loan": [
                "account_id",
                "amount"
            ],
            "account": [
                "account_id"
            ]
        },
        "gold": "SELECT T3.amount FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN trans AS T3 ON T2.account_id = T3.account_id ORDER BY T1.amount DESC, T3.date ASC LIMIT 1",
        "candidates": {
            "4": "SELECT T1.amount AS first_transaction_amount FROM account AS A INNER JOIN trans AS T1 ON A.account_id = T1.account_id WHERE A.account_id = (     SELECT L.account_id      FROM loan AS L      ORDER BY L.amount DESC      LIMIT 1 ) ORDER BY T1.trans_id  LIMIT 1;",
            "3": "SELECT T2.amount FROM loan AS T1 INNER JOIN trans AS T2 ON T1.account_id = T2.account_id ORDER BY T1.amount DESC, T2.date LIMIT 1",
            "5": "SELECT T1.amount FROM trans AS T1 INNER JOIN loan AS T2 ON T1.account_id = T2.account_id WHERE T2.account_id = ( SELECT account_id FROM loan ORDER BY amount DESC LIMIT 1 ) ORDER BY T1.account_id LIMIT 1",
            "2": "SELECT T1.amount FROM trans AS T1 INNER JOIN loan AS T2 ON T1.account_id = T2.account_id INNER JOIN account AS T3 ON T1.account_id = T3.account_id WHERE T2.amount = ( SELECT MAX(amount) FROM loan ) ORDER BY T3.date ASC LIMIT 1",
            "6": "SELECT T1.amount FROM trans AS T1 JOIN loan AS T2 ON T1.account_id = T2.account_id ORDER BY T2.amount DESC, T1.trans_id LIMIT 1",
            "1": "SELECT WITH BiggestLoan AS (     SELECT          l.account_id,          l.amount AS loan_amount     FROM          loan l     ORDER BY          l.amount DESC     LIMIT 1 ), FirstTransaction AS (     SELECT          t.account_id,          t.amount AS first_transaction_amount     FROM          trans t     INNER JOIN          account a      ON          t.account_id = a.account_id     WHERE          t.amount = (             SELECT                  MIN(amount)              FROM                  trans              WHERE                  account_id = t.account_id         ) ) SELECT      ft.first_transaction_amount FROM      FirstTransaction ft JOIN      BiggestLoan bl ON      ft.account_id = bl.account_id;"
        }
    },
    {
        "question_id": 109,
        "database": "financial",
        "evidence": "A2 has region names; Woman and female share the same meaning; female refers to gender = 'F'",
        "question": "How many clients opened their accounts in Jesenik branch were women?",
        "schema_used": {
            "client": [
                "client_id",
                "district_id",
                "gender"
            ],
            "district": [
                "district_id",
                "a2"
            ]
        },
        "gold": "SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'F' AND T2.A2 = 'Jesenik'",
        "candidates": {
            "4": "SELECT COUNT(client_id)  FROM client AS T1  INNER JOIN district AS T2 ON T1.district_id = T2.district_id  WHERE T1.gender = 'F' AND T2.A2 = 'Jesenik';",
            "5": "SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A2 = 'Jesenik' AND T1.gender = 'F'",
            "2": "SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A2 = 'Jesenik' AND T1.gender = 'F'",
            "1": "SELECT COUNT(client_id)  FROM client  INNER JOIN district ON client.district_id = district.district_id  WHERE district.A2 = 'Jesenik' AND client.gender = 'F';",
            "6": "SELECT COUNT(T1.client_id) FROM client AS T1 JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A2 = \"Jesenik\" AND T1.gender = 'F'",
            "3": "SELECT   COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T2   ON T1.district_id = T2.district_id WHERE   T2.A2 = 'Jesenik' AND T1.gender = 'F';"
        }
    },
    {
        "question_id": 110,
        "database": "financial",
        "evidence": "",
        "question": "What is the disposition id of the client who made 5100 USD transaction in 1998/9/2?",
        "schema_used": {
            "disp": [
                "disp_id",
                "account_id"
            ],
            "account": [
                "account_id"
            ],
            "trans": [
                "account_id",
                "date",
                "amount"
            ]
        },
        "gold": "SELECT T1.disp_id FROM disp AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN trans AS T3 ON T2.account_id = T3.account_id WHERE T3.date='1997-08-20' AND T3.amount = 5100",
        "candidates": {
            "4": "SELECT T1.disp_id  FROM trans AS T1  INNER JOIN card AS T2  ON T1.account_id = T2.disp_id  WHERE T1.amount = 5100 AND DATE(T1.date) = '1998-09-02';",
            "5": "SELECT T1.disp_id FROM card AS T1 INNER JOIN account AS T2 ON T1.disp_id = T2.account_id INNER JOIN trans AS T3 ON T2.account_id = T3.account_id WHERE T3.amount = 5100 AND T3.date = '1998-09-02'",
            "3": "SELECT T3.disp_id FROM trans AS T1 INNER JOIN disp AS T2 ON T1.account_id = T2.account_id INNER JOIN card AS T3 ON T2.disp_id = T3.disp_id WHERE T1.amount = 5100 AND T1.date = '1998-09-02'",
            "2": "SELECT T1.disp_id FROM card AS T1 INNER JOIN disp AS T2 ON T1.disp_id = T2.disp_id INNER JOIN account AS T3 ON T2.account_id = T3.account_id INNER JOIN trans AS T4 ON T3.account_id = T4.account_id WHERE T4.amount = 5100 AND T4.date = '1998-09-02'",
            "1": "SELECT T1.disp_id  FROM card AS T1  INNER JOIN disp AS T2 ON T1.disp_id = T2.disp_id  INNER JOIN account AS T3 ON T2.account_id = T3.account_id  INNER JOIN trans AS T4 ON T3.account_id = T4.account_id  WHERE T4.amount = 5100 AND DATE(T4.date) = '1998-09-02';",
            "6": "SELECT T3.disp_id FROM trans AS T1 JOIN account AS T2 ON T1.account_id  =  T2.account_id JOIN disp AS T3 ON T2.account_id  =  T3.account_id WHERE T1.amount  =  5100 AND T1.date  =  '1998-09-02'"
        }
    },
    {
        "question_id": 111,
        "database": "financial",
        "evidence": "A2 refers to district name; Litomerice is one of district names.",
        "question": "How many accounts were opened in Litomerice in 1996?",
        "schema_used": {
            "account": [
                "account_id",
                "district_id",
                "date"
            ],
            "district": [
                "district_id",
                "a2"
            ]
        },
        "gold": "SELECT COUNT(T2.account_id) FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id WHERE STRFTIME('%Y', T2.date) = '1996' AND T1.A2 = 'Litomerice'",
        "candidates": {
            "4": "SELECT COUNT(*)  FROM account AS T1  INNER JOIN district AS T2 ON T1.district_id = T2.district_id  WHERE T2.A2 = 'Litomerice' AND strftime('%Y', T1.date) = '1996'",
            "5": "SELECT COUNT(*) FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A2 = 'Litomerice' AND STRFTIME('%Y', T1.date) = '1996'",
            "1": "SELECT COUNT(*)  FROM account AS T1  INNER JOIN district AS T2 ON T1.district_id = T2.district_id  WHERE T2.A2 = 'Litomerice' AND strftime('%Y', T1.date) = '1996';",
            "2": "SELECT COUNT(*) FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A2 = 'Litomerice' AND STRFTIME('%Y', T1.date) = '1996'",
            "6": "SELECT count(*) FROM account AS T1 JOIN district AS T2 ON T1.district_id  =  T2.district_id WHERE T2.A2  =  'Litomerice' AND T1.date LIKE '1996%'",
            "3": "SELECT   COUNT(T1.account_id) FROM account AS T1 INNER JOIN district AS T2   ON T1.district_id = T2.district_id WHERE   T2.A2 = 'Litomerice' AND STRFTIME('%Y', T1.date) = '1996';"
        }
    },
    {
        "question_id": 112,
        "database": "financial",
        "evidence": "Female refers to gender = 'F'; A2 refers to district names",
        "question": "For the female client who was born in 1976/1/29, which district did she opened her account?",
        "schema_used": {
            "district": [
                "a2",
                "district_id"
            ],
            "client": [
                "district_id",
                "birth_date",
                "gender"
            ]
        },
        "gold": "SELECT T1.A2 FROM district AS T1 INNER JOIN client AS T2 ON T1.district_id = T2.district_id WHERE T2.birth_date = '1976-01-29' AND T2.gender = 'F'",
        "candidates": {
            "1": "SELECT d.A2  FROM client c  JOIN district d ON c.district_id = d.district_id  WHERE c.gender = 'F' AND c.birth_date = '1976-01-29';",
            "4": "SELECT T1.district_id  FROM client AS T1  INNER JOIN district AS T2 ON T1.district_id = T2.district_id  WHERE T1.gender = 'F' AND T1.birth_date = '1976-01-29';",
            "2": "SELECT T1.A2 FROM district AS T1 INNER JOIN client AS T2 ON T1.district_id = T2.district_id WHERE T2.gender = 'F' AND T2.birth_date = '1976-01-29'",
            "5": "SELECT T1.A2 FROM district AS T1 INNER JOIN client AS T2 ON T1.district_id = T2.district_id WHERE T2.birth_date = '1976-01-29' AND T2.gender = 'F'",
            "6": "SELECT T2.A2 FROM client AS T1 JOIN district AS T2 ON T1.district_id  =  T2.district_id WHERE T1.birth_date  =  '1976-01-29' AND T1.gender  =  'F'",
            "3": "SELECT   T2.A2 FROM client AS T1 INNER JOIN district AS T2   ON T1.district_id = T2.district_id WHERE   T1.birth_date = '1976-01-29' AND T1.gender = 'F';"
        }
    },
    {
        "question_id": 113,
        "database": "financial",
        "evidence": "",
        "question": "For the client who applied 98832 USD loan in 1996/1/3, when was his/her birthday?",
        "schema_used": {
            "client": [
                "birth_date",
                "client_id"
            ],
            "loan": [
                "account_id",
                "date",
                "amount"
            ],
            "account": [
                "account_id"
            ],
            "disp": [
                "account_id",
                "client_id"
            ]
        },
        "gold": "SELECT T4.birth_date FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN disp AS T3 ON T2.account_id = T3.account_id INNER JOIN client AS T4 ON T3.client_id = T4.client_id WHERE T1.date = '1996-01-03' AND T1.amount = 98832",
        "candidates": {
            "1": "SELECT T2.birth_date  FROM loan AS T1  INNER JOIN disp AS T3 ON T1.account_id = T3.account_id  INNER JOIN client AS T2 ON T3.client_id = T2.client_id  WHERE T1.amount = 98832 AND T1.date = '1996-01-03';",
            "4": "SELECT T2.birth_date  FROM loan AS T1  INNER JOIN disp AS T3 ON T1.account_id = T3.account_id  INNER JOIN client AS T2 ON T3.client_id = T2.client_id  WHERE T1.amount = 98832 AND STRFTIME('%Y', T1.date) = '1996' AND STRFTIME('%m-%d', T1.date) = '01-03'",
            "5": "SELECT T1.birth_date FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN loan AS T3 ON T2.account_id = T3.account_id WHERE T3.amount = 98832 AND T3.date = '1996-01-03'",
            "2": "SELECT T1.birth_date FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN loan AS T3 ON T2.account_id = T3.account_id WHERE T3.amount = 98832 AND T3.date = '1996-01-03'",
            "3": "SELECT T2.birth_date FROM loan AS T1 INNER JOIN disp AS T3 ON T1.account_id = T3.account_id INNER JOIN client AS T2 ON T3.client_id = T2.client_id WHERE T1.amount = 98832 AND T1.date = '1996-01-03'",
            "6": "SELECT T3.birth_date FROM loan AS T1 JOIN disp AS T2 ON T1.account_id  =  T2.account_id JOIN client AS T3 ON T2.client_id  =  T3.client_id WHERE T1.date  =  '1996-01-03' AND T1.amount  =  98832"
        }
    },
    {
        "question_id": 114,
        "database": "financial",
        "evidence": "A3 stands for region names",
        "question": "For the first client who opened his/her account in Prague, what is his/her account ID?",
        "schema_used": {
            "account": [
                "account_id",
                "district_id",
                "date"
            ],
            "district": [
                "district_id",
                "a3"
            ]
        },
        "gold": "SELECT T1.account_id FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A3 = 'Prague' ORDER BY T1.date ASC LIMIT 1",
        "candidates": {
            "1": "SELECT T1.account_id  FROM account AS T1  INNER JOIN district AS T2 ON T1.district_id = T2.district_id  INNER JOIN disp AS T3 ON T1.account_id = T3.account_id  WHERE T2.A3 = 'Prague'  ORDER BY T1.date ASC  LIMIT 1;",
            "5": "SELECT T1.account_id FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A3 = 'Prague' LIMIT 1",
            "2": "SELECT T1.account_id FROM account AS T1 INNER JOIN disp AS T2 ON T1.account_id = T2.account_id INNER JOIN client AS T3 ON T2.client_id = T3.client_id INNER JOIN district AS T4 ON T3.district_id = T4.district_id WHERE T4.A3 = 'Prague' LIMIT 1",
            "3": "SELECT T1.account_id FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A3 = 'Prague' ORDER BY T1.date LIMIT 1",
            "6": "SELECT T1.account_id FROM account AS T1 JOIN district AS T2 ON T1.district_id  =  T2.district_id WHERE T2.A3  =  \"Prague\" ORDER BY T1.account_id ASC LIMIT 1",
            "4": "SELECT T1.account_id  FROM account AS T1  INNER JOIN disp AS T2 ON T1.account_id = T2.account_id  INNER JOIN client AS T3 ON T2.client_id = T3.client_id  INNER JOIN district AS T4 ON T1.district_id = T4.district_id  WHERE T4.A3 = 'Prague'  ORDER BY T1.account_id  LIMIT 1;"
        }
    },
    {
        "question_id": 115,
        "database": "financial",
        "evidence": "Percentage of the male clients = DIVIDE(COUNT(male clients), COUNT(clients)) * 100; Male refers to gender = 'M', A3 is the region name. A4 contains the information about inhabitants.",
        "question": "For the branch which located in the south Bohemia with biggest number of inhabitants, what is the percentage of the male clients?",
        "schema_used": {
            "district": [
                "a4",
                "district_id",
                "a3"
            ],
            "client": [
                "district_id",
                "client_id",
                "gender"
            ]
        },
        "gold": "SELECT CAST(SUM(T1.gender = 'M') AS REAL) * 100 / COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A3 = 'south Bohemia' GROUP BY T2.A4 ORDER BY T2.A4 DESC LIMIT 1",
        "candidates": {
            "1": "SELECT CAST(COUNT(CASE WHEN T1.gender = 'M' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T1.gender)  FROM client AS T1  INNER JOIN district AS T2 ON T1.district_id = T2.district_id  WHERE T2.A3 = 'south Bohemia'  ORDER BY CAST(T2.A4 AS INTEGER) DESC  LIMIT 1;",
            "4": "SELECT      (CAST(SUM(CASE WHEN c.gender = 'M' THEN 1 ELSE 0 END) AS REAL) / COUNT(c.gender)) * 100 AS percentage_male_clients FROM      client AS c INNER JOIN      district AS d ON c.district_id = d.district_id WHERE      d.A3 = 'south Bohemia' ORDER BY      CAST(d.A4 AS INTEGER) DESC LIMIT 1;",
            "5": "SELECT CAST(SUM(CASE WHEN T1.gender = 'M' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A3 = 'south Bohemia' ORDER BY T2.A4 DESC LIMIT 1",
            "2": "SELECT CAST(SUM(CASE WHEN T1.gender = 'M' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A3 = 'south Bohemia' ORDER BY T2.A4 DESC LIMIT 1",
            "6": "SELECT CAST(SUM(CASE WHEN T1.gender  =  'M' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM client AS T1 JOIN district AS T2 ON T1.district_id  =  T2.district_id WHERE T2.A3  =  'south Bohemia'",
            "3": "SELECT CAST(SUM(CASE WHEN T1.gender  =  'M' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM client AS T1 JOIN district AS T2 ON T1.district_id  =  T2.district_id WHERE T2.A3  =  'south Bohemia' ORDER BY T2.A4 DESC LIMIT 1"
        }
    },
    {
        "question_id": 116,
        "database": "financial",
        "evidence": "Increase rate of his/her account balance = [(balance of date A - balance of date B) / balance of Date B] * 100%",
        "question": "For the client whose loan was approved first in 1993/7/5, what is the increase rate of his/her account balance from 1993/3/22 to 1998/12/27?",
        "schema_used": {
            "loan": [
                "account_id",
                "date"
            ],
            "account": [
                "account_id"
            ],
            "trans": [
                "account_id",
                "balance",
                "date"
            ]
        },
        "gold": "SELECT CAST((SUM(IIF(T3.date = '1998-12-27', T3.balance, 0)) - SUM(IIF(T3.date = '1993-03-22', T3.balance, 0))) AS REAL) * 100 / SUM(IIF(T3.date = '1993-03-22', T3.balance, 0)) FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN trans AS T3 ON T3.account_id = T2.account_id WHERE T1.date = '1993-07-05'",
        "candidates": {
            "1": "SELECT      ((T2.balance - T1.balance) / T1.balance) * 100 AS increase_rate FROM      trans AS T1 JOIN      trans AS T2 ON      T1.account_id = T2.account_id WHERE      T1.date = '1993-03-22'      AND T2.date = '1998-12-27'     AND T1.account_id IN (         SELECT account_id          FROM loan          WHERE date = '1993-07-05'     ) ORDER BY      increase_rate DESC LIMIT 1;",
            "5": "SELECT CAST(SUM(CASE WHEN T1.date = '1998-12-27' THEN T1.balance ELSE 0 END) - SUM(CASE WHEN T1.date = '1993-03-22' THEN T1.balance ELSE 0 END) AS REAL) * 100 / SUM(CASE WHEN T1.date = '1993-03-22' THEN T1.balance ELSE 0 END) FROM trans AS T1 INNER JOIN loan AS T2 ON T1.account_id = T2.account_id WHERE T2.date = '1993-07-05'",
            "4": "SELECT WITH first_loan_account AS (     SELECT account_id      FROM loan      WHERE date = '1993-07-05' ), account_balances AS (     SELECT          t1.balance AS initial_balance,         t2.balance AS final_balance     FROM          trans AS t1      JOIN          first_loan_account AS fla      ON          t1.account_id = fla.account_id      AND          t1.date = '1993-03-22'     JOIN          trans AS t2      ON          t2.account_id = fla.account_id      AND          t2.date = '1998-12-27' ) SELECT      ((final_balance - initial_balance) / initial_balance) * 100 AS increase_rate FROM      account_balances;",
            "2": "SELECT CAST((SUM(CASE WHEN T1.date = '1998-12-27' THEN T1.balance ELSE 0 END) - SUM(CASE WHEN T1.date = '1993-03-22' THEN T1.balance ELSE 0 END)) AS REAL) * 100 / SUM(CASE WHEN T1.date = '1993-03-22' THEN T1.balance ELSE 0 END) FROM trans AS T1 INNER JOIN loan AS T2 ON T1.account_id = T2.account_id WHERE T2.date = '1993-07-05'",
            "6": "SELECT CAST(SUM(CASE WHEN T1.date  =  '1998-12-27' THEN T1.balance ELSE 0 END) - SUM(CASE WHEN T1.date  =  '1993-03-22' THEN T1.balance ELSE 0 END) AS REAL) * 100 / SUM(CASE WHEN T1.date  =  '1993-03-22' THEN T1.balance ELSE 0 END) FROM trans AS T1 JOIN loan AS T2 ON T1.account_id  =  T2.account_id WHERE T2.date  =  '1993-07-05'",
            "3": "SELECT CAST(SUM(CASE WHEN T1.date = '1998-12-27' THEN T1.balance ELSE 0 END) - SUM(CASE WHEN T1.date = '1993-03-22' THEN T1.balance ELSE 0 END) AS REAL) * 100 / SUM(CASE WHEN T1.date = '1993-03-22' THEN T1.balance ELSE 0 END) FROM trans AS T1 INNER JOIN loan AS T2 ON T1.account_id = T2.account_id WHERE T2.date = '1993-07-05'"
        }
    },
    {
        "question_id": 117,
        "database": "financial",
        "evidence": "Loan paid with no issue means contract finished, no problems; status = 'A' means contract finished, no problems; Percentage of accounts by condition = [(total(amount) & condition) / (total amount)] * 100%",
        "question": "What is the percentage of loan amount that has been fully paid with no issue.",
        "schema_used": {
            "loan": [
                "amount",
                "status"
            ]
        },
        "gold": "SELECT (CAST(SUM(CASE WHEN status = 'A' THEN amount ELSE 0 END) AS REAL) * 100) / SUM(amount) FROM loan",
        "candidates": {
            "1": "SELECT      CAST(SUM(CASE WHEN status = 'A' THEN amount ELSE 0 END) AS REAL) * 100 / SUM(amount)  FROM      loan",
            "4": "SELECT CAST(SUM(CASE WHEN status = 'A' THEN amount ELSE 0 END) AS REAL) * 100 / SUM(amount)  FROM loan",
            "5": "SELECT CAST(SUM(CASE WHEN status = 'A' THEN amount ELSE 0 END) AS REAL) * 100 / SUM(amount) FROM loan",
            "2": "SELECT CAST(SUM(CASE WHEN status = 'A' THEN amount ELSE 0 END) AS REAL) * 100 / SUM(amount) FROM loan",
            "6": "SELECT CAST(SUM(CASE WHEN status = 'A' THEN amount ELSE 0 END) AS REAL) * 100 / SUM(amount) FROM loan",
            "3": "SELECT CAST(SUM(CASE WHEN status = 'A' THEN amount ELSE 0 END) AS REAL) * 100 / SUM(amount) FROM loan"
        }
    },
    {
        "question_id": 118,
        "database": "financial",
        "evidence": "Status = 'C' stands for running contract, ok so far; Percentage of accounts by condition = [(total(amount) & condition) / (total amount)] * 100.",
        "question": "For loan amount less than USD100,000, what is the percentage of accounts that is still running with no issue.",
        "schema_used": {
            "loan": [
                "amount",
                "account_id",
                "status"
            ]
        },
        "gold": "SELECT CAST(SUM(status = 'C') AS REAL) * 100 / COUNT(account_id) FROM loan WHERE amount < 100000",
        "candidates": {
            "4": "SELECT CAST(SUM(CASE WHEN T1.status = 'C' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.amount)  FROM loan AS T1  WHERE T1.amount < 100000",
            "1": "SELECT CAST(SUM(IIF(T1.status = 'C', 1, 0)) AS REAL) * 100 / COUNT(T1.loan_id)  FROM loan AS T1  WHERE T1.amount < 100000;",
            "2": "SELECT CAST(SUM(CASE WHEN T1.status = 'A' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM loan AS T1 WHERE T1.amount < 100000",
            "5": "SELECT CAST(SUM(CASE WHEN status = 'C' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM loan WHERE amount < 100000",
            "3": "SELECT CAST(SUM(IIF(status = 'C', 1, 0)) AS REAL) * 100 / COUNT(amount) FROM loan WHERE amount < 100000",
            "6": "SELECT CAST(SUM(IIF(status = 'C', 1, 0)) AS REAL) * 100 / COUNT(amount) FROM loan WHERE amount < 100000"
        }
    },
    {
        "question_id": 119,
        "database": "financial",
        "evidence": "Records about district names could be found in A2; A3 contains the information about regions. 'POPLATEK PO OBRATU' stands for issuance after transaction",
        "question": "For accounts in 1993 with statement issued after transaction, list the account ID, district name and district region.",
        "schema_used": {
            "account": [
                "account_id",
                "district_id",
                "frequency",
                "date"
            ],
            "district": [
                "a2",
                "a3",
                "district_id"
            ]
        },
        "gold": "SELECT T1.account_id, T2.A2, T2.A3 FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.frequency = 'POPLATEK PO OBRATU' AND STRFTIME('%Y', T1.date)= '1993'",
        "candidates": {
            "4": "SELECT T1.account_id, T2.A2, T2.A3  FROM account AS T1  INNER JOIN district AS T2  ON T1.district_id = T2.district_id  WHERE strftime('%Y', T1.date) = '1993' AND T1.frequency = 'POPLATEK PO OBRATU';",
            "1": "SELECT T1.account_id, T2.A2, T2.A3  FROM account AS T1  INNER JOIN district AS T2  ON T1.district_id = T2.district_id  WHERE strftime('%Y', T1.date) = '1993' AND T1.frequency = 'POPLATEK PO OBRATU';",
            "5": "SELECT T1.account_id,  T2.A2,  T2.A3  FROM account AS T1  INNER JOIN district AS T2  ON T1.district_id = T2.district_id  WHERE T1.date LIKE '1993%' AND T1.frequency = 'POPLATEK PO OBRATU'",
            "3": "SELECT T1.account_id, T2.A2, T2.A3 FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.frequency = 'POPLATEK PO OBRATU' AND T1.date LIKE '1993%'",
            "2": "SELECT T1.account_id, T2.A2, T2.A3 FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE strftime('%Y', T1.date) = '1993' AND T1.frequency = 'POPLATEK PO OBRATU'",
            "6": "SELECT T1.account_id ,  T2.A2 ,  T2.A3 FROM account AS T1 JOIN district AS T2 ON T1.district_id  =  T2.district_id WHERE T1.frequency  =  'POPLATEK PO OBRATU' AND T1.date LIKE '1993%'"
        }
    },
    {
        "question_id": 120,
        "database": "financial",
        "evidence": "Accounts holder refers to the person who own this account.",
        "question": "From Year 1995 to 2000, who are the accounts holders from 'east Bohemia'. State the account ID the frequency of statement issuance.",
        "schema_used": {
            "account": [
                "account_id",
                "frequency",
                "district_id",
                "date"
            ],
            "district": [
                "district_id",
                "a3"
            ]
        },
        "gold": "SELECT T1.account_id, T1.frequency FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A3 = 'east Bohemia' AND STRFTIME('%Y', T1.date) BETWEEN '1995' AND '2000'",
        "candidates": {
            "4": "SELECT T1.account_id, T1.frequency  FROM account AS T1  INNER JOIN district AS T2  ON T1.district_id = T2.district_id  WHERE T2.A3 = 'east Bohemia'  AND T1.district_id IN (     SELECT district_id      FROM account      WHERE strftime('%Y', creation_date) BETWEEN '1995' AND '2000' )",
            "2": "SELECT T1.account_id, T1.frequency FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A3 = 'east Bohemia'",
            "5": "SELECT T1.account_id, T1.frequency FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A3 = 'east Bohemia'",
            "6": "SELECT T1.account_id ,  T1.frequency FROM account AS T1 JOIN district AS T2 ON T1.district_id  =  T2.district_id WHERE T2.A3  =  'east Bohemia'",
            "3": "SELECT   account_id,   frequency FROM account WHERE   district_id IN (     SELECT       district_id     FROM district     WHERE       A3 = 'east Bohemia'   )   AND date BETWEEN '1995-01-01' AND '2000-12-31';",
            "1": "SELECT T1.account_id, T1.frequency FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A3 = 'east Bohemia' AND T1.date BETWEEN '1995-01-01' AND '2000-12-31';"
        }
    },
    {
        "question_id": 121,
        "database": "financial",
        "evidence": "A2 refers to the names of districts.",
        "question": "List account ID and account opening date for accounts from 'Prachatice'.",
        "schema_used": {
            "account": [
                "account_id",
                "date",
                "district_id"
            ],
            "district": [
                "district_id",
                "a2"
            ]
        },
        "gold": "SELECT T1.account_id, T1.date FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A2 = 'Prachatice'",
        "candidates": {
            "4": "SELECT T1.account_id, T1.date  FROM account AS T1  INNER JOIN district AS T2 ON T1.district_id = T2.district_id  WHERE T2.A2 = 'Prachatice';",
            "1": "SELECT T1.account_id, T1.date  FROM account AS T1  INNER JOIN district AS T2  ON T1.district_id = T2.district_id  WHERE T2.A2 = 'Prachatice';",
            "5": "SELECT account_id,  date  FROM account  INNER JOIN district  ON account.district_id = district.district_id  WHERE  A2 = 'Prachatice'",
            "2": "SELECT account_id, date FROM account INNER JOIN district ON account.district_id = district.district_id WHERE A2 = 'Prachatice'",
            "6": "SELECT T1.account_id ,  T1.date FROM account AS T1 JOIN district AS T2 ON T1.district_id  =  T2.district_id WHERE T2.A2  =  'Prachatice'",
            "3": "SELECT   T1.account_id,   T1.date FROM account AS T1 INNER JOIN district AS T2   ON T1.district_id = T2.district_id WHERE   T2.A2 = 'Prachatice';"
        }
    },
    {
        "question_id": 122,
        "database": "financial",
        "evidence": "A2, A3 contains the information about district and region respectively.",
        "question": "State the district and region for loan ID '4990'.",
        "schema_used": {
            "district": [
                "a2",
                "a3",
                "district_id"
            ],
            "account": [
                "district_id",
                "account_id"
            ],
            "loan": [
                "account_id",
                "loan_id"
            ]
        },
        "gold": "SELECT T2.A2, T2.A3 FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN loan AS T3 ON T1.account_id = T3.account_id WHERE T3.loan_id = 4990",
        "candidates": {
            "4": "SELECT T2.A2, T2.A3  FROM loan AS T1  INNER JOIN account AS T2 ON T1.account_id = T2.account_id  INNER JOIN district AS T3 ON T2.district_id = T3.district_id  WHERE T1.loan_id = 4990;",
            "1": "SELECT T3.A2, T3.A3  FROM loan AS T1  INNER JOIN account AS T2 ON T1.account_id = T2.account_id  INNER JOIN district AS T3 ON T2.district_id = T3.district_id  WHERE T1.loan_id = 4990;",
            "5": "SELECT T3.A2, T3.A3 FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN district AS T3 ON T2.district_id = T3.district_id WHERE T1.loan_id = 4990",
            "2": "SELECT T3.A2,  T3.A3  FROM loan AS T1  INNER JOIN account AS T2  ON T1.account_id = T2.account_id  INNER JOIN district AS T3  ON T2.district_id = T3.district_id  WHERE T1.loan_id = 4990",
            "6": "SELECT T3.A2 ,  T3.A3 FROM loan AS T1 JOIN account AS T2 ON T1.account_id  =  T2.account_id JOIN district AS T3 ON T2.district_id  =  T3.district_id WHERE T1.loan_id  =  4990",
            "3": "SELECT T3.A2, T3.A3 FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN district AS T3 ON T2.district_id = T3.district_id WHERE T1.loan_id = 4990"
        }
    },
    {
        "question_id": 123,
        "database": "financial",
        "evidence": "A2 contains district names and A3 contains region names.",
        "question": "Provide the account ID, district and region for loan amount greater than USD300,000.",
        "schema_used": {
            "account": [
                "account_id",
                "district_id"
            ],
            "district": [
                "a2",
                "a3",
                "district_id"
            ],
            "loan": [
                "account_id",
                "amount"
            ]
        },
        "gold": "SELECT T1.account_id, T2.A2, T2.A3 FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN loan AS T3 ON T1.account_id = T3.account_id WHERE T3.amount > 300000",
        "candidates": {
            "4": "SELECT T1.account_id, T2.A2, T2.A3  FROM loan AS T1  INNER JOIN account AS T2 ON T1.account_id = T2.account_id  INNER JOIN district AS T3 ON T2.district_id = T3.district_id  WHERE T1.amount > 300000;",
            "1": "SELECT T1.account_id, T3.A2, T3.A3  FROM loan AS T1  INNER JOIN account AS T2 ON T1.account_id = T2.account_id  INNER JOIN district AS T3 ON T2.district_id = T3.district_id  WHERE T1.amount > 300000;",
            "2": "SELECT T1.account_id, T2.A2, T2.A3 FROM loan AS T1 INNER JOIN account AS T3 ON T1.account_id = T3.account_id INNER JOIN district AS T2 ON T3.district_id = T2.district_id WHERE T1.amount > 300000",
            "5": "SELECT T1.account_id, T2.A2, T2.A3 FROM loan AS T1 INNER JOIN account AS T3 ON T1.account_id = T3.account_id INNER JOIN district AS T2 ON T3.district_id = T2.district_id WHERE T1.amount > 300000",
            "3": "SELECT T1.account_id, T2.A2, T2.A3 FROM loan AS T1 INNER JOIN district AS T2 ON T1.account_id = T2.district_id WHERE T1.amount > 300000",
            "6": "SELECT T1.account_id ,  T3.A2 ,  T3.A3 FROM loan AS T1 JOIN account AS T2 ON T1.account_id  =  T2.account_id JOIN district AS T3 ON T2.district_id  =  T3.district_id WHERE T1.amount  >  300000"
        }
    },
    {
        "question_id": 124,
        "database": "financial",
        "evidence": "A3 refers to regions; A11 refers to average salary",
        "question": "List the loan ID, district and average salary for loan with duration of 60 months.",
        "schema_used": {
            "loan": [
                "loan_id",
                "account_id",
                "duration"
            ],
            "district": [
                "a2",
                "a11",
                "district_id"
            ],
            "account": [
                "district_id",
                "account_id"
            ]
        },
        "gold": "SELECT T3.loan_id, T2.A2, T2.A11 FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN loan AS T3 ON T1.account_id = T3.account_id WHERE T3.duration = 60",
        "candidates": {
            "4": "SELECT T1.loan_id, T2.A3, T3.A11  FROM loan AS T1  INNER JOIN account AS T2 ON T1.account_id = T2.account_id  INNER JOIN district AS T3 ON T2.district_id = T3.district_id  WHERE T1.duration = 60",
            "1": "SELECT T1.loan_id, T3.A3, T3.A11 FROM loan AS T1 JOIN account AS T2 ON T1.account_id = T2.account_id JOIN district AS T3 ON T2.district_id = T3.district_id WHERE T1.duration = 60;",
            "5": "SELECT T1.loan_id,  T3.A3,  T3.A11  FROM loan AS T1  INNER JOIN account AS T2  ON T1.account_id = T2.account_id  INNER JOIN district AS T3  ON T2.district_id = T3.district_id  WHERE T1.duration = 60",
            "2": "SELECT T1.loan_id, T3.A3, T3.A11 FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN district AS T3 ON T2.district_id = T3.district_id WHERE T1.duration = 60",
            "6": "SELECT T1.loan_id ,  T3.A3 ,  T3.A11 FROM loan AS T1 JOIN account AS T2 ON T1.account_id  =  T2.account_id JOIN district AS T3 ON T2.district_id  =  T3.district_id WHERE T1.duration  =  60",
            "3": "SELECT   T1.loan_id,   T3.A3,   T3.A11 FROM loan AS T1 INNER JOIN account AS T2   ON T1.account_id = T2.account_id INNER JOIN district AS T3   ON T2.district_id = T3.district_id WHERE   T1.duration = 60;"
        }
    },
    {
        "question_id": 125,
        "database": "financial",
        "evidence": "Unemployment increment rate in percentage = [(unemployment rate 2016 - unemployment rate 2015) / unemployment rate 2015] * 100; unemployment rate 2015 appears in the A12; unemployment rate 2016 appears in the A13; Loan contracts which are still running where client are in debt can be presented as status = 'D'",
        "question": "For loans contracts which are still running where client are in debt, list the district of the and the state the percentage unemployment rate increment from year 1995 to 1996.",
        "schema_used": {
            "district": [
                "a12",
                "district_id",
                "a13"
            ],
            "loan": [
                "account_id",
                "status"
            ],
            "account": [
                "account_id",
                "district_id"
            ]
        },
        "gold": "SELECT CAST((T3.A13 - T3.A12) AS REAL) * 100 / T3.A12 FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN district AS T3 ON T2.district_id = T3.district_id WHERE T1.status = 'D'",
        "candidates": {
            "4": "SELECT      d.district_id,     d.A3,     ((d.A13 - d.A12) / d.A12) * 100 AS unemployment_rate_increment FROM      loan l JOIN      account a ON l.account_id = a.account_id JOIN      district d ON a.district_id = d.district_id WHERE      l.status = 'D';",
            "1": "SELECT      d.A3 AS district,      ((d.A13 - d.A12) / d.A12) * 100 AS unemployment_rate_increase FROM      loan l JOIN      account a ON l.account_id = a.account_id JOIN      district d ON a.district_id = d.district_id WHERE      l.status = 'D';",
            "5": "SELECT T1.A3,  (T1.A13 - T1.A12) * 100 / T1.A12  FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id INNER JOIN loan AS T3 ON T2.account_id = T3.account_id WHERE T3.status = 'D'",
            "2": "SELECT T1.A3,  (T1.A13 - T1.A12) * 100 / T1.A12  FROM district AS T1  INNER JOIN account AS T2  ON T1.district_id = T2.district_id  INNER JOIN loan AS T3  ON T2.account_id = T3.account_id  WHERE T3.status = 'D'",
            "6": "SELECT T3.A3 ,  ( T3.A13 - T3.A12 ) * 100 / T3.A12 FROM loan AS T1 JOIN account AS T2 ON T1.account_id  =  T2.account_id JOIN district AS T3 ON T2.district_id  =  T3.district_id WHERE T1.status  =  'D'",
            "3": "SELECT   T3.A3,   (     (       T3.A13 - T3.A12     ) * 100   ) / T3.A12 FROM loan AS T1 INNER JOIN account AS T2   ON T1.account_id = T2.account_id INNER JOIN district AS T3   ON T2.district_id = T3.district_id WHERE   T1.status = 'D';"
        }
    },
    {
        "question_id": 126,
        "database": "financial",
        "evidence": "A2 contains the information about district.",
        "question": "Calculate the percentage of account from 'Decin' district for all accounts are opened in 1993.",
        "schema_used": {
            "district": [
                "district_id",
                "a2"
            ],
            "account": [
                "district_id",
                "account_id",
                "date"
            ]
        },
        "gold": "SELECT CAST(SUM(T1.A2 = 'Decin') AS REAL) * 100 / COUNT(account_id) FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id WHERE STRFTIME('%Y', T2.date) = '1993'",
        "candidates": {
            "4": "SELECT CAST(SUM(CASE WHEN T2.A2 = 'Decin' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.district_id)  FROM account AS T1  INNER JOIN district AS T2 ON T1.district_id = T2.district_id  WHERE strftime('%Y', T1.date) = '1993';",
            "1": "SELECT CAST(SUM(CASE WHEN T2.A2 = 'Decin' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.account_id)  FROM account AS T1  INNER JOIN district AS T2 ON T1.district_id = T2.district_id  WHERE strftime('%Y', T1.date) = '1993';",
            "5": "SELECT CAST(SUM(CASE WHEN T1.district_id = ( SELECT district_id FROM district WHERE A2 = 'Decin' ) THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM account AS T1 WHERE STRFTIME('%Y', T1.date) = '1993'",
            "2": "SELECT CAST(SUM(CASE WHEN T1.A2 = 'Decin' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id WHERE STRFTIME('%Y', T2.date) = '1993'",
            "3": "SELECT   CAST(SUM(CASE WHEN T2.A2 = 'Decin' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.district_id) FROM account AS T1 INNER JOIN district AS T2   ON T1.district_id = T2.district_id WHERE   STRFTIME('%Y', T1.date) = '1993';",
            "6": "SELECT CAST(SUM(IIF(T2.A2 = 'Decin', 1, 0)) AS REAL) * 100 / COUNT(T1.district_id) FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE SUBSTR(T1.date, 1, 4) = '1993'"
        }
    },
    {
        "question_id": 127,
        "database": "financial",
        "evidence": "'POPLATEK MESICNE' stands for monthly issuance",
        "question": "List the account IDs with monthly issuance of statements.",
        "schema_used": {
            "account": [
                "account_id",
                "frequency"
            ]
        },
        "gold": "SELECT account_id FROM account WHERE Frequency = 'POPLATEK MESICNE'",
        "candidates": {
            "4": "SELECT account_id FROM account WHERE frequency = 'POPLATEK MESICNE'",
            "1": "SELECT account_id  FROM account  WHERE frequency = 'POPLATEK MESICNE';",
            "6": "SELECT account_id FROM account WHERE frequency = 'POPLATEK MESICNE'",
            "5": "SELECT account_id FROM account WHERE frequency = 'POPLATEK MESICNE'",
            "2": "SELECT account_id FROM account WHERE frequency = 'POPLATEK MESICNE'",
            "3": "SELECT   account_id FROM account WHERE   frequency = 'POPLATEK MESICNE';"
        }
    },
    {
        "question_id": 128,
        "database": "financial",
        "evidence": "A2 refers to districts; Female refers to gender = 'F'",
        "question": "List the top nine districts, by descending order, from the highest to the lowest, the number of female account holders.",
        "schema_used": {
            "district": [
                "a2",
                "district_id"
            ],
            "client": [
                "client_id",
                "district_id",
                "gender"
            ]
        },
        "gold": "SELECT T2.A2, COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'F' GROUP BY T2.district_id, T2.A2 ORDER BY COUNT(T1.client_id) DESC LIMIT 9",
        "candidates": {
            "4": "SELECT T3.A2, COUNT(*) AS female_count FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN district AS T3 ON T1.district_id = T3.district_id WHERE T1.gender = 'F' GROUP BY T3.district_id ORDER BY female_count DESC LIMIT 9;",
            "2": "SELECT T1.A2  FROM  district AS T1  INNER JOIN client AS T2  ON T1.district_id = T2.district_id  WHERE  T2.gender = 'F'  GROUP BY  T1.A2  ORDER BY  COUNT(T2.client_id) DESC  LIMIT 9",
            "1": "SELECT T3.A2, COUNT(*) AS female_account_holders FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN district AS T3 ON T1.district_id = T3.district_id WHERE T1.gender = 'F' GROUP BY T3.A2 ORDER BY female_account_holders DESC LIMIT 9;",
            "5": "SELECT T1.A2 FROM district AS T1 INNER JOIN client AS T2 ON T1.district_id = T2.district_id WHERE T2.gender = 'F' GROUP BY T1.A2 ORDER BY COUNT(T2.client_id) DESC LIMIT 9",
            "6": "SELECT T3.A2 FROM client AS T1 JOIN disp AS T2 ON T1.client_id = T2.client_id JOIN district AS T3 ON T1.district_id = T3.district_id WHERE T1.gender = 'F' GROUP BY T3.A2 ORDER BY count(*) DESC LIMIT 9",
            "3": "SELECT   T1.A2 FROM district AS T1 INNER JOIN client AS T2   ON T1.district_id = T2.district_id WHERE   T2.gender = 'F' GROUP BY   T1.A2 ORDER BY   COUNT(T2.client_id) DESC LIMIT 9;"
        }
    },
    {
        "question_id": 129,
        "database": "financial",
        "evidence": "Non-credit card withdraws refers to type = 'VYDAJ'; January 1996 can be found by date LIKE '1996-01%' in the database; A2 means district names",
        "question": "Which are the top ten withdrawals (non-credit card) by district names for the month of January 1996?",
        "schema_used": {
            "district": [
                "a2",
                "district_id"
            ],
            "account": [
                "district_id",
                "account_id"
            ],
            "trans": [
                "account_id",
                "type",
                "date"
            ]
        },
        "gold": "SELECT DISTINCT T1.A2 FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id INNER JOIN trans AS T3 ON T2.account_id = T3.account_id WHERE T3.type = 'VYDAJ' AND T3.date LIKE '1996-01%' ORDER BY A2 ASC LIMIT 10",
        "candidates": {
            "4": "SELECT T3.A2, SUM(T1.amount) AS total_withdrawals  FROM trans AS T1  INNER JOIN account AS T2 ON T1.account_id = T2.account_id  INNER JOIN district AS T3 ON T2.district_id = T3.district_id  WHERE T1.type = 'VYDAJ' AND T1.date LIKE '1996-01-%' GROUP BY T3.A2  ORDER BY total_withdrawals DESC  LIMIT 10;",
            "1": "SELECT d.A2, SUM(t.amount) AS total_withdrawals FROM trans t JOIN account a ON t.account_id = a.account_id JOIN district d ON a.district_id = d.district_id WHERE t.type = 'VYDAJ' AND t.date LIKE '1996-01-%' GROUP BY d.A2 ORDER BY total_withdrawals DESC LIMIT 10;",
            "5": "SELECT T1.A2,SUM(T3.amount) FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id INNER JOIN trans AS T3 ON T2.account_id = T3.account_id WHERE T3.type = 'VYDAJ' AND T3.date LIKE '1996-01%' GROUP BY T1.A2 ORDER BY SUM(T3.amount) DESC LIMIT 10",
            "2": "SELECT T1.A2,SUM(T2.amount) FROM district AS T1 INNER JOIN account AS T3 ON T1.district_id = T3.district_id INNER JOIN trans AS T2 ON T3.account_id = T2.account_id WHERE T2.type = 'VYDAJ' AND T2.date LIKE '1996-01%' GROUP BY T1.A2 ORDER BY SUM(T2.amount) DESC LIMIT 10",
            "3": "SELECT   T2.A2 FROM trans AS T1 INNER JOIN district AS T2   ON T1.account_id = T2.district_id WHERE   T1.type = 'VYDAJ' AND T1.date LIKE '1996-01%' LIMIT 10;",
            "6": "SELECT T3.A2 FROM trans AS T1 JOIN account AS T2 ON T1.account_id  =  T2.account_id JOIN district AS T3 ON T2.district_id  =  T3.district_id WHERE T1.type  =  'VYDAJ' AND T1.date LIKE '1996-01%' GROUP BY T3.A2 ORDER BY COUNT(*) DESC LIMIT 10"
        }
    },
    {
        "question_id": 130,
        "database": "financial",
        "evidence": "A3 contains the region names; South Bohemia is one of region names.",
        "question": "How many of the account holders in South Bohemia still do not own credit cards?",
        "schema_used": {
            "disp": [
                "account_id",
                "client_id",
                "type"
            ],
            "district": [
                "district_id",
                "a3"
            ],
            "client": [
                "district_id",
                "client_id"
            ]
        },
        "gold": "SELECT COUNT(T3.account_id) FROM district AS T1 INNER JOIN client AS T2 ON T1.district_id = T2.district_id INNER JOIN disp AS T3 ON T2.client_id = T3.client_id WHERE T1.A3 = 'south Bohemia' AND T3.type != 'OWNER'",
        "candidates": {
            "4": "SELECT COUNT(DISTINCT T1.account_id) FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id LEFT JOIN disp AS T3 ON T1.account_id = T3.account_id LEFT JOIN card AS T4 ON T3.disp_id = T4.disp_id WHERE T2.A3 = 'south Bohemia' AND T4.disp_id IS NULL",
            "2": "SELECT COUNT(T1.account_id) FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN disp AS T3 ON T1.account_id = T3.account_id LEFT JOIN card AS T4 ON T3.disp_id = T4.disp_id WHERE T2.A3 = 'South Bohemia' AND T4.disp_id IS NULL",
            "5": "SELECT COUNT(T1.account_id) FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id EXCEPT SELECT COUNT(T1.account_id) FROM account AS T1 INNER JOIN disp AS T3 ON T1.account_id = T3.account_id INNER JOIN card AS T4 ON T3.disp_id = T4.disp_id INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A3 = 'South Bohemia'",
            "6": "SELECT COUNT(T1.account_id) FROM account AS T1 JOIN district AS T2 ON T1.district_id  =  T2.district_id LEFT JOIN disp AS T3 ON T1.account_id  =  T3.account_id LEFT JOIN card AS T4 ON T3.disp_id  =  T4.disp_id WHERE T2.A3  =  'south Bohemia' AND T4.disp_id IS NULL",
            "3": "SELECT   COUNT(T1.account_id) FROM account AS T1 INNER JOIN district AS T2   ON T1.district_id = T2.district_id LEFT JOIN disp AS T3   ON T1.account_id = T3.account_id LEFT JOIN card AS T4   ON T3.disp_id = T4.disp_id WHERE   T2.A3 = 'south Bohemia' AND T4.disp_id IS NULL;",
            "1": "SELECT WITH south_bohemia_accounts AS (     SELECT account_id     FROM account     WHERE district_id = (         SELECT district_id          FROM district          WHERE A3 = 'south Bohemia'     ) ), accounts_with_cards AS (     SELECT DISTINCT d.account_id     FROM disp d     JOIN card c ON d.disp_id = c.disp_id ) SELECT COUNT(*)  FROM south_bohemia_accounts WHERE account_id NOT IN (SELECT account_id FROM accounts_with_cards);"
        }
    },
    {
        "question_id": 131,
        "database": "financial",
        "evidence": "A3 refers to district names; Active loan refers to running contracts; Status = 'C' stands for running contract, OK so far; Status = 'D' stands for running contract, client in debt",
        "question": "Which district has highest active loan?",
        "schema_used": {
            "district": [
                "a3",
                "district_id"
            ],
            "account": [
                "district_id",
                "account_id"
            ],
            "loan": [
                "account_id",
                "status",
                "amount"
            ]
        },
        "gold": "SELECT T2.A3 FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN loan AS T3 ON T1.account_id = T3.account_id WHERE T3.status IN ('C', 'D') GROUP BY T2.A3 ORDER BY SUM(T3.amount) DESC LIMIT 1",
        "candidates": {
            "1": "SELECT T3.A3  FROM loan AS T1  JOIN account AS T2 ON T1.account_id = T2.account_id  JOIN district AS T3 ON T2.district_id = T3.district_id  WHERE T1.status IN ('C', 'D')  GROUP BY T3.A3  ORDER BY COUNT(T1.loan_id) DESC  LIMIT 1;",
            "4": "SELECT T1.district_id, T1.A3, COUNT(*) AS num_active_loans FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id INNER JOIN loan AS T3 ON T2.account_id = T3.account_id WHERE T3.status IN ('C', 'D') GROUP BY T1.district_id, T1.A3 ORDER BY num_active_loans DESC LIMIT 1;",
            "2": "SELECT T1.A3 FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id INNER JOIN loan AS T3 ON T2.account_id = T3.account_id WHERE T3.status = 'C' GROUP BY T1.A3 ORDER BY COUNT(T3.loan_id) DESC LIMIT 1",
            "5": "SELECT T1.A3 FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id INNER JOIN loan AS T3 ON T2.account_id = T3.account_id WHERE T3.status = 'C' GROUP BY T1.A3 ORDER BY COUNT(T3.account_id) DESC LIMIT 1",
            "6": "SELECT T3.A3 FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN district AS T3 ON T2.district_id = T3.district_id WHERE T1.status = 'C' OR T1.status = 'D' GROUP BY T3.A3 ORDER BY count(*) DESC LIMIT 1",
            "3": "SELECT T3.A3 FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN district AS T3 ON T2.district_id = T3.district_id WHERE T1.status = 'C' OR T1.status = 'D' GROUP BY T3.A3 ORDER BY COUNT(T1.account_id) DESC LIMIT 1"
        }
    },
    {
        "question_id": 132,
        "database": "financial",
        "evidence": "Male refers to gender = 'M'",
        "question": "What is the average loan amount by male borrowers?",
        "schema_used": {
            "loan": [
                "amount",
                "account_id"
            ],
            "client": [
                "client_id",
                "gender"
            ],
            "disp": [
                "client_id",
                "account_id"
            ],
            "account": [
                "account_id"
            ]
        },
        "gold": "SELECT AVG(T4.amount) FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN account AS T3 ON T2.account_id = T3.account_id INNER JOIN loan AS T4 ON T3.account_id = T4.account_id WHERE T1.gender = 'M'",
        "candidates": {
            "4": "SELECT AVG(T1.amount)  FROM loan AS T1  INNER JOIN disp AS T2 ON T1.account_id = T2.account_id  INNER JOIN client AS T3 ON T2.client_id = T3.client_id  WHERE T3.gender = 'M'",
            "1": "SELECT AVG(T1.amount)  FROM loan AS T1  INNER JOIN disp AS T2 ON T1.account_id = T2.account_id  INNER JOIN client AS T3 ON T2.client_id = T3.client_id  WHERE T3.gender = 'M';",
            "5": "SELECT AVG(T1.amount) FROM loan AS T1 INNER JOIN disp AS T2 ON T1.account_id = T2.account_id INNER JOIN client AS T3 ON T2.client_id = T3.client_id WHERE T3.gender = 'M'",
            "2": "SELECT CAST(AVG(T1.amount) AS REAL) FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN disp AS T3 ON T2.account_id = T3.account_id INNER JOIN client AS T4 ON T3.client_id = T4.client_id WHERE T4.gender = 'M'",
            "6": "SELECT AVG(T2.amount) FROM client AS T1 INNER JOIN loan AS T2 ON T1.client_id = T2.account_id WHERE T1.gender = 'M'",
            "3": "SELECT AVG(T2.amount) FROM client AS T1 INNER JOIN disp AS T3 ON T1.client_id = T3.client_id INNER JOIN loan AS T2 ON T3.account_id = T2.account_id WHERE T1.gender = 'M'"
        }
    },
    {
        "question_id": 133,
        "database": "financial",
        "evidence": "A2 refers to district names; A13 refers to unemploymant rate in 1996",
        "question": "In 1996, which districts have the highest unemployment rate? List their branch location and district name.",
        "schema_used": {
            "district": [
                "district_id",
                "a2",
                "a13"
            ]
        },
        "gold": "SELECT district_id, A2 FROM district ORDER BY A13 DESC LIMIT 1",
        "candidates": {
            "5": "SELECT A2,  A3  FROM district  ORDER BY A13 DESC  LIMIT 1",
            "4": "SELECT A2, A3 FROM district WHERE A13 = (SELECT MAX(A13) FROM district)",
            "1": "SELECT A2 AS district_name, A3 AS branch_location  FROM district  ORDER BY A13 DESC  LIMIT 1;",
            "2": "SELECT A2, A3 FROM district ORDER BY A13 DESC",
            "6": "SELECT A2 ,  A3 FROM district ORDER BY A13 DESC LIMIT 1",
            "3": "SELECT A2 ,  A3 FROM district ORDER BY A13 DESC LIMIT 1"
        }
    },
    {
        "question_id": 134,
        "database": "financial",
        "evidence": "A16 stands for no. of committed crimes 1996",
        "question": "In the branch where the largest number of crimes were committed in 1996, how many accounts were opened?",
        "schema_used": {
            "district": [
                "a16",
                "district_id"
            ],
            "account": [
                "account_id",
                "district_id"
            ]
        },
        "gold": "SELECT COUNT(T2.account_id) FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id GROUP BY T1.A16 ORDER BY T1.A16 DESC LIMIT 1",
        "candidates": {
            "4": "SELECT COUNT(*)  FROM account  WHERE district_id = (     SELECT district_id      FROM district      ORDER BY A16 DESC      LIMIT 1 )",
            "1": "SELECT COUNT(*)  FROM account  WHERE district_id = (     SELECT district_id      FROM district      ORDER BY A16 DESC      LIMIT 1 )",
            "5": "SELECT COUNT(*) FROM account WHERE district_id  =  (SELECT district_id FROM district ORDER BY A16 DESC LIMIT 1)",
            "2": "SELECT COUNT(T1.account_id) FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.district_id = ( SELECT district_id FROM district ORDER BY A16 DESC LIMIT 1 )",
            "6": "SELECT count(*) FROM district AS t1 JOIN account AS t2 ON t1.district_id  =  t2.district_id WHERE t1.A16  =  (SELECT max(A16) FROM district)",
            "3": "SELECT   COUNT(T1.account_id) FROM account AS T1 INNER JOIN district AS T2   ON T1.district_id = T2.district_id WHERE   T2.A16 = (     SELECT       MAX(A16)     FROM district   );"
        }
    },
    {
        "question_id": 135,
        "database": "financial",
        "evidence": "Negative balance means balance < 0; Operation = 'VYBER KARTOU' stands for credit card withdraw. Frequency = 'POPLATEK MESICNE' stands for monthly issurance",
        "question": "After making a credit card withdrawal, how many account/s with monthly issuance has a negative balance?",
        "schema_used": {
            "trans": [
                "account_id",
                "balance",
                "operation"
            ],
            "account": [
                "account_id",
                "frequency"
            ]
        },
        "gold": "SELECT COUNT(T1.account_id) FROM trans AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE T1.balance < 0 AND T1.operation = 'VYBER KARTOU' AND T2.frequency = 'POPLATEK MESICNE'",
        "candidates": {
            "4": "SELECT COUNT(t.account_id) FROM trans t JOIN account a ON t.account_id = a.account_id WHERE t.operation = 'VYBER KARTOU' AND a.frequency = 'POPLATEK MESICNE' AND t.balance < 0;",
            "1": "SELECT COUNT(T1.account_id) FROM account AS T1 INNER JOIN trans AS T2 ON T1.account_id = T2.account_id WHERE T1.frequency = 'POPLATEK MESICNE' AND T2.operation = 'VYBER KARTOU' AND T2.balance < 0",
            "5": "SELECT COUNT(T1.account_id) FROM account AS T1 INNER JOIN trans AS T2 ON T1.account_id = T2.account_id WHERE T2.operation = 'VYBER KARTOU' AND T1.frequency = 'POPLATEK MESICNE' AND T2.balance < 0",
            "2": "SELECT COUNT(T1.account_id) FROM account AS T1 INNER JOIN trans AS T2 ON T1.account_id = T2.account_id WHERE T2.operation = 'VYBER KARTOU' AND T1.frequency = 'POPLATEK MESICNE' AND T2.balance < 0",
            "3": "SELECT   COUNT(T1.account_id) FROM account AS T1 INNER JOIN trans AS T2   ON T1.account_id = T2.account_id WHERE   T2.operation = 'VYBER KARTOU' AND T2.balance < 0 AND T1.frequency = 'POPLATEK MESICNE';",
            "6": "SELECT count(DISTINCT T1.account_id) FROM trans AS T1 JOIN account AS T2 ON T1.account_id  =  T2.account_id WHERE T1.operation  =  'VYBER KARTOU' AND T2.frequency  =  'POPLATEK MESICNE' AND T1.balance  <  0"
        }
    },
    {
        "question_id": 136,
        "database": "financial",
        "evidence": "Frequency = 'POPLATEK MESICNE' stands for monthly issurance",
        "question": "Between 1/1/1995 and 12/31/1997, how many loans in the amount of at least 250,000 per account that chose monthly statement issuance were approved?",
        "schema_used": {
            "account": [
                "account_id",
                "frequency"
            ],
            "loan": [
                "account_id",
                "amount",
                "date"
            ]
        },
        "gold": "SELECT COUNT(T1.account_id) FROM account AS T1 INNER JOIN loan AS T2 ON T1.account_id = T2.account_id WHERE T2.date BETWEEN '1995-01-01' AND '1997-12-31' AND T1.frequency = 'POPLATEK MESICNE' AND T2.amount >= 250000",
        "candidates": {
            "4": "SELECT COUNT(account_id) FROM loan INNER JOIN account ON loan.account_id = account.account_id WHERE loan.amount >= 250000  AND loan.date BETWEEN '1995-01-01' AND '1997-12-31' AND account.frequency = 'POPLATEK MESICNE';",
            "1": "SELECT COUNT(*) FROM loan AS L JOIN account AS A ON L.account_id = A.account_id WHERE L.amount >= 250000  AND A.frequency = 'POPLATEK MESICNE' AND L.date BETWEEN '1995-01-01' AND '1997-12-31';",
            "5": "SELECT COUNT(*) FROM loan JOIN account ON loan.account_id  =  account.account_id WHERE account.frequency  =  'POPLATEK MESICNE' AND loan.amount  >=  250000 AND loan.date BETWEEN '1995-01-01' AND '1997-12-31'",
            "2": "SELECT COUNT(T1.account_id) FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE T1.amount >= 250000 AND T2.frequency = 'POPLATEK MESICNE' AND T1.date BETWEEN '1995-01-01' AND '1997-12-31'",
            "3": "SELECT   COUNT(T1.loan_id) FROM loan AS T1 INNER JOIN account AS T2   ON T1.account_id = T2.account_id WHERE   T2.frequency = 'POPLATEK MESICNE' AND T1.amount >= 250000 AND T1.date BETWEEN '1995-01-01' AND '1997-12-31';",
            "6": "SELECT count(*) FROM account AS t1 JOIN loan AS t2 ON t1.account_id  =  t2.account_id WHERE t1.frequency  =  'POPLATEK MESICNE' AND t2.amount  >=  250000 AND t2.date BETWEEN '1995-01-01' AND '1997-12-31'"
        }
    },
    {
        "question_id": 137,
        "database": "financial",
        "evidence": "Status = 'C' stands for running contract, OK so far; Status = 'D' stands for running contract, client in debt",
        "question": "How many accounts have running contracts in Branch location 1?",
        "schema_used": {
            "account": [
                "account_id",
                "district_id"
            ],
            "district": [
                "district_id"
            ],
            "loan": [
                "account_id",
                "status"
            ]
        },
        "gold": "SELECT COUNT(T1.account_id) FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN loan AS T3 ON T1.account_id = T3.account_id WHERE T1.district_id = 1 AND (T3.status = 'C' OR T3.status = 'D')",
        "candidates": {
            "4": "SELECT COUNT(*)  FROM loan AS T1  INNER JOIN account AS T2 ON T1.account_id = T2.account_id  WHERE T1.status IN ('C', 'D') AND T2.district_id = 1;",
            "1": "SELECT COUNT(*)  FROM loan AS T1  INNER JOIN account AS T2 ON T1.account_id = T2.account_id  WHERE T1.status = 'C' AND T2.district_id = 1;",
            "2": "SELECT COUNT(T1.account_id) FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE T2.district_id = 1 AND T1.status IN ('C', 'D')",
            "5": "SELECT COUNT(T1.account_id) FROM account AS T1 INNER JOIN loan AS T2 ON T1.account_id = T2.account_id WHERE T1.district_id = 1 AND T2.status IN ('C', 'D')",
            "6": "SELECT count(*) FROM account AS T1 JOIN loan AS T2 ON T1.account_id  =  T2.account_id WHERE T1.district_id  =  1 AND T2.status  =  'C'",
            "3": "SELECT   COUNT(T1.account_id) FROM account AS T1 INNER JOIN loan AS T2   ON T1.account_id = T2.account_id WHERE   T1.district_id = 1 AND T2.status = 'C';"
        }
    },
    {
        "question_id": 138,
        "database": "financial",
        "evidence": "Male refers to gender = 'M'; A15 stands for no. of commited crimes 1995",
        "question": "In the branch where the second-highest number of crimes were committed in 1995 occurred, how many male clients are there?",
        "schema_used": {
            "district": [
                "a15",
                "district_id"
            ],
            "client": [
                "client_id",
                "district_id",
                "gender"
            ]
        },
        "gold": "SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'M' AND T2.A15 = (SELECT T3.A15 FROM district AS T3 ORDER BY T3.A15 DESC LIMIT 1, 1)",
        "candidates": {
            "1": "SELECT COUNT(client_id)  FROM client  WHERE gender = 'M' AND district_id = (     SELECT district_id      FROM district      ORDER BY A15 DESC      LIMIT 1 OFFSET 1 );",
            "4": "SELECT COUNT(*)  FROM client AS T1  INNER JOIN district AS T2 ON T1.district_id = T2.district_id  WHERE T1.gender = 'M'  AND T2.A15 = (     SELECT A15      FROM district      ORDER BY A15 DESC      LIMIT 1 OFFSET 1 )",
            "5": "SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'M' AND T2.district_id = ( SELECT T2.district_id FROM district AS T2 ORDER BY T2.A15 DESC LIMIT 1 OFFSET 1 )",
            "2": "SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'M' AND T2.district_id = ( SELECT T2.district_id FROM district AS T2 ORDER BY T2.A15 DESC LIMIT 1 OFFSET 1 )",
            "3": "SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'M' GROUP BY T2.A15 ORDER BY T2.A15 DESC LIMIT 1 OFFSET 1",
            "6": "SELECT count(*) FROM client AS t1 JOIN district AS t2 ON t1.district_id  =  t2.district_id WHERE t1.gender  =  'M' AND t2.A15  =  (SELECT A15 FROM district ORDER BY A15 DESC LIMIT 1 OFFSET 1)"
        }
    },
    {
        "question_id": 139,
        "database": "financial",
        "evidence": "High-level credit cards refers to the cards with the gold type.",
        "question": "How many high-level credit cards have \"OWNER\" type of disposition?",
        "schema_used": {
            "card": [
                "card_id",
                "disp_id",
                "type"
            ],
            "disp": [
                "disp_id",
                "type"
            ]
        },
        "gold": "SELECT COUNT(T1.card_id) FROM card AS T1 INNER JOIN disp AS T2 ON T1.disp_id = T2.disp_id WHERE T1.type = 'gold' AND T2.type = 'OWNER'",
        "candidates": {
            "4": "SELECT COUNT(*)  FROM disp AS T1  INNER JOIN card AS T2 ON T1.disp_id = T2.disp_id  WHERE T1.type = 'OWNER' AND T2.type = 'gold';",
            "1": "SELECT COUNT(card.disp_id) FROM card INNER JOIN disp ON card.disp_id = disp.disp_id WHERE card.type = 'gold' AND disp.type = 'OWNER';",
            "2": "SELECT COUNT(*) FROM disp INNER JOIN card ON disp.disp_id = card.disp_id WHERE card.type = 'gold' AND disp.type = 'OWNER'",
            "5": "SELECT COUNT(*) FROM disp INNER JOIN card ON disp.disp_id = card.disp_id WHERE card.type = 'gold' AND disp.type = 'OWNER'",
            "3": "SELECT   COUNT(T1.type) FROM disp AS T1 INNER JOIN card AS T2   ON T1.disp_id = T2.disp_id WHERE   T2.type = 'gold' AND T1.type = 'OWNER';",
            "6": "SELECT count(*) FROM card AS T1 JOIN disp AS T2 ON T1.disp_id  =  T2.disp_id WHERE T1.type  =  \"gold\" AND T2.type  =  \"OWNER\""
        }
    },
    {
        "question_id": 140,
        "database": "financial",
        "evidence": "A2 refers to district name",
        "question": "How many accounts are there in the district of \"Pisek\"?",
        "schema_used": {
            "account": [
                "account_id",
                "district_id"
            ],
            "district": [
                "district_id",
                "a2"
            ]
        },
        "gold": "SELECT COUNT(T1.account_id) FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A2 = 'Pisek'",
        "candidates": {
            "4": "SELECT COUNT(*)  FROM account AS T1  INNER JOIN district AS T2  ON T1.district_id = T2.district_id  WHERE T2.A2 = 'Pisek';",
            "1": "SELECT COUNT(*)  FROM account AS T1  INNER JOIN district AS T2  ON T1.district_id = T2.district_id  WHERE T2.A2 = 'Pisek';",
            "5": "SELECT COUNT(*) FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A2 = 'Pisek'",
            "2": "SELECT COUNT(T1.account_id) FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A2 = 'Pisek'",
            "3": "SELECT   COUNT(T1.account_id) FROM account AS T1 INNER JOIN district AS T2   ON T1.district_id = T2.district_id WHERE   T2.A2 = 'Pisek';",
            "6": "SELECT count(*) FROM district AS T1 JOIN account AS T2 ON T1.district_id  =  T2.district_id WHERE T1.A2  =  \"Pisek\""
        }
    },
    {
        "question_id": 141,
        "database": "financial",
        "evidence": "",
        "question": "Which districts have transactions greater than USS$10,000 in 1997?",
        "schema_used": {
            "account": [
                "district_id",
                "account_id"
            ],
            "district": [
                "district_id"
            ],
            "trans": [
                "account_id",
                "amount",
                "date"
            ]
        },
        "gold": "SELECT T1.district_id FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN trans AS T3 ON T1.account_id = T3.account_id WHERE STRFTIME('%Y', T3.date) = '1997' GROUP BY T1.district_id HAVING SUM(T3.amount) > 10000",
        "candidates": {
            "4": "SELECT T3.A2  FROM trans AS T1  INNER JOIN account AS T2 ON T1.account_id = T2.account_id  INNER JOIN district AS T3 ON T2.district_id = T3.district_id  WHERE T1.amount > 10000 AND strftime('%Y', T1.date) = '1997'",
            "1": "SELECT d.A2 FROM district d JOIN account a ON d.district_id = a.district_id JOIN trans t ON a.account_id = t.account_id WHERE t.amount > 10000 AND strftime('%Y', t.date) = '1997' GROUP BY d.A2;",
            "5": "SELECT T1.A2 FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id  =  T2.district_id INNER JOIN trans AS T3 ON T2.account_id  =  T3.account_id WHERE STRFTIME('%Y', T3.date)  =  '1997' GROUP BY T1.A2 HAVING SUM(T3.amount)  >  10000",
            "2": "SELECT T1.A2  FROM district AS T1  INNER JOIN account AS T2 ON T1.district_id  =  T2.district_id  INNER JOIN trans AS T3 ON T2.account_id  =  T3.account_id  WHERE strftime('%Y', T3.date)  =  '1997'  GROUP BY T1.A2  HAVING SUM(T3.amount)  >  10000",
            "3": "SELECT DISTINCT   T3.A2 FROM trans AS T1 INNER JOIN account AS T2   ON T1.account_id = T2.account_id INNER JOIN district AS T3   ON T2.district_id = T3.district_id WHERE   T1.amount > 10000 AND STRFTIME('%Y', T1.date) = '1997';",
            "6": "SELECT T3.A2 FROM trans AS T1 JOIN account AS T2 ON T1.account_id  =  T2.account_id JOIN district AS T3 ON T2.district_id  =  T3.district_id WHERE T1.amount  >  10000 AND T1.date LIKE \"1997%\""
        }
    },
    {
        "question_id": 142,
        "database": "financial",
        "evidence": "k_symbol = 'SIPO' refers to household payment",
        "question": "Which accounts placed orders for household payment in Pisek?",
        "schema_used": {
            "account": [
                "account_id",
                "district_id"
            ],
            "trans": [
                "account_id",
                "k_symbol"
            ],
            "district": [
                "district_id",
                "a2"
            ]
        },
        "gold": "SELECT DISTINCT T2.account_id FROM trans AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN district AS T3 ON T2.district_id = T3.district_id WHERE T1.k_symbol = 'SIPO' AND T3.A2 = 'Pisek'",
        "candidates": {
            "4": "SELECT T1.account_id  FROM order AS T1  INNER JOIN account AS T2 ON T1.account_id = T2.account_id  INNER JOIN district AS T3 ON T2.district_id = T3.district_id  WHERE T1.k_symbol = 'SIPO' AND T3.A2 = 'Pisek';",
            "5": "SELECT T1.account_id FROM order AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN district AS T3 ON T2.district_id = T3.district_id WHERE T1.k_symbol = 'SIPO' AND T3.A2 = 'Pisek'",
            "2": "SELECT T1.account_id FROM order AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN district AS T3 ON T2.district_id = T3.district_id WHERE T3.A2 = 'Pisek' AND T1.k_symbol = 'SIPO'",
            "3": "SELECT DISTINCT T1.account_id FROM account AS T1 INNER JOIN \"order\" AS T2 ON T1.account_id = T2.account_id INNER JOIN district AS T3 ON T1.district_id = T3.district_id WHERE T3.A2 = 'Pisek' AND T2.k_symbol = 'SIPO'",
            "1": "SELECT T1.account_id FROM order AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN district AS T3 ON T2.district_id = T3.district_id WHERE T1.k_symbol = 'SIPO' AND T3.A2 = 'Pisek';",
            "6": "SELECT T1.account_id FROM account AS T1 JOIN \"order\" AS T2 ON T1.account_id  =  T2.account_id JOIN district AS T3 ON T1.district_id  =  T3.district_id WHERE T3.A2  =  'Pisek' AND T2.k_symbol  =  'SIPO'"
        }
    },
    {
        "question_id": 143,
        "database": "financial",
        "evidence": "",
        "question": "What are the accounts that have gold credit cards?",
        "schema_used": {
            "disp": [
                "account_id",
                "disp_id"
            ],
            "card": [
                "disp_id",
                "type"
            ]
        },
        "gold": "SELECT T2.account_id FROM disp AS T2  INNER JOIN card AS T1 ON T1.disp_id = T2.disp_id  WHERE T1.type = 'gold'",
        "candidates": {
            "4": "SELECT DISTINCT T1.account_id  FROM account AS T1  INNER JOIN disp AS T2 ON T1.account_id = T2.account_id  INNER JOIN card AS T3 ON T2.disp_id = T3.disp_id  WHERE T3.type = 'gold'",
            "1": "SELECT DISTINCT T1.account_id FROM disp AS T1 INNER JOIN card AS T2 ON T1.disp_id = T2.disp_id WHERE T2.type = 'gold';",
            "2": "SELECT T1.account_id FROM account AS T1 INNER JOIN disp AS T2 ON T1.account_id = T2.account_id INNER JOIN card AS T3 ON T2.disp_id = T3.disp_id WHERE T3.type = 'gold'",
            "5": "SELECT T1.account_id FROM account AS T1 INNER JOIN disp AS T2 ON T1.account_id = T2.account_id INNER JOIN card AS T3 ON T2.disp_id = T3.disp_id WHERE T3.type = 'gold'",
            "3": "SELECT   T1.account_id FROM disp AS T1 INNER JOIN card AS T2   ON T1.disp_id = T2.disp_id WHERE   T2.type = 'gold';",
            "6": "SELECT T1.account_id FROM disp AS T1 JOIN card AS T2 ON T1.disp_id = T2.disp_id WHERE T2.type = \"gold\""
        }
    },
    {
        "question_id": 144,
        "database": "financial",
        "evidence": "Operation = 'VYBER KARTOU' refers to credit card withdrawn",
        "question": "How much is the average amount in credit card made by account holders in a month, in year 2021?",
        "schema_used": {
            "trans": [
                "amount",
                "account_id",
                "operation",
                "date"
            ],
            "card": [
                "disp_id"
            ],
            "disp": [
                "disp_id",
                "account_id"
            ],
            "account": [
                "account_id"
            ]
        },
        "gold": "SELECT AVG(T4.amount) FROM card AS T1 INNER JOIN disp AS T2 ON T1.disp_id = T2.disp_id INNER JOIN account AS T3 ON T2.account_id = T3.account_id INNER JOIN trans AS T4 ON T3.account_id = T4.account_id WHERE STRFTIME('%Y', T4.date) = '1998' AND T4.operation = 'VYBER KARTOU'",
        "candidates": {
            "4": "SELECT AVG(amount)  FROM trans AS T1  INNER JOIN account AS T2 ON T1.account_id = T2.account_id  WHERE T1.operation = 'VYBER KARTOU' AND strftime('%Y', T1.date) = '2021' GROUP BY strftime('%m', T1.date)",
            "1": "SELECT AVG(T1.amount)  FROM trans AS T1  INNER JOIN account AS T2 ON T1.account_id = T2.account_id  WHERE T1.operation = 'VYBER KARTOU' AND strftime('%Y', T1.date) = '2021';",
            "5": "SELECT AVG(T1.amount) FROM trans AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE T1.operation = 'VYBER KARTOU' AND STRFTIME('%Y', T1.date) = '2021'",
            "2": "SELECT CAST(SUM(T1.amount) AS REAL) / COUNT(T1.account_id) FROM trans AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE STRFTIME('%Y', T1.date) = '2021' AND T1.operation = 'VYBER KARTOU'",
            "6": "SELECT AVG(amount) FROM trans WHERE STRFTIME('%Y', date) = '2021' AND operation = 'VYBER KARTOU'",
            "3": "SELECT AVG(T1.amount) FROM trans AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE T1.operation = 'VYBER KARTOU' AND STRFTIME('%Y', T1.date) = '1998'"
        }
    },
    {
        "question_id": 145,
        "database": "financial",
        "evidence": "Operation = 'VYBER KARTOU' refers to credit card withdrawal",
        "question": "Who are the account holder identification numbers whose who have transactions on the credit card with the amount is less than the average, in 1998?",
        "schema_used": {
            "trans": [
                "amount",
                "date",
                "account_id",
                "operation"
            ],
            "account": [
                "account_id"
            ]
        },
        "gold": "SELECT T1.account_id FROM trans AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE STRFTIME('%Y', T1.date) = '1998' AND T1.operation = 'VYBER KARTOU' AND T1.amount < (SELECT AVG(amount) FROM trans WHERE STRFTIME('%Y', date) = '1998')",
        "candidates": {
            "4": "SELECT T1.account_id  FROM trans AS T1  WHERE T1.operation = 'VYBER KARTOU'  AND T1.amount < (SELECT AVG(amount) FROM trans WHERE date LIKE '1998%')  AND T1.date LIKE '1998%';",
            "5": "SELECT account_id FROM trans WHERE strftime('%Y', date) = '1998' AND operation = 'VYBER KARTOU' AND amount < (SELECT AVG(amount) FROM trans WHERE strftime('%Y', date) = '1998' AND operation = 'VYBER KARTOU')",
            "2": "SELECT T1.account_id FROM trans AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE T1.operation = 'VYBER KARTOU' AND T1.amount < ( SELECT AVG(amount) FROM trans WHERE strftime('%Y', date) = '1998' ) AND strftime('%Y', T1.date) = '1998'",
            "6": "SELECT account_id FROM trans WHERE operation = 'VYBER KARTOU' AND amount < (SELECT avg(amount) FROM trans) AND strftime('%Y', date) = '1998'",
            "1": "SELECT T1.account_id FROM trans AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE T1.operation = 'VYBER KARTOU'    AND T1.date BETWEEN '1998-01-01' AND '1998-12-31'   AND T1.amount < (SELECT AVG(amount) FROM trans WHERE operation = 'VYBER KARTOU' AND date BETWEEN '1998-01-01' AND '1998-12-31') GROUP BY T1.account_id;",
            "3": "SELECT DISTINCT account_id FROM trans WHERE date LIKE '1998%' AND amount < (SELECT AVG(amount) FROM trans)"
        }
    },
    {
        "question_id": 146,
        "database": "financial",
        "evidence": "Female refers to gender = 'F'",
        "question": "Who are the female account holders who own credit cards and also have loans?",
        "schema_used": {
            "client": [
                "client_id",
                "gender"
            ],
            "disp": [
                "client_id",
                "account_id",
                "disp_id"
            ],
            "account": [
                "account_id"
            ],
            "loan": [
                "account_id"
            ],
            "card": [
                "disp_id"
            ]
        },
        "gold": "SELECT T1.client_id FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN account AS T5 ON T2.account_id = T5.account_id INNER JOIN loan AS T3 ON T5.account_id = T3.account_id INNER JOIN card AS T4 ON T2.disp_id = T4.disp_id WHERE T1.gender = 'F'",
        "candidates": {
            "4": "SELECT DISTINCT c.client_id FROM client AS c INNER JOIN disp AS d ON c.client_id = d.client_id INNER JOIN card AS cd ON d.disp_id = cd.disp_id INNER JOIN loan AS l ON d.account_id = l.account_id WHERE c.gender = 'F'",
            "1": "SELECT DISTINCT c.client_id FROM client AS c INNER JOIN disp AS d ON c.client_id = d.client_id INNER JOIN loan AS l ON d.account_id = l.account_id INNER JOIN card AS cd ON d.disp_id = cd.disp_id WHERE c.gender = 'F'",
            "5": "SELECT T1.client_id FROM client AS T1 INNER JOIN disp AS T2   ON T1.client_id = T2.client_id INNER JOIN account AS T3   ON T2.account_id = T3.account_id INNER JOIN loan AS T4   ON T3.account_id = T4.account_id INNER JOIN card AS T5   ON T2.disp_id = T5.disp_id WHERE   T1.gender = 'F';",
            "2": "SELECT T1.client_id FROM client AS T1 INNER JOIN disp AS T2   ON T1.client_id = T2.client_id INNER JOIN account AS T3   ON T2.account_id = T3.account_id INNER JOIN loan AS T4   ON T3.account_id = T4.account_id INNER JOIN card AS T5   ON T2.disp_id = T5.disp_id WHERE   T1.gender = 'F';",
            "6": "SELECT T1.client_id FROM client AS T1 JOIN disp AS T2 ON T1.client_id  =  T2.client_id JOIN card AS T3 ON T2.disp_id  =  T3.disp_id JOIN loan AS T4 ON T2.account_id  =  T4.account_id WHERE T1.gender  =  'F'",
            "3": "SELECT DISTINCT   T1.client_id FROM client AS T1 INNER JOIN disp AS T2   ON T1.client_id = T2.client_id INNER JOIN card AS T3   ON T2.disp_id = T3.disp_id INNER JOIN loan AS T4   ON T2.account_id = T4.account_id WHERE   T1.gender = 'F';"
        }
    },
    {
        "question_id": 147,
        "database": "financial",
        "evidence": "Female refers to gender = 'F'; A3 contains the region 'south Bohemia'",
        "question": "How many female clients' accounts are in the region of South Bohemia?",
        "schema_used": {
            "client": [
                "client_id",
                "district_id",
                "gender"
            ],
            "district": [
                "district_id",
                "a3"
            ]
        },
        "gold": "SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'F' AND T2.A3 = 'south Bohemia'",
        "candidates": {
            "4": "SELECT COUNT(client_id)  FROM client AS T1  INNER JOIN district AS T2 ON T1.district_id = T2.district_id  WHERE T2.A3 = 'south Bohemia' AND T1.gender = 'F';",
            "1": "SELECT COUNT(client_id)  FROM client AS T1  INNER JOIN district AS T2 ON T1.district_id = T2.district_id  WHERE T2.A3 = 'south Bohemia' AND T1.gender = 'F';",
            "5": "SELECT COUNT(*) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A3 = 'south Bohemia' AND T1.gender = 'F'",
            "2": "SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'F' AND T2.A3 = 'south Bohemia'",
            "6": "SELECT COUNT(T1.client_id) FROM client AS T1 JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A3 = 'south Bohemia' AND T1.gender = 'F'",
            "3": "SELECT   COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T2   ON T1.district_id = T2.district_id WHERE   T2.A3 = 'south Bohemia' AND T1.gender = 'F';"
        }
    },
    {
        "question_id": 148,
        "database": "financial",
        "evidence": "District refers to column A2; when the account type = 'OWNER', it's eligible for loans",
        "question": "Please list the accounts whose district is Tabor that are eligible for loans.",
        "schema_used": {
            "account": [
                "account_id",
                "district_id"
            ],
            "district": [
                "district_id",
                "a2"
            ],
            "disp": [
                "account_id",
                "type"
            ]
        },
        "gold": "SELECT T2.account_id FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id INNER JOIN disp AS T3 ON T2.account_id = T3.account_id WHERE T3.type = 'OWNER' AND T1.A2 = 'Tabor'",
        "candidates": {
            "4": "SELECT account.account_id  FROM account  JOIN district ON account.district_id = district.district_id  JOIN disp ON account.account_id = disp.account_id  WHERE district.A2 = 'Tabor' AND disp.type = 'OWNER';",
            "1": "SELECT account_id  FROM account  JOIN district ON account.district_id = district.district_id  JOIN disp ON account.account_id = disp.account_id WHERE district.A2 = 'Tabor' AND disp.type = 'OWNER';",
            "2": "SELECT T1.account_id FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN disp AS T3 ON T1.account_id = T3.account_id WHERE T2.A2 = 'Tabor' AND T3.type = 'OWNER'",
            "5": "SELECT T1.account_id FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN disp AS T3 ON T1.account_id = T3.account_id WHERE T2.A2 = 'Tabor' AND T3.type = 'OWNER'",
            "6": "SELECT T1.account_id FROM account AS T1 JOIN district AS T2 ON T1.district_id  =  T2.district_id JOIN disp AS T3 ON T1.account_id  =  T3.account_id WHERE T2.A2  =  'Tabor' AND T3.type  =  'OWNER'",
            "3": "SELECT   T1.account_id FROM account AS T1 INNER JOIN district AS T2   ON T1.district_id = T2.district_id INNER JOIN disp AS T3   ON T1.account_id = T3.account_id WHERE   T2.A2 = 'Tabor' AND T3.type = 'OWNER';"
        }
    },
    {
        "question_id": 149,
        "database": "financial",
        "evidence": "A11 represents the average salary; Salary and income share the similar meanings; when the account type = 'OWNER', it's eligible for loans",
        "question": "Please list the account types that are not eligible for loans, and the average income of residents in the district where the account is located exceeds $8000 but is no more than $9000.",
        "schema_used": {
            "disp": [
                "type",
                "account_id"
            ],
            "district": [
                "district_id",
                "a11"
            ],
            "account": [
                "district_id",
                "account_id"
            ]
        },
        "gold": "SELECT T3.type FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id INNER JOIN disp AS T3 ON T2.account_id = T3.account_id WHERE T3.type != 'OWNER' AND T1.A11 BETWEEN 8000 AND 9000",
        "candidates": {
            "4": "SELECT DISTINCT T1.frequency FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A11 > 8000 AND T2.A11 <= 9000 AND T1.account_id NOT IN (SELECT account_id FROM loan);",
            "2": "SELECT T1.frequency FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A11 > 8000 AND T2.A11 <= 9000 EXCEPT SELECT T1.frequency FROM account AS T1 INNER JOIN loan AS T3 ON T1.account_id = T3.account_id",
            "5": "SELECT T1.frequency FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A11 > 8000 AND T2.A11 <= 9000 EXCEPT SELECT T1.frequency FROM account AS T1 INNER JOIN loan AS T3 ON T1.account_id = T3.account_id",
            "1": "SELECT DISTINCT T1.frequency FROM account AS T1 JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A11 > 8000 AND T2.A11 <= 9000 AND T1.account_id NOT IN (     SELECT account_id      FROM loan     WHERE status = 'OWNER' )",
            "6": "SELECT T1.frequency FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A11 BETWEEN 8000 AND 9000 EXCEPT SELECT T3.frequency FROM account AS T3 INNER JOIN loan AS T4 ON T3.account_id = T4.account_id INNER JOIN district AS T5 ON T3.district_id = T5.district_id WHERE T5.A11 BETWEEN 8000 AND 9000",
            "3": "SELECT DISTINCT T1.frequency FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A11 > 8000 AND T2.A11 <= 9000 EXCEPT SELECT DISTINCT T1.frequency FROM account AS T1 INNER JOIN loan AS T3 ON T1.account_id = T3.account_id INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A11 > 8000 AND T2.A11 <= 9000"
        }
    },
    {
        "question_id": 150,
        "database": "financial",
        "evidence": "A3 contains the region names; North Bohemia is a region.",
        "question": "How many accounts in North Bohemia has made a transaction with the partner's bank being AB?",
        "schema_used": {
            "account": [
                "account_id",
                "district_id"
            ],
            "district": [
                "district_id",
                "a3"
            ],
            "trans": [
                "account_id",
                "bank"
            ]
        },
        "gold": "SELECT COUNT(T2.account_id) FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id INNER JOIN trans AS T3 ON T2.account_id = T3.account_id WHERE T3.bank = 'AB' AND T1.A3 = 'north Bohemia'",
        "candidates": {
            "4": "SELECT COUNT(DISTINCT t.account_id) FROM trans AS t INNER JOIN account AS a ON t.account_id = a.account_id INNER JOIN district AS d ON a.district_id = d.district_id WHERE d.A3 = 'north bohemia' AND t.bank = 'AB';",
            "1": "SELECT COUNT(DISTINCT t.account_id) FROM trans AS t JOIN account AS a ON t.account_id = a.account_id JOIN district AS d ON a.district_id = d.district_id WHERE d.A3 = 'north bohemia' AND t.bank = 'AB';",
            "5": "SELECT COUNT(T1.account_id) FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN trans AS T3 ON T1.account_id = T3.account_id WHERE T2.A3 = 'North Bohemia' AND T3.bank = 'AB'",
            "2": "SELECT COUNT(T1.account_id) FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN trans AS T3 ON T1.account_id = T3.account_id WHERE T2.A3 = 'North Bohemia' AND T3.bank = 'AB'",
            "3": "SELECT COUNT(T1.account_id) FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN trans AS T3 ON T1.account_id = T3.account_id WHERE T2.A3 = 'north Bohemia' AND T3.bank = 'AB'",
            "6": "SELECT COUNT(T1.account_id) FROM account AS T1 JOIN district AS T2 ON T1.district_id = T2.district_id JOIN trans AS T3 ON T1.account_id = T3.account_id WHERE T2.A3 = 'north Bohemia' AND T3.bank = 'AB'"
        }
    },
    {
        "question_id": 151,
        "database": "financial",
        "evidence": "A2 refers to district name; type = 'VYDAJ' stands for withdrawal transactions",
        "question": "Please list the name of the districts with accounts that made withdrawal transactions.",
        "schema_used": {
            "district": [
                "a2",
                "district_id"
            ],
            "account": [
                "district_id",
                "account_id"
            ],
            "trans": [
                "account_id",
                "type"
            ]
        },
        "gold": "SELECT DISTINCT T1.A2 FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id INNER JOIN trans AS T3 ON T2.account_id = T3.account_id WHERE T3.type = 'VYDAJ'",
        "candidates": {
            "4": "SELECT DISTINCT T3.A2 FROM trans AS T1  INNER JOIN account AS T2 ON T1.account_id = T2.account_id  INNER JOIN district AS T3 ON T2.district_id = T3.district_id  WHERE T1.type = 'VYDAJ'",
            "1": "SELECT DISTINCT T3.A2  FROM trans AS T1  INNER JOIN account AS T2 ON T1.account_id = T2.account_id  INNER JOIN district AS T3 ON T2.district_id = T3.district_id  WHERE T1.type = 'VYDAJ';",
            "5": "SELECT T3.A2 FROM trans AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN district AS T3 ON T2.district_id = T3.district_id WHERE T1.type = 'VYDAJ' GROUP BY T3.A2",
            "2": "SELECT T3.A2 FROM trans AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN district AS T3 ON T2.district_id = T3.district_id WHERE T1.type = 'VYDAJ' GROUP BY T3.A2",
            "6": "SELECT T3.A2 FROM trans AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN district AS T3 ON T2.district_id = T3.district_id WHERE T1.type = 'VYDAJ'",
            "3": "SELECT DISTINCT T3.A2 FROM trans AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN district AS T3 ON T2.district_id = T3.district_id WHERE T1.type = 'VYDAJ'"
        }
    },
    {
        "question_id": 152,
        "database": "financial",
        "evidence": "A3 refers to region names; A15 stands for the average number of crimes commited in 1995.",
        "question": "What is the average number of crimes committed in 1995 in regions where the number exceeds 4000 and the region has accounts that are opened starting from the year 1997?",
        "schema_used": {
            "district": [
                "a15",
                "district_id"
            ],
            "account": [
                "district_id",
                "date"
            ]
        },
        "gold": "SELECT AVG(T1.A15) FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id WHERE STRFTIME('%Y', T2.date) >= '1997' AND T1.A15 > 4000",
        "candidates": {
            "4": "SELECT AVG(T2.A15)  FROM district AS T1  INNER JOIN account AS T2 ON T1.district_id = T2.district_id  WHERE T2.date >= '1997-01-01' AND T1.A15 > 4000;",
            "5": "SELECT CAST(AVG(T1.A15) AS REAL) FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id WHERE T1.A15 > 4000 AND STRFTIME('%Y', T2.date) >= '1997'",
            "2": "SELECT CAST(AVG(T2.A15) AS REAL) FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A15 > 4000 AND STRFTIME('%Y', T1.date) >= '1997'",
            "1": "SELECT AVG(T2.A15)  FROM district AS T1  INNER JOIN account AS T3 ON T1.district_id = T3.district_id  WHERE T2.A15 > 4000 AND strftime('%Y', T3.date) >= '1997'  GROUP BY T1.A3;",
            "6": "SELECT avg(A15) FROM district AS T1 JOIN account AS T2 ON T1.district_id  =  T2.district_id WHERE T1.A15  >  4000 AND T2.date LIKE \"1997%\"",
            "3": "SELECT AVG(T1.A15) FROM district AS T1 INNER JOIN account AS T2   ON T1.district_id = T2.district_id WHERE   T1.A15 > 4000 AND T2.date >= '1997-01-01';"
        }
    },
    {
        "question_id": 153,
        "database": "financial",
        "evidence": "when the account type = 'OWNER', it's eligible for loan",
        "question": "How many 'classic' cards are eligible for loan?",
        "schema_used": {
            "card": [
                "card_id",
                "disp_id",
                "type"
            ],
            "disp": [
                "disp_id",
                "type"
            ]
        },
        "gold": "SELECT COUNT(T1.card_id) FROM card AS T1 INNER JOIN disp AS T2 ON T1.disp_id = T2.disp_id WHERE T1.type = 'classic' AND T2.type = 'OWNER'",
        "candidates": {
            "4": "SELECT COUNT(*)  FROM card AS T1  INNER JOIN disp AS T2 ON T1.disp_id = T2.disp_id  WHERE T1.type = 'classic' AND T2.type = 'OWNER';",
            "1": "SELECT COUNT(*) FROM card AS T1 INNER JOIN disp AS T2 ON T1.disp_id = T2.disp_id WHERE T1.type = 'classic' AND T2.type = 'OWNER';",
            "2": "SELECT COUNT(T1.type) FROM card AS T1 INNER JOIN disp AS T2 ON T1.disp_id = T2.disp_id WHERE T1.type = 'classic' AND T2.type = 'OWNER'",
            "5": "SELECT COUNT(T1.type) FROM card AS T1 INNER JOIN disp AS T2 ON T1.disp_id = T2.disp_id INNER JOIN account AS T3 ON T2.account_id = T3.account_id WHERE T1.type = 'classic' AND T3.account_type = 'OWNER'",
            "3": "SELECT   COUNT(T1.type) FROM card AS T1 INNER JOIN disp AS T2   ON T1.disp_id = T2.disp_id WHERE   T1.type = 'classic';",
            "6": "SELECT count(*) FROM card AS T1 JOIN disp AS T2 ON T1.disp_id  =  T2.disp_id WHERE T1.type  =  'classic' AND T2.type  =  'OWNER'"
        }
    },
    {
        "question_id": 154,
        "database": "financial",
        "evidence": "District data appears in the A2; Male means that gender = 'M'",
        "question": "How many male clients in 'Hl.m. Praha' district?",
        "schema_used": {
            "client": [
                "client_id",
                "district_id",
                "gender"
            ],
            "district": [
                "district_id",
                "a2"
            ]
        },
        "gold": "SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.gender = 'M' AND T2.A2 = 'Hl.m. Praha'",
        "candidates": {
            "4": "SELECT COUNT(*)  FROM client AS T1  INNER JOIN district AS T2  ON T1.district_id = T2.district_id  WHERE T2.A2 = 'Hl.m. Praha' AND T1.gender = 'M';",
            "1": "SELECT COUNT(*)  FROM client AS T1  INNER JOIN district AS T2  ON T1.district_id = T2.district_id  WHERE T2.A2 = 'Hl.m. Praha' AND T1.gender = 'M';",
            "5": "SELECT COUNT(*) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A2 = 'Hl.m. Praha' AND T1.gender = 'M'",
            "2": "SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A2 = 'Hl.m. Praha' AND T1.gender = 'M'",
            "6": "SELECT count(*) FROM client AS t1 JOIN district AS t2 ON t1.district_id  =  t2.district_id WHERE t2.A2  =  'Hl.m. Praha' AND t1.gender  =  'M'",
            "3": "SELECT   COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T2   ON T1.district_id = T2.district_id WHERE   T2.A2 = 'Hl.m. Praha' AND T1.gender = 'M';"
        }
    },
    {
        "question_id": 155,
        "database": "financial",
        "evidence": "Percent of Gold = [ count(type = 'gold' and issued date < 1998) / count(all cards)] * 100%",
        "question": "How many percent of 'Gold' cards were issued prior to 1998?",
        "schema_used": {
            "card": [
                "card_id",
                "type",
                "issued"
            ]
        },
        "gold": "SELECT CAST(SUM(type = 'gold' AND STRFTIME('%Y', issued) < '1998') AS REAL) * 100 / COUNT(card_id) FROM card",
        "candidates": {
            "4": "SELECT CAST(SUM(CASE WHEN type = 'gold' AND issued < '1998-01-01' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*)  FROM card",
            "1": "SELECT CAST(SUM(CASE WHEN type = 'gold' AND issued < '1998-01-01' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*)  FROM card",
            "2": "SELECT CAST(SUM(CASE WHEN type = 'gold' AND STRFTIME('%Y', issued) < '1998' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM card",
            "5": "SELECT CAST(SUM(CASE WHEN type = 'gold' AND STRFTIME('%Y', issued) < '1998' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM card",
            "3": "SELECT CAST(SUM(CASE WHEN type = 'gold' AND STRFTIME('%Y', issued) < '1998' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(card_id) FROM card",
            "6": "SELECT CAST(SUM(CASE WHEN TYPE = 'gold' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM card WHERE STRFTIME('%Y', issued) < '1998'"
        }
    },
    {
        "question_id": 156,
        "database": "financial",
        "evidence": "",
        "question": "Who is the owner of the account with the largest loan amount?",
        "schema_used": {
            "disp": [
                "client_id",
                "account_id",
                "type"
            ],
            "account": [
                "account_id"
            ],
            "loan": [
                "account_id",
                "amount"
            ]
        },
        "gold": "SELECT T1.client_id FROM disp AS T1 INNER JOIN account AS T3 ON T1.account_id = T3.account_id INNER JOIN loan AS T2 ON T3.account_id = T2.account_id WHERE T1.type = 'OWNER' ORDER BY T2.amount DESC LIMIT 1",
        "candidates": {
            "4": "SELECT T2.gender  FROM loan AS T1  INNER JOIN disp AS T3 ON T1.account_id = T3.account_id  INNER JOIN client AS T2 ON T3.client_id = T2.client_id  ORDER BY T1.amount DESC  LIMIT 1;",
            "2": "SELECT T1.gender FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN loan AS T3 ON T2.account_id = T3.account_id ORDER BY T3.amount DESC LIMIT 1",
            "1": "SELECT T1.client_id, T2.gender  FROM disp AS T1  INNER JOIN client AS T2 ON T1.client_id = T2.client_id  WHERE T1.account_id = (     SELECT account_id      FROM loan      ORDER BY amount DESC      LIMIT 1 )",
            "5": "SELECT T1.client_id FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN loan AS T3 ON T2.account_id = T3.account_id ORDER BY T3.amount DESC LIMIT 1",
            "6": "SELECT T3.client_id FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN disp AS T3 ON T2.account_id = T3.account_id WHERE T3.type  =  \"OWNER\" ORDER BY T1.amount DESC LIMIT 1",
            "3": "SELECT   T3.gender FROM loan AS T1 INNER JOIN disp AS T2   ON T1.account_id = T2.account_id INNER JOIN client AS T3   ON T2.client_id = T3.client_id WHERE   T2.type = 'OWNER' ORDER BY   T1.amount DESC LIMIT 1;"
        }
    },
    {
        "question_id": 157,
        "database": "financial",
        "evidence": "A15 contains information about number of committed crimes in 1995",
        "question": "What is the number of committed crimes in 1995 in the district of the account with the id 532?",
        "schema_used": {
            "district": [
                "a15",
                "district_id"
            ],
            "account": [
                "district_id",
                "account_id"
            ]
        },
        "gold": "SELECT T1.A15 FROM district AS T1 INNER JOIN `account` AS T2 ON T1.district_id = T2.district_id WHERE T2.account_id = 532",
        "candidates": {
            "4": "SELECT T2.A15  FROM account AS T1  INNER JOIN district AS T2  ON T1.district_id = T2.district_id  WHERE T1.account_id = 532;",
            "5": "SELECT T1.A15 FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id WHERE T2.account_id = 532",
            "2": "SELECT T1.A15 FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id WHERE T2.account_id = 532",
            "6": "SELECT T2.A15 FROM account AS T1 JOIN district AS T2 ON T1.district_id  =  T2.district_id WHERE T1.account_id  =  532",
            "3": "SELECT   T2.A15 FROM account AS T1 INNER JOIN district AS T2   ON T1.district_id = T2.district_id WHERE   T1.account_id = 532;",
            "1": "SELECT T2.A15  FROM account AS T1  INNER JOIN district AS T2  ON T1.district_id = T2.district_id  WHERE T1.account_id = 532;"
        }
    },
    {
        "question_id": 158,
        "database": "financial",
        "evidence": "",
        "question": "What is the district Id of the account that placed the order with the id 33333?",
        "schema_used": {
            "district": [
                "district_id"
            ],
            "order": [
                "account_id",
                "order_id"
            ],
            "account": [
                "account_id",
                "district_id"
            ]
        },
        "gold": "SELECT T3.district_id FROM `order` AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN district AS T3 ON T2.district_id = T3.district_id WHERE T1.order_id = 33333",
        "candidates": {
            "4": "SELECT T1.district_id  FROM order AS T2  INNER JOIN account AS T1  ON T2.account_id = T1.account_id  WHERE T2.order_id = 33333;",
            "1": "SELECT T1.district_id  FROM account AS T1  INNER JOIN \"order\" AS T2  ON T1.account_id = T2.account_id  WHERE T2.order_id = 33333;",
            "5": "SELECT T2.district_id FROM `order` AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE T1.order_id = 33333",
            "2": "SELECT T2.district_id FROM order AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE T1.order_id = 33333",
            "6": "SELECT T2.district_id FROM \"order\" AS T1 JOIN account AS T2 ON T1.account_id  =  T2.account_id WHERE T1.order_id  =  33333",
            "3": "SELECT T2.district_id FROM \"order\" AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE T1.order_id = 33333"
        }
    },
    {
        "question_id": 159,
        "database": "financial",
        "evidence": "operation = 'VYBER' refers to withdrawal in cash",
        "question": "List all the withdrawals in cash transactions that the client with the id 3356 makes.",
        "schema_used": {
            "trans": [
                "trans_id",
                "account_id",
                "operation"
            ],
            "client": [
                "client_id"
            ],
            "disp": [
                "client_id",
                "account_id"
            ],
            "account": [
                "account_id"
            ]
        },
        "gold": "SELECT T4.trans_id FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN account AS T3 ON T2.account_id = T3.account_id INNER JOIN trans AS T4 ON T3.account_id = T4.account_id WHERE T1.client_id = 3356 AND T4.operation = 'VYBER'",
        "candidates": {
            "4": "SELECT t.trans_id, t.account_id, t.operation FROM trans AS t JOIN disp AS d ON t.account_id = d.account_id WHERE d.client_id = 3356 AND t.operation = 'VYBER';",
            "1": "SELECT t.trans_id, t.account_id, t.operation, t.amount FROM trans t JOIN disp d ON t.account_id = d.account_id WHERE d.client_id = 3356 AND t.operation = 'VYBER';",
            "2": "SELECT T1.operation FROM trans AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN disp AS T3 ON T2.account_id = T3.account_id WHERE T3.client_id = 3356 AND T1.operation = 'VYBER'",
            "5": "SELECT T1.trans_id FROM trans AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN disp AS T3 ON T2.account_id = T3.account_id WHERE T3.client_id = 3356 AND T1.operation = 'VYBER'",
            "6": "SELECT T1.operation FROM trans AS T1 JOIN disp AS T2 ON T1.account_id = T2.account_id WHERE T2.client_id = 3356 AND T1.operation = 'VYBER'",
            "3": "SELECT   trans_id FROM trans WHERE   account_id = (     SELECT       account_id     FROM disp     WHERE       client_id = 3356   )   AND operation = 'VYBER';"
        }
    },
    {
        "question_id": 160,
        "database": "financial",
        "evidence": "frequency = 'POPLATEK TYDNE' stands for weekly issuance",
        "question": "Among the weekly issuance accounts, how many have a loan of under 200000?",
        "schema_used": {
            "loan": [
                "account_id",
                "amount"
            ],
            "account": [
                "account_id",
                "frequency"
            ]
        },
        "gold": "SELECT COUNT(T1.account_id) FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE T2.frequency = 'POPLATEK TYDNE' AND T1.amount < 200000",
        "candidates": {
            "4": "SELECT COUNT(l.account_id)  FROM loan l  JOIN account a ON l.account_id = a.account_id  WHERE a.frequency = 'POPLATEK TYDNE' AND l.amount < 200000;",
            "1": "SELECT COUNT(l.account_id) FROM loan l JOIN account a ON l.account_id = a.account_id WHERE a.frequency = 'POPLATEK TYDNE' AND l.amount < 200000;",
            "5": "SELECT COUNT(*) FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE T2.frequency = 'POPLATEK TYDNE' AND T1.amount < 200000",
            "2": "SELECT COUNT(T1.account_id) FROM account AS T1 INNER JOIN loan AS T2 ON T1.account_id = T2.account_id WHERE T1.frequency = 'POPLATEK TYDNE' AND T2.amount < 200000",
            "6": "SELECT count(*) FROM account AS T1 JOIN loan AS T2 ON T1.account_id  =  T2.account_id WHERE T1.frequency  =  'POPLATEK TYDNE' AND T2.amount  <  200000",
            "3": "SELECT   COUNT(T1.account_id) FROM account AS T1 INNER JOIN loan AS T2   ON T1.account_id = T2.account_id WHERE   T1.frequency = 'POPLATEK TYDNE' AND T2.amount < 200000;"
        }
    },
    {
        "question_id": 161,
        "database": "financial",
        "evidence": "",
        "question": "What type of credit card does the client with the id 13539 own?",
        "schema_used": {
            "card": [
                "type",
                "disp_id"
            ],
            "disp": [
                "client_id",
                "disp_id"
            ],
            "client": [
                "client_id"
            ]
        },
        "gold": "SELECT T3.type FROM disp AS T1 INNER JOIN client AS T2 ON T1.client_id = T2.client_id INNER JOIN card AS T3 ON T1.disp_id = T3.disp_id WHERE T2.client_id = 13539",
        "candidates": {
            "1": "SELECT T2.type  FROM disp AS T1  INNER JOIN card AS T2  ON T1.disp_id = T2.disp_id  WHERE T1.client_id = 13539;",
            "4": "SELECT T2.type  FROM disp AS T1  INNER JOIN card AS T2  ON T1.disp_id = T2.disp_id  WHERE T1.client_id = 13539;",
            "5": "SELECT T1.type FROM card AS T1 INNER JOIN disp AS T2 ON T1.disp_id = T2.disp_id WHERE T2.client_id = 13539",
            "2": "SELECT T1.type FROM card AS T1 INNER JOIN disp AS T2 ON T1.disp_id = T2.disp_id WHERE T2.client_id = 13539",
            "6": "SELECT T2.type FROM disp AS T1 JOIN card AS T2 ON T1.disp_id = T2.disp_id WHERE T1.client_id = 13539",
            "3": "SELECT T2.type FROM disp AS T1 JOIN card AS T2 ON T1.disp_id = T2.disp_id WHERE T1.client_id = 13539"
        }
    },
    {
        "question_id": 162,
        "database": "financial",
        "evidence": "A3 refers to region",
        "question": "What is the region of the client with the id 3541 from?",
        "schema_used": {
            "district": [
                "a3",
                "district_id"
            ],
            "client": [
                "district_id",
                "client_id"
            ]
        },
        "gold": "SELECT T1.A3 FROM district AS T1 INNER JOIN client AS T2 ON T1.district_id = T2.district_id WHERE T2.client_id = 3541",
        "candidates": {
            "4": "SELECT T2.A3 FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.client_id = 3541",
            "1": "SELECT T2.A3 FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.client_id = 3541",
            "2": "SELECT T1.A3 FROM district AS T1 INNER JOIN client AS T2 ON T1.district_id = T2.district_id WHERE T2.client_id = 3541",
            "5": "SELECT T2.A3 FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.client_id = 3541",
            "6": "SELECT T2.A3 FROM client AS T1 JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.client_id = 3541",
            "3": "SELECT   T2.A3 FROM client AS T1 INNER JOIN district AS T2   ON T1.district_id = T2.district_id WHERE   T1.client_id = 3541;"
        }
    },
    {
        "question_id": 163,
        "database": "financial",
        "evidence": "status = 'A' refers to loan contracts finished with no problems",
        "question": "Which district has the most accounts with loan contracts finished with no problems?",
        "schema_used": {
            "district": [
                "a2",
                "district_id"
            ],
            "account": [
                "district_id",
                "account_id"
            ],
            "loan": [
                "account_id",
                "status"
            ]
        },
        "gold": "SELECT T1.A2 FROM District AS T1 INNER JOIN Account AS T2 ON T1.District_id = T2.District_id INNER JOIN Loan AS T3 ON T2.Account_id = T3.Account_id WHERE T3.status = 'A' GROUP BY T1.District_id ORDER BY COUNT(T2.Account_id) DESC LIMIT 1",
        "candidates": {
            "4": "SELECT T1.district_id, T1.A2  FROM district AS T1  INNER JOIN account AS T2 ON T1.district_id = T2.district_id  INNER JOIN loan AS T3 ON T2.account_id = T3.account_id  WHERE T3.status = 'A'  GROUP BY T1.district_id, T1.A2  ORDER BY COUNT(T2.account_id) DESC  LIMIT 1;",
            "1": "SELECT d.A2 AS district_name FROM loan l JOIN account a ON l.account_id = a.account_id JOIN district d ON a.district_id = d.district_id WHERE l.status = 'A' GROUP BY d.A2 ORDER BY COUNT(l.account_id) DESC LIMIT 1;",
            "5": "SELECT A2 FROM district WHERE district_id IN (SELECT district_id FROM account WHERE account_id IN (SELECT account_id FROM loan WHERE status = 'A')) GROUP BY district_id ORDER BY COUNT(*) DESC LIMIT 1",
            "2": "SELECT T1.A2 FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id INNER JOIN loan AS T3 ON T2.account_id = T3.account_id WHERE T3.status = 'A' GROUP BY T1.A2 ORDER BY COUNT(T3.account_id) DESC LIMIT 1",
            "6": "SELECT T3.A2 FROM loan AS T1 JOIN account AS T2 ON T1.account_id  =  T2.account_id JOIN district AS T3 ON T2.district_id  =  T3.district_id WHERE T1.status  =  'A' GROUP BY T3.A2 ORDER BY count(*) DESC LIMIT 1",
            "3": "SELECT   T2.A2 FROM loan AS T1 INNER JOIN account AS T3   ON T1.account_id = T3.account_id INNER JOIN district AS T2   ON T3.district_id = T2.district_id WHERE   T1.status = 'A' GROUP BY   T2.A2 ORDER BY   COUNT(T3.account_id) DESC LIMIT 1;"
        }
    },
    {
        "question_id": 164,
        "database": "financial",
        "evidence": "",
        "question": "Who placed the order with the id 32423?",
        "schema_used": {
            "client": [
                "client_id"
            ],
            "order": [
                "account_id",
                "order_id"
            ],
            "account": [
                "account_id"
            ],
            "disp": [
                "account_id",
                "client_id"
            ]
        },
        "gold": "SELECT T3.client_id FROM `order` AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN disp AS T4 ON T4.account_id = T2.account_id  INNER JOIN client AS T3 ON T4.client_id = T3.client_id WHERE T1.order_id = 32423",
        "candidates": {
            "4": "SELECT T1.client_id FROM disp AS T1 INNER JOIN `order` AS T2 ON T1.account_id = T2.account_id WHERE T2.order_id = 32423",
            "1": "SELECT T1.client_id FROM disp AS T1  INNER JOIN order AS T2 ON T1.account_id = T2.account_id  WHERE T2.order_id = 32423;",
            "5": "SELECT T1.client_id FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN order AS T3 ON T2.account_id = T3.account_id WHERE T3.order_id = 32423",
            "2": "SELECT T1.client_id FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN \"order\" AS T3 ON T2.account_id = T3.account_id WHERE T3.order_id = 32423",
            "6": "SELECT T3.client_id FROM order AS T1 JOIN disp AS T2 ON T1.account_id  =  T2.account_id JOIN client AS T3 ON T2.client_id  =  T3.client_id WHERE T1.order_id  =  32423",
            "3": "SELECT   T2.client_id FROM order AS T1 INNER JOIN disp AS T2   ON T1.account_id = T2.account_id WHERE   T1.order_id = 32423;"
        }
    },
    {
        "question_id": 165,
        "database": "financial",
        "evidence": "",
        "question": "Please list all the transactions made by accounts from district 5.",
        "schema_used": {
            "trans": [
                "trans_id",
                "account_id"
            ],
            "district": [
                "district_id"
            ],
            "account": [
                "district_id",
                "account_id"
            ]
        },
        "gold": "SELECT T3.trans_id FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id INNER JOIN trans AS T3 ON T2.account_id = T3.account_id WHERE T1.district_id = 5",
        "candidates": {
            "4": "SELECT t.trans_id FROM trans AS t INNER JOIN account AS a ON t.account_id = a.account_id WHERE a.district_id = 5;",
            "1": "SELECT T1.trans_id FROM trans AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE T2.district_id = 5;",
            "2": "SELECT T1.trans_id  FROM trans AS T1  INNER JOIN account AS T2 ON T1.account_id = T2.account_id  WHERE T2.district_id = 5",
            "5": "SELECT T1.trans_id  FROM  trans AS T1  INNER JOIN  account AS T2  ON  T1.account_id = T2.account_id  WHERE  T2.district_id = 5",
            "6": "SELECT T1.trans_id FROM trans AS T1 JOIN account AS T2 ON T1.account_id  =  T2.account_id WHERE T2.district_id  =  5",
            "3": "SELECT T1.trans_id FROM trans AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE T2.district_id = 5"
        }
    },
    {
        "question_id": 166,
        "database": "financial",
        "evidence": "",
        "question": "How many of the accounts are from Jesenik district?",
        "schema_used": {
            "account": [
                "account_id",
                "district_id"
            ],
            "district": [
                "district_id",
                "a2"
            ]
        },
        "gold": "SELECT COUNT(T2.account_id) FROM district AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id WHERE T1.A2 = 'Jesenik'",
        "candidates": {
            "4": "SELECT COUNT(*)  FROM account AS T1  INNER JOIN district AS T2  ON T1.district_id = T2.district_id  WHERE T2.A2 = 'Jesenik';",
            "1": "SELECT COUNT(*)  FROM account AS T1  INNER JOIN district AS T2  ON T1.district_id = T2.district_id  WHERE T2.A2 = 'Jesenik';",
            "5": "SELECT COUNT(*) FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A2 = 'Jesenik'",
            "2": "SELECT COUNT(T1.account_id) FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A2 = 'Jesenik'",
            "6": "SELECT COUNT(*) FROM account AS T1 JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A2 = \"Jesenik\"",
            "3": "SELECT COUNT(T1.account_id) FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A2 = 'Jesenik'"
        }
    },
    {
        "question_id": 167,
        "database": "financial",
        "evidence": "After 1996 means date > = '1997-01-01",
        "question": "List all the clients' IDs whose junior credit cards were issued after 1996.",
        "schema_used": {
            "disp": [
                "client_id",
                "disp_id"
            ],
            "card": [
                "disp_id",
                "type",
                "issued"
            ]
        },
        "gold": "SELECT T2.client_id FROM card AS T1 INNER JOIN disp AS T2 ON T1.disp_id = T2.disp_id WHERE T1.type = 'junior' AND T1.issued >= '1997-01-01'",
        "candidates": {
            "4": "SELECT T1.client_id  FROM disp AS T1  INNER JOIN card AS T2 ON T1.disp_id = T2.disp_id  WHERE T2.type = 'junior' AND T2.issued >= '1997-01-01'",
            "1": "SELECT DISTINCT T1.client_id  FROM disp AS T1  INNER JOIN card AS T2 ON T1.disp_id = T2.disp_id  WHERE T2.type = 'junior' AND T2.issued >= '1997-01-01';",
            "5": "SELECT T1.client_id FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN card AS T3 ON T2.disp_id = T3.disp_id WHERE T3.type = 'junior' AND T3.issued >= '1997-01-01'",
            "2": "SELECT T1.client_id FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN card AS T3 ON T2.disp_id = T3.disp_id WHERE T3.type = 'junior' AND T3.issued >= '1997-01-01'",
            "6": "SELECT T2.client_id FROM card AS T1 JOIN disp AS T2 ON T1.disp_id = T2.disp_id WHERE T1.type = \"junior\" AND T1.issued >= \"1997-01-01\"",
            "3": "SELECT T1.client_id FROM disp AS T1 INNER JOIN card AS T2 ON T1.disp_id = T2.disp_id WHERE T2.type = 'junior' AND T2.issued >= '1997-01-01'"
        }
    },
    {
        "question_id": 168,
        "database": "financial",
        "evidence": "Female refers to gender = 'F'; Woman and female are closed; Average salary can be found in A11",
        "question": "What percentage of clients who opened their accounts in the district with an average salary of over 10000 are women?",
        "schema_used": {
            "district": [
                "district_id",
                "a11"
            ],
            "client": [
                "district_id",
                "client_id",
                "gender"
            ]
        },
        "gold": "SELECT CAST(SUM(T2.gender = 'F') AS REAL) * 100 / COUNT(T2.client_id) FROM district AS T1 INNER JOIN client AS T2 ON T1.district_id = T2.district_id WHERE T1.A11 > 10000",
        "candidates": {
            "4": "SELECT CAST(SUM(CASE WHEN T1.gender = 'F' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.client_id)  FROM client AS T1  INNER JOIN account AS T2 ON T1.district_id = T2.district_id  INNER JOIN district AS T3 ON T1.district_id = T3.district_id  WHERE T3.A11 > 10000",
            "1": "SELECT CAST(SUM(CASE WHEN T1.gender = 'F' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.gender)  FROM client AS T1  INNER JOIN account AS T2 ON T1.district_id = T2.district_id  INNER JOIN district AS T3 ON T1.district_id = T3.district_id  WHERE T3.A11 > 10000;",
            "3": "SELECT CAST(SUM(CASE WHEN T1.gender = 'F' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A11 > 10000",
            "2": "SELECT CAST(SUM(CASE WHEN T1.gender = 'F' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*)  FROM client AS T1  INNER JOIN account AS T2 ON T1.district_id = T2.district_id  INNER JOIN district AS T3 ON T2.district_id = T3.district_id  WHERE T3.A11 > 10000",
            "5": "SELECT CAST(SUM(CASE WHEN T1.gender = 'F' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM client AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id INNER JOIN district AS T3 ON T2.district_id = T3.district_id WHERE T3.A11 > 10000",
            "6": "SELECT CAST(SUM(CASE WHEN T1.gender = 'F' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A11 > 10000"
        }
    },
    {
        "question_id": 169,
        "database": "financial",
        "evidence": "Growth rate = (sum of amount_1997 - sum of amount_1996) / (sum of amount_1996) * 100%; Male refers to gender = 'M'",
        "question": "What was the growth rate of the total amount of loans across all accounts for a male client between 1996 and 1997?",
        "schema_used": {
            "loan": [
                "account_id",
                "amount",
                "date"
            ],
            "account": [
                "account_id"
            ],
            "disp": [
                "account_id",
                "client_id",
                "type"
            ],
            "client": [
                "client_id",
                "gender"
            ]
        },
        "gold": "SELECT CAST((SUM(CASE WHEN STRFTIME('%Y', T1.date) = '1997' THEN T1.amount ELSE 0 END) - SUM(CASE WHEN STRFTIME('%Y', T1.date) = '1996' THEN T1.amount ELSE 0 END)) AS REAL) * 100 / SUM(CASE WHEN STRFTIME('%Y', T1.date) = '1996' THEN T1.amount ELSE 0 END) FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN disp AS T3 ON T3.account_id = T2.account_id INNER JOIN client AS T4 ON T4.client_id = T3.client_id WHERE T4.gender = 'M' AND T3.type = 'OWNER'",
        "candidates": {
            "4": "SELECT      ((SUM(CASE WHEN STRFTIME('%Y', l.date) = '1997' THEN l.amount ELSE 0 END) -        SUM(CASE WHEN STRFTIME('%Y', l.date) = '1996' THEN l.amount ELSE 0 END)) /       SUM(CASE WHEN STRFTIME('%Y', l.date) = '1996' THEN l.amount ELSE 0 END)) * 100 AS growth_rate FROM      loan l JOIN      disp d ON l.account_id = d.account_id JOIN      client c ON d.client_id = c.client_id WHERE      c.gender = 'M' AND      (STRFTIME('%Y', l.date) = '1996' OR STRFTIME('%Y', l.date) = '1997');",
            "5": "SELECT CAST(SUM(CASE WHEN STRFTIME('%Y', T1.date) = '1997' THEN T1.amount ELSE 0 END) - SUM(CASE WHEN STRFTIME('%Y', T1.date) = '1996' THEN T1.amount ELSE 0 END) AS REAL) * 100 / SUM(CASE WHEN STRFTIME('%Y', T1.date) = '1996' THEN T1.amount ELSE 0 END) FROM loan AS T1 INNER JOIN disp AS T2 ON T1.account_id = T2.account_id INNER JOIN client AS T3 ON T2.client_id = T3.client_id WHERE T3.gender = 'M'",
            "2": "SELECT CAST((SUM(CASE WHEN STRFTIME('%Y', T1.date) = '1997' THEN T1.amount ELSE 0 END) - SUM(CASE WHEN STRFTIME('%Y', T1.date) = '1996' THEN T1.amount ELSE 0 END)) AS REAL) * 100 / SUM(CASE WHEN STRFTIME('%Y', T1.date) = '1996' THEN T1.amount ELSE 0 END) FROM loan AS T1 INNER JOIN disp AS T2 ON T1.account_id = T2.account_id INNER JOIN client AS T3 ON T2.client_id = T3.client_id WHERE T3.gender = 'M'",
            "1": "SELECT WITH loans_1996 AS (     SELECT SUM(amount) AS total_amount_1996     FROM loan     INNER JOIN disp ON loan.account_id = disp.account_id     INNER JOIN client ON disp.client_id = client.client_id     WHERE client.gender = 'M' AND strftime('%Y', date) = '1996' ), loans_1997 AS (     SELECT SUM(amount) AS total_amount_1997     FROM loan     INNER JOIN disp ON loan.account_id = disp.account_id     INNER JOIN client ON disp.client_id = client.client_id     WHERE client.gender = 'M' AND strftime('%Y', date) = '1997' ) SELECT      ((total_amount_1997 - total_amount_1996) / total_amount_1996) * 100 AS growth_rate FROM loans_1996, loans_1997;",
            "6": "SELECT CAST(SUM(CASE WHEN T1.date LIKE '1997%' THEN T1.amount ELSE 0 END) - SUM(CASE WHEN T1.date LIKE '1996%' THEN T1.amount ELSE 0 END) AS REAL) * 100 / SUM(CASE WHEN T1.date LIKE '1996%' THEN T1.amount ELSE 0 END) FROM loan AS T1 INNER JOIN disp AS T2 ON T1.account_id = T2.account_id INNER JOIN client AS T3 ON T2.client_id = T3.client_id WHERE T3.gender = 'M'",
            "3": "SELECT   CAST(SUM(CASE WHEN T1.date LIKE '1997%' THEN T1.amount ELSE 0 END) - SUM(CASE WHEN T1.date LIKE '1996%' THEN T1.amount ELSE 0 END) AS REAL) * 100 / SUM(CASE WHEN T1.date LIKE '1996%' THEN T1.amount ELSE 0 END) FROM loan AS T1 INNER JOIN disp AS T2   ON T1.account_id = T2.account_id INNER JOIN client AS T3   ON T2.client_id = T3.client_id WHERE   T3.gender = 'M';"
        }
    },
    {
        "question_id": 170,
        "database": "financial",
        "evidence": "Operation = 'VYBER KARTOU' means credit card withdrawals",
        "question": "How many credit card withdrawals were recorded after 1995?",
        "schema_used": {
            "trans": [
                "account_id",
                "operation",
                "date"
            ]
        },
        "gold": "SELECT COUNT(account_id) FROM trans WHERE STRFTIME('%Y', date) > '1995' AND operation = 'VYBER KARTOU'",
        "candidates": {
            "4": "SELECT COUNT(*)  FROM trans  WHERE operation = 'VYBER KARTOU' AND date > '1995-12-31';",
            "1": "SELECT COUNT(*)  FROM trans  WHERE operation = 'VYBER KARTOU' AND date > '1995-12-31';",
            "5": "SELECT COUNT(*) FROM trans WHERE operation = 'VYBER KARTOU' AND strftime('%Y', date) > '1995'",
            "2": "SELECT COUNT(*) FROM trans WHERE operation = 'VYBER KARTOU' AND date > '1995-12-31'",
            "6": "SELECT count(*) FROM trans WHERE operation = 'VYBER KARTOU' AND date > '1995-12-31'",
            "3": "SELECT COUNT(trans_id) FROM trans WHERE operation = 'VYBER KARTOU' AND date > '1995-12-31'"
        }
    },
    {
        "question_id": 171,
        "database": "financial",
        "evidence": "Difference in no. of committed crimes between 2 regions = Total no. of committed crimes in 1996 in north Bohemia - Total no. of committed crimes in 1996 in e ast Bohemia. A3 refers to region. Data about no. of committed crimes 1996 appears in A16",
        "question": "What was the difference in the number of crimes committed in East and North Bohemia in 1996?",
        "schema_used": {
            "district": [
                "a16",
                "a3"
            ]
        },
        "gold": "SELECT SUM(IIF(A3 = 'east Bohemia', A16, 0)) - SUM(IIF(A3 = 'north Bohemia', A16, 0)) FROM district",
        "candidates": {
            "4": "SELECT      (SELECT A16 FROM district WHERE A3 = 'North Bohemia') -      (SELECT A16 FROM district WHERE A3 = 'East Bohemia')",
            "1": "SELECT      (SELECT A16 FROM district WHERE A3 = 'north Bohemia') -      (SELECT A16 FROM district WHERE A3 = 'east Bohemia') AS crime_difference;",
            "5": "SELECT SUM(CASE WHEN A3 = 'north Bohemia' THEN A16 ELSE 0 END) - SUM(CASE WHEN A3 = 'east Bohemia' THEN A16 ELSE 0 END) FROM district",
            "2": "SELECT SUM(CASE WHEN T1.A3 = 'north Bohemia' THEN T1.A16 ELSE 0 END) - SUM(CASE WHEN T1.A3 = 'East Bohemia' THEN T1.A16 ELSE 0 END) FROM district AS T1",
            "6": "SELECT SUM(CASE WHEN A3 = 'north Bohemia' THEN A16 ELSE 0 END) - SUM(CASE WHEN A3 = 'east Bohemia' THEN A16 ELSE 0 END) FROM district",
            "3": "SELECT   SUM(CASE WHEN T1.A3 = 'north Bohemia' THEN T1.A16 ELSE 0 END) - SUM(CASE WHEN T1.A3 = 'east Bohemia' THEN T1.A16 ELSE 0 END) FROM district AS T1;"
        }
    },
    {
        "question_id": 172,
        "database": "financial",
        "evidence": "",
        "question": "How many owner and disponent dispositions are there from account number 1 to account number 10?",
        "schema_used": {
            "disp": [
                "account_id",
                "type"
            ]
        },
        "gold": "SELECT SUM(type = 'OWNER') , SUM(type = 'DISPONENT') FROM disp WHERE account_id BETWEEN 1 AND 10",
        "candidates": {
            "4": "SELECT COUNT(*)  FROM disp  WHERE account_id BETWEEN 1 AND 10;",
            "1": "SELECT type, COUNT(*)  FROM disp  WHERE account_id BETWEEN 1 AND 10  GROUP BY type;",
            "5": "SELECT COUNT(*) FROM disp WHERE account_id BETWEEN 1 AND 10",
            "2": "SELECT COUNT(*) FROM disp WHERE account_id BETWEEN 1 AND 10 AND type IN ('OWNER', 'DISPONENT')",
            "6": "SELECT count(*) FROM disp WHERE account_id BETWEEN 1 AND 10",
            "3": "SELECT   COUNT(account_id),   type FROM disp WHERE   account_id BETWEEN 1 AND 10 GROUP BY   type;"
        }
    },
    {
        "question_id": 173,
        "database": "financial",
        "evidence": "k_symbol refers to the purpose of payments",
        "question": "How often does account number 3 request an account statement to be released? What was the aim of debiting 3539 in total?",
        "schema_used": {
            "order": [
                "account_id",
                "k_symbol",
                "amount"
            ],
            "account": [
                "frequency",
                "account_id"
            ]
        },
        "gold": "SELECT T1.frequency, T2.k_symbol FROM account AS T1 INNER JOIN (SELECT account_id, k_symbol, SUM(amount) AS total_amount FROM `order` GROUP BY account_id, k_symbol) AS T2 ON T1.account_id = T2.account_id WHERE T1.account_id = 3 AND T2.total_amount = 3539",
        "candidates": {
            "4": "SELECT      frequency,     SUM(amount) AS total_debit_amount FROM      trans AS T1 INNER JOIN      account AS T2  ON      T1.account_id = T2.account_id WHERE      T1.account_id = 3 AND      T1.k_symbol = 'SLUZBY' GROUP BY      T2.frequency;",
            "2": "SELECT T1.frequency, T2.k_symbol FROM account AS T1 INNER JOIN trans AS T2 ON T1.account_id = T2.account_id WHERE T1.account_id = 3 AND T2.amount = 3539",
            "5": "SELECT T1.frequency,  T2.k_symbol  FROM account AS T1 INNER JOIN trans AS T2 ON T1.account_id = T2.account_id  WHERE T1.account_id = 3 AND T2.amount = 3539",
            "6": "SELECT T1.frequency ,  T2.k_symbol FROM account AS T1 JOIN trans AS T2 ON T1.account_id  =  T2.account_id WHERE T1.account_id  =  3 AND T2.amount  =  3539",
            "3": "SELECT T1.frequency, T2.k_symbol FROM account AS T1 INNER JOIN trans AS T2 ON T1.account_id = T2.account_id WHERE T1.account_id = 3 AND T2.amount = 3539",
            "1": "SELECT -- Query to find how often account number 3 requests an account statement to be released SELECT COUNT(*) AS statement_count FROM trans WHERE account_id = 3 AND k_symbol = 'SLUZBY';  -- Query to find the total amount debited for account number 3 with k_symbol 'SIPO' SELECT SUM(amount) AS total_debit_amount FROM trans WHERE account_id = 3 AND k_symbol = 'SIPO';"
        }
    },
    {
        "question_id": 174,
        "database": "financial",
        "evidence": "",
        "question": "What year was account owner number 130 born?",
        "schema_used": {
            "client": [
                "client_id",
                "birth_date"
            ],
            "disp": [
                "client_id",
                "account_id"
            ],
            "account": [
                "account_id"
            ]
        },
        "gold": "SELECT STRFTIME('%Y', T1.birth_date) FROM client AS T1 INNER JOIN disp AS T3 ON T1.client_id = T3.client_id INNER JOIN account AS T2 ON T3.account_id = T2.account_id WHERE T2.account_id = 130",
        "candidates": {
            "4": "SELECT T1.birth_date FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id WHERE T2.account_id = 130",
            "1": "SELECT T1.birth_date  FROM client AS T1  INNER JOIN disp AS T2 ON T1.client_id = T2.client_id  WHERE T2.account_id = 130;",
            "2": "SELECT T1.birth_date FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id WHERE T2.account_id = 130",
            "5": "SELECT STRFTIME('%Y', birth_date) FROM client WHERE client_id = 130",
            "6": "SELECT STRFTIME('%Y', T1.birth_date) FROM client AS T1 JOIN disp AS T2 ON T1.client_id = T2.client_id WHERE T2.client_id = 130",
            "3": "SELECT STRFTIME('%Y', T1.birth_date) FROM client AS T1 JOIN disp AS T2 ON T1.client_id = T2.client_id WHERE T2.account_id = 130"
        }
    },
    {
        "question_id": 175,
        "database": "financial",
        "evidence": "Frequency = 'POPLATEK PO OBRATU' stands for issuance after transaction",
        "question": "How many accounts have an owner disposition and request for a statement to be generated upon a transaction?",
        "schema_used": {
            "account": [
                "account_id",
                "frequency"
            ],
            "disp": [
                "account_id",
                "type"
            ]
        },
        "gold": "SELECT COUNT(T1.account_id) FROM account AS T1 INNER JOIN disp AS T2 ON T1.account_id = T2.account_id WHERE T2.type = 'OWNER' AND T1.frequency = 'POPLATEK PO OBRATU'",
        "candidates": {
            "4": "SELECT COUNT(*)  FROM account AS T1  INNER JOIN disp AS T2 ON T1.account_id = T2.account_id  WHERE T2.type = 'OWNER' AND T1.frequency = 'POPLATEK PO OBRATU';",
            "1": "SELECT COUNT(DISTINCT T1.account_id) FROM disp AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE T1.type = 'OWNER' AND T2.frequency = 'POPLATEK PO OBRATU';",
            "5": "SELECT COUNT(*) FROM account AS T1 INNER JOIN disp AS T2 ON T1.account_id = T2.account_id WHERE T2.type = 'OWNER' AND T1.frequency = 'POPLATEK PO OBRATU'",
            "2": "SELECT COUNT(T1.account_id) FROM account AS T1 INNER JOIN disp AS T2 ON T1.account_id = T2.account_id WHERE T2.type = 'OWNER' AND T1.frequency = 'POPLATEK PO OBRATU'",
            "6": "SELECT count(*) FROM disp AS t1 JOIN account AS t2 ON t1.account_id  =  t2.account_id WHERE t1.type  =  'OWNER' AND t2.frequency  =  'POPLATEK PO OBRATU'",
            "3": "SELECT COUNT(T1.account_id) FROM account AS T1 INNER JOIN disp AS T2 ON T1.account_id = T2.account_id WHERE T2.type = \"OWNER\" AND T1.frequency = \"POPLATEK PO OBRATU\""
        }
    },
    {
        "question_id": 176,
        "database": "financial",
        "evidence": "",
        "question": "What is the amount of debt that client number 992 has, and how is this client doing with payments?",
        "schema_used": {
            "loan": [
                "amount",
                "status",
                "account_id"
            ],
            "client": [
                "client_id"
            ],
            "disp": [
                "client_id",
                "account_id"
            ],
            "account": [
                "account_id"
            ]
        },
        "gold": "SELECT T4.amount, T4.status FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN account AS T3 on T2.account_id = T3.account_id INNER JOIN loan AS T4 ON T3.account_id = T4.account_id WHERE T1.client_id = 992",
        "candidates": {
            "4": "SELECT l.amount, l.status  FROM loan AS l  JOIN disp AS d ON l.account_id = d.account_id  WHERE d.client_id = 992;",
            "5": "SELECT SUM(T1.amount),  T2.status  FROM loan AS T1  INNER JOIN disp AS T3  ON T1.account_id = T3.account_id  INNER JOIN client AS T4  ON T3.client_id = T4.client_id  WHERE  T4.client_id = 992;",
            "2": "SELECT SUM(T1.amount),  T2.status  FROM loan AS T1  INNER JOIN disp AS T3  ON T1.account_id = T3.account_id  INNER JOIN client AS T4  ON T3.client_id = T4.client_id  WHERE  T4.client_id = 992;",
            "6": "SELECT T3.amount ,  T3.status FROM client AS T1 JOIN disp AS T2 ON T1.client_id  =  T2.client_id JOIN loan AS T3 ON T2.account_id  =  T3.account_id WHERE T1.client_id  =  992",
            "3": "SELECT   T1.amount,   T1.status FROM loan AS T1 INNER JOIN disp AS T2   ON T1.account_id = T2.account_id WHERE   T2.client_id = 992;",
            "1": "SELECT      SUM(l.amount) AS total_debt,     CASE          WHEN l.status IN ('B', 'C', 'D') THEN 'In Debt'         ELSE 'Not In Debt'     END AS payment_status FROM      loan l JOIN      disp d ON l.account_id = d.account_id WHERE      d.client_id = 992     AND l.status IN ('B', 'C', 'D');"
        }
    },
    {
        "question_id": 177,
        "database": "financial",
        "evidence": "",
        "question": "What is the sum that client number 4's account has following transaction 851? Who owns this account, a man or a woman?",
        "schema_used": {
            "trans": [
                "balance",
                "account_id",
                "trans_id"
            ],
            "client": [
                "gender",
                "client_id"
            ],
            "disp": [
                "client_id",
                "account_id"
            ],
            "account": [
                "account_id"
            ]
        },
        "gold": "SELECT T4.balance, T1.gender FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN account AS T3 ON T2.account_id =T3.account_id INNER JOIN trans AS T4 ON T3.account_id = T4.account_id WHERE T1.client_id = 4 AND T4.trans_id = 851",
        "candidates": {
            "4": "SELECT      SUM(T1.balance),      CASE          WHEN T3.gender = 'F' THEN 'Woman'         ELSE 'Man'     END AS gender FROM      trans AS T1  INNER JOIN      account AS T2  ON      T1.account_id = T2.account_id  INNER JOIN      disp AS T4  ON      T2.account_id = T4.account_id  INNER JOIN      client AS T3  ON      T4.client_id = T3.client_id  WHERE      T1.trans_id = 851      AND T4.client_id = 4;",
            "1": "SELECT      SUM(T1.balance) AS total_balance,     CASE          WHEN T3.gender = 'F' THEN 'Woman'         ELSE 'Man'     END AS account_owner_gender FROM      trans AS T1 INNER JOIN      account AS T2 ON T1.account_id = T2.account_id INNER JOIN      disp AS T4 ON T2.account_id = T4.account_id INNER JOIN      client AS T3 ON T4.client_id = T3.client_id WHERE      T1.trans_id = 851      AND T4.client_id = 4;",
            "5": "SELECT T1.balance, T3.gender FROM trans AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN disp AS T4 ON T2.account_id = T4.account_id INNER JOIN client AS T3 ON T4.client_id = T3.client_id WHERE T1.trans_id = 851 AND T4.client_id = 4",
            "2": "SELECT SUM(T1.balance),  T3.gender  FROM trans AS T1  INNER JOIN account AS T2 ON T1.account_id = T2.account_id  INNER JOIN disp AS T4 ON T2.account_id = T4.account_id  INNER JOIN client AS T3 ON T4.client_id = T3.client_id  WHERE T1.trans_id = 851 AND T4.client_id = 4",
            "3": "SELECT   T1.balance,   T3.gender FROM trans AS T1 INNER JOIN disp AS T2   ON T1.account_id = T2.account_id INNER JOIN client AS T3   ON T2.client_id = T3.client_id WHERE   T2.client_id = 4 AND T1.trans_id = 851;",
            "6": "SELECT   T1.balance,   T3.gender FROM trans AS T1 INNER JOIN disp AS T2   ON T1.account_id = T2.account_id INNER JOIN client AS T3   ON T2.client_id = T3.client_id WHERE   T2.client_id = 4 AND T1.trans_id = 851;"
        }
    },
    {
        "question_id": 178,
        "database": "financial",
        "evidence": "",
        "question": "Which kind of credit card does client number 9 possess?",
        "schema_used": {
            "card": [
                "type",
                "disp_id"
            ],
            "client": [
                "client_id"
            ],
            "disp": [
                "client_id",
                "disp_id"
            ]
        },
        "gold": "SELECT T3.type FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN card AS T3 ON T2.disp_id = T3.disp_id WHERE T1.client_id = 9",
        "candidates": {
            "5": "SELECT T1.type FROM card AS T1 INNER JOIN disp AS T2 ON T1.disp_id = T2.disp_id WHERE T2.client_id = 9",
            "4": "SELECT T2.type  FROM disp AS T1  INNER JOIN card AS T2  ON T1.disp_id = T2.disp_id  WHERE T1.client_id = 9;",
            "1": "SELECT T2.type  FROM disp AS T1  INNER JOIN card AS T2  ON T1.disp_id = T2.disp_id  WHERE T1.client_id = 9;",
            "2": "SELECT T1.type FROM card AS T1 INNER JOIN disp AS T2 ON T1.disp_id = T2.disp_id WHERE T2.client_id = 9",
            "6": "SELECT T2.type FROM disp AS T1 JOIN card AS T2 ON T1.disp_id = T2.disp_id WHERE T1.client_id = 9",
            "3": "SELECT T2.type FROM disp AS T1 JOIN card AS T2 ON T1.disp_id  =  T2.disp_id WHERE T1.client_id  =  9"
        }
    },
    {
        "question_id": 179,
        "database": "financial",
        "evidence": "",
        "question": "How much, in total, did client number 617 pay for all of the transactions in 1998?",
        "schema_used": {
            "trans": [
                "amount",
                "account_id",
                "date"
            ],
            "client": [
                "client_id"
            ],
            "disp": [
                "client_id",
                "account_id"
            ],
            "account": [
                "account_id"
            ]
        },
        "gold": "SELECT SUM(T3.amount) FROM client AS T1 INNER JOIN disp AS T4 ON T1.client_id = T4.client_id INNER JOIN account AS T2 ON T4.account_id = T2.account_id INNER JOIN trans AS T3 ON T2.account_id = T3.account_id WHERE STRFTIME('%Y', T3.date)= '1998' AND T1.client_id = 617",
        "candidates": {
            "4": "SELECT SUM(T1.amount)  FROM trans AS T1  INNER JOIN disp AS T2 ON T1.account_id = T2.account_id  WHERE T2.client_id = 617;",
            "1": "SELECT SUM(T1.amount)  FROM trans AS T1  INNER JOIN disp AS T2 ON T1.account_id = T2.account_id  WHERE T2.client_id = 617 AND strftime('%Y', T1.date) = '1998';",
            "5": "SELECT SUM(T1.amount) FROM trans AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN disp AS T3 ON T2.account_id = T3.account_id WHERE T3.client_id = 617 AND STRFTIME('%Y', T2.creation_date) = '1998'",
            "2": "SELECT SUM(T1.amount) FROM trans AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN disp AS T3 ON T2.account_id = T3.account_id WHERE T3.client_id = 617 AND STRFTIME('%Y', T2.date) = '1998'",
            "3": "SELECT SUM(T1.amount) FROM trans AS T1 INNER JOIN disp AS T2 ON T1.account_id = T2.account_id WHERE T2.client_id = 617",
            "6": "SELECT SUM(T1.amount) FROM trans AS T1 JOIN account AS T2 ON T1.account_id  =  T2.account_id JOIN disp AS T3 ON T2.account_id  =  T3.account_id WHERE T3.client_id  =  617 AND T1.date LIKE '98%'"
        }
    },
    {
        "question_id": 180,
        "database": "financial",
        "evidence": "",
        "question": "Please provide a list of clients who were born between 1983 and 1987 and whose account branch is in East Bohemia, along with their IDs.",
        "schema_used": {
            "client": [
                "client_id",
                "district_id",
                "birth_date"
            ],
            "account": [
                "account_id",
                "district_id"
            ],
            "district": [
                "district_id",
                "a3"
            ],
            "disp": [
                "client_id",
                "account_id"
            ]
        },
        "gold": "SELECT T1.client_id, T3.account_id FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN disp AS T4 ON T1.client_id = T4.client_id INNER JOIN account AS T3 ON T2.district_id = T3.district_id and T4.account_id = T3.account_id WHERE T2.A3 = 'east Bohemia' AND STRFTIME('%Y', T1.birth_date) BETWEEN '1983' AND '1987'",
        "candidates": {
            "5": "SELECT client_id FROM client INNER JOIN district ON client.district_id = district.district_id WHERE birth_date BETWEEN '1983-01-01' AND '1987-12-31' AND A3 = 'East Bohemia'",
            "4": "SELECT T1.client_id  FROM client AS T1  INNER JOIN district AS T2 ON T1.district_id = T2.district_id  WHERE T1.birth_date BETWEEN '1983-01-01' AND '1987-12-31'  AND T2.A3 = 'east bohemia';",
            "2": "SELECT T1.client_id FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.birth_date BETWEEN '1983-01-01' AND '1987-12-31' AND T2.A3 = 'East Bohemia'",
            "1": "SELECT T1.client_id FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T1.birth_date BETWEEN '1983-01-01' AND '1987-12-31' AND T2.A3 = 'East Bohemia';",
            "6": "SELECT client_id FROM client AS T1 JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A3 = 'east Bohemia' AND T1.birth_date BETWEEN '1983-01-01' AND '1987-12-31'",
            "3": "SELECT T1.client_id FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A3 = 'east Bohemia' AND T1.birth_date BETWEEN '1983-01-01' AND '1987-12-31'"
        }
    },
    {
        "question_id": 181,
        "database": "financial",
        "evidence": "Female refers to gender = 'F'",
        "question": "Please provide the IDs of the 3 female clients with the largest loans.",
        "schema_used": {
            "client": [
                "client_id",
                "gender"
            ],
            "disp": [
                "client_id",
                "account_id"
            ],
            "account": [
                "account_id"
            ],
            "loan": [
                "amount",
                "account_id"
            ]
        },
        "gold": "SELECT T1.client_id FROM client AS T1 INNER JOIN disp AS T4 on T1.client_id= T4.client_id INNER JOIN account AS T2 ON T4.account_id = T2.account_id  INNER JOIN loan AS T3 ON T2.account_id = T3.account_id and T4.account_id = T3.account_id WHERE T1.gender = 'F' ORDER BY T3.amount DESC LIMIT 3",
        "candidates": {
            "1": "SELECT c.client_id FROM client c JOIN loan l ON c.client_id = l.account_id WHERE c.gender = 'F' ORDER BY l.amount DESC LIMIT 3;",
            "4": "SELECT T3.client_id  FROM loan AS T1  INNER JOIN account AS T2 ON T1.account_id = T2.account_id  INNER JOIN client AS T3 ON T2.district_id = T3.district_id  WHERE T3.gender = 'F'  ORDER BY T1.amount DESC  LIMIT 3;",
            "5": "SELECT T1.client_id FROM client AS T1 INNER JOIN account AS T2 ON T1.client_id = T2.account_id INNER JOIN loan AS T3 ON T2.account_id = T3.account_id WHERE T1.gender = 'F' ORDER BY T3.amount DESC LIMIT 3",
            "2": "SELECT T1.client_id FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN loan AS T3 ON T2.account_id = T3.account_id WHERE T1.gender = 'F' ORDER BY T3.amount DESC LIMIT 3",
            "6": "SELECT T1.client_id FROM client AS T1 JOIN account AS T2 ON T1.district_id  =  T2.district_id JOIN loan AS T3 ON T2.account_id  =  T3.account_id WHERE T1.gender  =  'F' ORDER BY T3.amount DESC LIMIT 3",
            "3": "SELECT T1.account_id FROM loan AS T1 INNER JOIN account AS T2   ON T1.account_id = T2.account_id INNER JOIN disp AS T3   ON T2.account_id = T3.account_id INNER JOIN client AS T4   ON T3.client_id = T4.client_id WHERE   T4.gender = 'F' ORDER BY   T1.amount DESC LIMIT 3;"
        }
    },
    {
        "question_id": 182,
        "database": "financial",
        "evidence": "Man and male refers to gender = 'M'; 'SIPO' stands for household payment",
        "question": "How many male customers who were born between 1974 and 1976 have made a payment on their home in excess of $4000?",
        "schema_used": {
            "trans": [
                "account_id",
                "k_symbol",
                "amount"
            ],
            "account": [
                "account_id"
            ],
            "disp": [
                "account_id",
                "client_id"
            ],
            "client": [
                "client_id",
                "gender",
                "birth_date"
            ]
        },
        "gold": "SELECT COUNT(T1.account_id) FROM trans AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN disp AS T4 ON T2.account_id = T4.account_id INNER JOIN client AS T3 ON T4.client_id = T3.client_id WHERE STRFTIME('%Y', T3.birth_date) BETWEEN '1974' AND '1976' AND T3.gender = 'M' AND T1.amount > 4000 AND T1.k_symbol = 'SIPO'",
        "candidates": {
            "4": "SELECT COUNT(DISTINCT T1.client_id) FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN trans AS T3 ON T2.account_id = T3.account_id WHERE T1.gender = 'M'  AND T3.k_symbol = 'SIPO' AND T3.amount > 4000 AND strftime('%Y', T1.birth_date) BETWEEN '1974' AND '1976';",
            "2": "SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN trans AS T3 ON T2.account_id = T3.account_id WHERE T1.gender = 'M' AND STRFTIME('%Y', T1.birth_date) BETWEEN '1974' AND '1976' AND T3.k_symbol = 'SIPO' AND T3.amount > 4000",
            "1": "SELECT COUNT(DISTINCT T1.client_id) FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN trans AS T3 ON T2.account_id = T3.account_id WHERE T1.gender = 'M'  AND strftime('%Y', T1.birth_date) BETWEEN '1974' AND '1976' AND T3.k_symbol = 'SIPO' AND T3.amount > 4000;",
            "5": "SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN trans AS T3 ON T2.account_id = T3.account_id WHERE T1.gender = 'M' AND STRFTIME('%Y', T1.birth_date) BETWEEN '1974' AND '1976' AND T3.k_symbol = 'SIPO' AND T3.amount > 4000",
            "6": "SELECT COUNT(T1.client_id) FROM client AS T1 JOIN disp AS T2 ON T1.client_id = T2.client_id JOIN trans AS T3 ON T2.account_id = T3.account_id WHERE T1.gender = 'M' AND T3.k_symbol = 'SIPO' AND T3.amount > 4000 AND T1.birth_date BETWEEN '1974-01-01' AND '1976-12-31'",
            "3": "SELECT   COUNT(DISTINCT T1.client_id) FROM client AS T1 INNER JOIN disp AS T2   ON T1.client_id = T2.client_id INNER JOIN trans AS T3   ON T2.account_id = T3.account_id WHERE   T1.gender = 'M' AND T3.k_symbol = 'SIPO' AND T3.amount > 4000 AND STRFTIME('%Y', T1.birth_date) BETWEEN '1974' AND '1976';"
        }
    },
    {
        "question_id": 183,
        "database": "financial",
        "evidence": "",
        "question": "How many accounts in Beroun were opened after 1996?",
        "schema_used": {
            "account": [
                "account_id",
                "district_id",
                "date"
            ],
            "district": [
                "district_id",
                "a2"
            ]
        },
        "gold": "SELECT COUNT(account_id) FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE STRFTIME('%Y', T1.date) > '1996' AND T2.A2 = 'Beroun'",
        "candidates": {
            "4": "SELECT COUNT(*)  FROM account AS T1  INNER JOIN district AS T2  ON T1.district_id = T2.district_id  WHERE T2.A2 = 'Beroun' AND T1.date > '1996-12-31'",
            "1": "SELECT COUNT(*)  FROM account AS T1  INNER JOIN district AS T2  ON T1.district_id = T2.district_id  WHERE T2.A2 = 'Beroun' AND T1.date > '1996-12-31';",
            "5": "SELECT COUNT(*) FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A2 = 'Beroun' AND STRFTIME('%Y', T1.date) > '1996'",
            "2": "SELECT COUNT(T1.account_id) FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A2 = 'Beroun' AND T1.date > '1996-12-31'",
            "3": "SELECT   COUNT(T1.account_id) FROM account AS T1 INNER JOIN district AS T2   ON T1.district_id = T2.district_id WHERE   T2.A2 = 'Beroun' AND T1.date > '1996-12-31';",
            "6": "SELECT COUNT(T1.account_id) FROM account AS T1 JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A2 = 'Beroun' AND T1.date > '1996-12-31'"
        }
    },
    {
        "question_id": 184,
        "database": "financial",
        "evidence": "Female refers to gender = 'F'",
        "question": "How many female customers have a junior credit card?",
        "schema_used": {
            "client": [
                "client_id",
                "gender"
            ],
            "disp": [
                "client_id",
                "disp_id"
            ],
            "card": [
                "disp_id",
                "type"
            ]
        },
        "gold": "SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN card AS T3 ON T2.disp_id = T3.disp_id WHERE T1.gender = 'F' AND T3.type = 'junior'",
        "candidates": {
            "4": "SELECT COUNT(*)  FROM client AS T1  INNER JOIN disp AS T2 ON T1.client_id = T2.client_id  INNER JOIN card AS T3 ON T2.disp_id = T3.disp_id  WHERE T1.gender = 'F' AND T3.type = 'junior'",
            "1": "SELECT COUNT(*)  FROM client AS T1  INNER JOIN disp AS T2 ON T1.client_id = T2.client_id  INNER JOIN card AS T3 ON T2.disp_id = T3.disp_id  WHERE T1.gender = 'F' AND T3.type = 'junior';",
            "5": "SELECT COUNT(*) FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN card AS T3 ON T2.disp_id = T3.disp_id WHERE T1.gender = 'F' AND T3.type = 'junior'",
            "2": "SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN card AS T3 ON T2.disp_id = T3.disp_id WHERE T1.gender = 'F' AND T3.type = 'junior'",
            "6": "SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN card AS T3 ON T2.disp_id = T3.disp_id WHERE T3.type = 'junior' AND T1.gender = 'F'",
            "3": "SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN card AS T3 ON T2.disp_id = T3.disp_id WHERE T3.type = 'junior' AND T1.gender = 'F'"
        }
    },
    {
        "question_id": 185,
        "database": "financial",
        "evidence": "Female refers to gender = 'F'; Percentage of female clients in Prague branch = count[female clients with accounts in Prague branch / count(clients with accounts in Prague branch)] * 100%; A3 may contain information about Prague",
        "question": "What proportion of customers who have accounts at the Prague branch are female?",
        "schema_used": {
            "district": [
                "district_id",
                "a3"
            ],
            "client": [
                "district_id",
                "client_id",
                "gender"
            ]
        },
        "gold": "SELECT CAST(SUM(T2.gender = 'F') AS REAL) / COUNT(T2.client_id) * 100 FROM district AS T1 INNER JOIN client AS T2 ON T1.district_id = T2.district_id WHERE T1.A3 = 'Prague'",
        "candidates": {
            "4": "SELECT CAST(SUM(CASE WHEN T2.gender = 'F' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T2.gender)  FROM account AS T1  INNER JOIN client AS T2 ON T1.district_id = T2.district_id  INNER JOIN district AS T3 ON T1.district_id = T3.district_id  WHERE T3.A3 = 'Prague';",
            "1": "SELECT CAST(SUM(CASE WHEN T2.gender = 'F' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T2.client_id) FROM account AS T1 INNER JOIN client AS T2 ON T1.district_id = T2.district_id INNER JOIN district AS T3 ON T1.district_id = T3.district_id WHERE T3.A3 = 'Prague';",
            "5": "SELECT CAST(SUM(CASE WHEN T1.gender = 'F' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A3 = 'Prague'",
            "2": "SELECT CAST(SUM(CASE WHEN T1.gender = 'F' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM client AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id INNER JOIN district AS T3 ON T2.district_id = T3.district_id WHERE T3.A3 = 'Prague'",
            "6": "SELECT CAST(SUM(IIF(T1.gender = 'F', 1, 0)) AS REAL) * 100 / COUNT(T1.district_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE T2.A3 = 'Prague'",
            "3": "SELECT CAST(SUM(IIF(T2.gender = 'F', 1, 0)) AS REAL) * 100 / COUNT(T1.district_id) FROM account AS T1 INNER JOIN client AS T2 ON T1.district_id = T2.district_id INNER JOIN district AS T3 ON T1.district_id = T3.district_id WHERE T3.A3 = 'Prague'"
        }
    },
    {
        "question_id": 186,
        "database": "financial",
        "evidence": "Percentage of male clients = [count(male clients who requested weekly statements / count(clients who requested weekly statements)] * 100%; Male means gender = 'M'; 'POPLATEK TYDNE' stands for weekly issuance",
        "question": "What percentage of male clients request for weekly statements to be issued?",
        "schema_used": {
            "client": [
                "district_id",
                "client_id",
                "gender"
            ],
            "district": [
                "district_id"
            ],
            "account": [
                "district_id",
                "frequency",
                "account_id"
            ],
            "disp": [
                "client_id",
                "account_id"
            ]
        },
        "gold": "SELECT CAST(SUM(T1.gender = 'M') AS REAL) * 100 / COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T3 ON T1.district_id = T3.district_id INNER JOIN account AS T2 ON T2.district_id = T3.district_id INNER JOIN disp as T4 on T1.client_id = T4.client_id AND T2.account_id = T4.account_id WHERE T2.frequency = 'POPLATEK TYDNE'",
        "candidates": {
            "4": "SELECT CAST(SUM(CASE WHEN T2.gender = 'M' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T2.gender) FROM disp AS T1 INNER JOIN client AS T2 ON T1.client_id = T2.client_id INNER JOIN account AS T3 ON T1.account_id = T3.account_id WHERE T3.frequency = 'POPLATEK TYDNE';",
            "1": "SELECT      CAST(SUM(CASE WHEN T1.gender = 'M' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.gender)  FROM      client AS T1  INNER JOIN      disp AS T2 ON T1.client_id = T2.client_id  INNER JOIN      account AS T3 ON T2.account_id = T3.account_id  WHERE      T3.frequency = 'POPLATEK TYDNE'",
            "5": "SELECT CAST(SUM(CASE WHEN T1.gender = 'M' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN account AS T3 ON T2.account_id = T3.account_id WHERE T3.frequency = 'POPLATEK TYDNE'",
            "2": "SELECT CAST(SUM(CASE WHEN T1.gender = 'M' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN account AS T3 ON T2.account_id = T3.account_id WHERE T3.frequency = 'POPLATEK TYDNE'",
            "6": "SELECT CAST(SUM(CASE WHEN T1.gender = 'M' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.client_id) FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN account AS T3 ON T2.account_id = T3.account_id WHERE T3.frequency = 'POPLATEK TYDNE'",
            "3": "SELECT CAST(SUM(CASE WHEN T2.gender = 'M' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T2.client_id) FROM account AS T1 INNER JOIN disp AS T3 ON T1.account_id = T3.account_id INNER JOIN client AS T2 ON T3.client_id = T2.client_id WHERE T1.frequency = 'POPLATEK TYDNE'"
        }
    },
    {
        "question_id": 187,
        "database": "financial",
        "evidence": "Frequency = 'POPLATEK TYDNE' refers to weekly issuance",
        "question": "How many clients who choose statement of weekly issuance are Owner?",
        "schema_used": {
            "disp": [
                "account_id",
                "type"
            ],
            "account": [
                "account_id",
                "frequency"
            ]
        },
        "gold": "SELECT COUNT(T2.account_id) FROM account AS T1 INNER JOIN disp AS T2 ON T2.account_id = T1.account_id WHERE T1.frequency = 'POPLATEK TYDNE' AND T2.type = 'OWNER'",
        "candidates": {
            "4": "SELECT COUNT(client_id)  FROM disp  INNER JOIN account ON disp.account_id = account.account_id  WHERE account.frequency = 'POPLATEK TYDNE' AND disp.type = 'OWNER';",
            "1": "SELECT COUNT(*)  FROM disp  WHERE type = 'OWNER'  AND account_id IN (     SELECT account_id      FROM account      WHERE frequency = 'POPLATEK TYDNE' );",
            "5": "SELECT COUNT(*) FROM account AS T1 INNER JOIN disp AS T2 ON T1.account_id = T2.account_id WHERE T1.frequency = 'POPLATEK TYDNE' AND T2.type = 'OWNER'",
            "6": "SELECT count(*) FROM account AS T1 JOIN disp AS T2 ON T1.account_id  =  T2.account_id WHERE T1.frequency  =  'POPLATEK TYDNE' AND T2.type  =  'OWNER'",
            "2": "SELECT COUNT(*) FROM disp AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE T2.frequency = 'POPLATEK TYDNE' AND T1.type = 'OWNER'",
            "3": "SELECT COUNT(T1.account_id) FROM account AS T1 INNER JOIN disp AS T2 ON T1.account_id = T2.account_id WHERE T1.frequency = 'POPLATEK TYDNE' AND T2.type = 'OWNER'"
        }
    },
    {
        "question_id": 188,
        "database": "financial",
        "evidence": "",
        "question": "Among the accounts who have loan validity more than 24 months, list out the accounts that have the lowest approved amount and have account opening date before 1997.",
        "schema_used": {
            "loan": [
                "account_id",
                "amount",
                "duration"
            ],
            "account": [
                "account_id",
                "date"
            ]
        },
        "gold": "SELECT T1.account_id FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE T1.duration > 24 AND STRFTIME('%Y', T2.date) < '1997' ORDER BY T1.amount ASC LIMIT 1",
        "candidates": {
            "4": "SELECT account_id  FROM loan  WHERE duration > 24  AND date < '1997-01-01' AND amount = (     SELECT MIN(amount)      FROM loan      WHERE duration > 24      AND date < '1997-01-01'     AND account_id = loan.account_id );",
            "1": "SELECT l.account_id, MIN(l.amount) AS min_amount FROM loan l JOIN account a ON l.account_id = a.account_id WHERE l.duration > 24 AND a.date < '1997-01-01' GROUP BY l.account_id HAVING min_amount = MIN(l.amount);",
            "2": "SELECT T1.account_id FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE T1.duration > 24 AND T2.date < '1997-01-01' ORDER BY T1.amount LIMIT 1",
            "6": "SELECT account_id FROM loan WHERE duration  >  24 ORDER BY amount ASC LIMIT 1",
            "5": "SELECT T1.account_id FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE T1.duration > 24 AND T2.date < '1997-01-01' ORDER BY T1.amount LIMIT 1",
            "3": "SELECT   T1.account_id FROM account AS T1 INNER JOIN loan AS T2   ON T1.account_id = T2.account_id WHERE   T2.duration > 24 AND T1.date < '1997-01-01' ORDER BY   T2.amount LIMIT 1;"
        }
    },
    {
        "question_id": 189,
        "database": "financial",
        "evidence": "Female refers to 'F' in the gender; A11 contains information about average salary",
        "question": "Name the account numbers of female clients who are oldest and have lowest average salary?",
        "schema_used": {
            "account": [
                "account_id",
                "district_id"
            ],
            "client": [
                "district_id",
                "gender",
                "birth_date",
                "client_id"
            ],
            "district": [
                "district_id",
                "a11"
            ],
            "disp": [
                "client_id",
                "account_id"
            ]
        },
        "gold": "SELECT T3.account_id FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN account AS T3 ON T2.district_id = T3.district_id INNER JOIN disp AS T4 ON T1.client_id = T4.client_id AND T4.account_id = T3.account_id  WHERE T1.gender = 'F' ORDER BY T1.birth_date ASC, T2.A11 ASC LIMIT 1",
        "candidates": {
            "4": "SELECT T3.account  FROM client AS T1  INNER JOIN district AS T2 ON T1.district_id = T2.district_id  INNER JOIN account AS T3 ON T1.district_id = T3.district_id  WHERE T1.gender = 'F'  ORDER BY T1.birth_date ASC, T2.A11 ASC  LIMIT 1;",
            "5": "SELECT T1.account FROM client AS T1 INNER JOIN account AS T2 ON T1.client_id = T2.account_id INNER JOIN district AS T3 ON T2.district_id = T3.district_id WHERE T1.gender = 'F' ORDER BY T1.birth_date, T3.A11 LIMIT 1",
            "1": "SELECT T1.account  FROM trans AS T1  INNER JOIN account AS T2 ON T1.account_id = T2.account_id  INNER JOIN client AS T3 ON T2.district_id = T3.district_id  INNER JOIN district AS T4 ON T3.district_id = T4.district_id  WHERE T3.gender = 'F'  ORDER BY T3.birth_date ASC, T4.A11 ASC  LIMIT 1;",
            "2": "SELECT T1.account FROM trans AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id INNER JOIN client AS T3 ON T2.account_id = T3.client_id INNER JOIN district AS T4 ON T3.district_id = T4.district_id WHERE T3.gender = 'F' GROUP BY T1.account ORDER BY AVG(T4.A11) ASC, MAX(T3.birth_date) DESC LIMIT 1",
            "6": "SELECT T1.account FROM trans AS T1 JOIN account AS T2 ON T1.account_id  =  T2.account_id JOIN client AS T3 ON T2.district_id  =  T3.district_id JOIN district AS T4 ON T3.district_id  =  T4.district_id WHERE T3.gender  =  'F' ORDER BY T4.A11 ASC LIMIT 1",
            "3": "SELECT   T1.account FROM trans AS T1 INNER JOIN account AS T2   ON T1.account_id = T2.account_id INNER JOIN client AS T3   ON T2.district_id = T3.district_id INNER JOIN district AS T4   ON T3.district_id = T4.district_id WHERE   T3.gender = 'F' ORDER BY   T4.A11,   T3.birth_date LIMIT 1;"
        }
    },
    {
        "question_id": 190,
        "database": "financial",
        "evidence": "East Bohemia appears in the column A3, which refers to the region.",
        "question": "How many clients who were born in 1920 stay in east Bohemia?",
        "schema_used": {
            "client": [
                "client_id",
                "district_id",
                "birth_date"
            ],
            "district": [
                "district_id",
                "a3"
            ]
        },
        "gold": "SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE STRFTIME('%Y', T1.birth_date) = '1920' AND T2.A3 = 'east Bohemia'",
        "candidates": {
            "4": "SELECT COUNT(*)  FROM client AS T1  INNER JOIN district AS T2 ON T1.district_id = T2.district_id  WHERE strftime('%Y', T1.birth_date) = '1920' AND T2.A3 = 'east Bohemia';",
            "1": "SELECT COUNT(*)  FROM client AS T1  INNER JOIN district AS T2 ON T1.district_id = T2.district_id  WHERE strftime('%Y', T1.birth_date) = '1920' AND T2.A3 = 'east Bohemia';",
            "2": "SELECT COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE STRFTIME('%Y', T1.birth_date) = '1920' AND T2.A3 = 'east Bohemia'",
            "5": "SELECT COUNT(*) FROM client AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id WHERE STRFTIME('%Y', T1.birth_date) = '1920' AND T2.A3 = 'east Bohemia'",
            "3": "SELECT   COUNT(T1.client_id) FROM client AS T1 INNER JOIN district AS T2   ON T1.district_id = T2.district_id WHERE   STRFTIME('%Y', T1.birth_date) = '1920' AND T2.A3 = 'east Bohemia';",
            "6": "SELECT count(*) FROM client AS t1 JOIN district AS t2 ON t1.district_id  =  t2.district_id WHERE t2.A3  =  \"east Bohemia\" AND t1.birth_date LIKE \"1920%\""
        }
    },
    {
        "question_id": 191,
        "database": "financial",
        "evidence": "Frequency = 'POPLATEK TYDNE' referes to weekly statement",
        "question": "How many loan accounts are for pre-payment of duration of 24 months with weekly issuance of statement.",
        "schema_used": {
            "loan": [
                "account_id",
                "duration"
            ],
            "account": [
                "account_id",
                "frequency"
            ]
        },
        "gold": "SELECT COUNT(T2.account_id) FROM account AS T1 INNER JOIN loan AS T2 ON T1.account_id = T2.account_id WHERE T2.duration = 24 AND T1.frequency = 'POPLATEK TYDNE'",
        "candidates": {
            "4": "SELECT COUNT(*) FROM loan JOIN account ON loan.account_id = account.account_id WHERE loan.duration = 24 AND account.frequency = 'POPLATEK TYDNE';",
            "1": "SELECT COUNT(*) FROM loan JOIN account ON loan.account_id = account.account_id WHERE loan.duration = 24 AND account.frequency = 'POPLATEK TYDNE';",
            "2": "SELECT COUNT(*) FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE T2.frequency = 'POPLATEK TYDNE' AND T1.duration = 24",
            "5": "SELECT COUNT(*) FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE T1.duration = 24 AND T2.frequency = 'POPLATEK TYDNE'",
            "3": "SELECT   COUNT(T1.account_id) FROM loan AS T1 INNER JOIN account AS T2   ON T1.account_id = T2.account_id WHERE   T1.duration = 24 AND T2.frequency = 'POPLATEK TYDNE';",
            "6": "SELECT count(*) FROM loan AS t1 JOIN account AS t2 ON t1.account_id  =  t2.account_id WHERE t1.duration  =  24 AND t2.frequency  =  'POPLATEK TYDNE'"
        }
    },
    {
        "question_id": 192,
        "database": "financial",
        "evidence": "status = 'C' stands for running contract, OK so far; status = 'D' stands for running contract, client in debt. 'POPLATEK PO OBRATU' stands for issuance after transaction",
        "question": "What is the average amount of loan which are still on running contract with statement issuance after each transaction?",
        "schema_used": {
            "loan": [
                "amount",
                "account_id",
                "status"
            ],
            "account": [
                "account_id",
                "frequency"
            ]
        },
        "gold": "SELECT AVG(T2.amount) FROM account AS T1 INNER JOIN loan AS T2 ON T1.account_id = T2.account_id WHERE T2.status IN ('C', 'D') AND T1.frequency = 'POPLATEK PO OBRATU'",
        "candidates": {
            "4": "SELECT AVG(l.amount)  FROM loan AS l  INNER JOIN account AS a ON l.account_id = a.account_id  WHERE l.status = 'C' AND a.frequency = 'POPLATEK PO OBRATU';",
            "5": "SELECT AVG(T1.amount) FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE T1.status = 'C' AND T2.frequency = 'POPLATEK PO OBRATU'",
            "2": "SELECT AVG(T1.amount) FROM loan AS T1 INNER JOIN account AS T2 ON T1.account_id = T2.account_id WHERE T1.status = 'C' AND T2.frequency = 'POPLATEK PO OBRATU'",
            "3": "SELECT AVG(T1.amount) FROM loan AS T1 JOIN account AS T2 ON T1.account_id  =  T2.account_id WHERE T1.status  =  'C' AND T2.frequency  =  'POPLATEK PO OBRATU'",
            "6": "SELECT AVG(T1.amount) FROM loan AS T1 JOIN account AS T2 ON T1.account_id  =  T2.account_id WHERE T1.status  =  'C' AND T2.frequency  =  'POPLATEK PO OBRATU'",
            "1": "SELECT AVG(l.amount) AS average_loan_amount FROM loan l JOIN account a ON l.account_id = a.account_id WHERE l.status = 'C' AND a.frequency = 'POPLATEK PO OBRATU';"
        }
    },
    {
        "question_id": 193,
        "database": "financial",
        "evidence": "Only the owner accounts have the right to issue permanent orders or apply for loans",
        "question": "List all ID and district for clients that can only have the right to issue permanent orders or apply for loans.",
        "schema_used": {
            "disp": [
                "client_id",
                "account_id",
                "type"
            ],
            "district": [
                "district_id",
                "a2"
            ],
            "account": [
                "district_id",
                "account_id"
            ]
        },
        "gold": "SELECT T3.client_id, T2.district_id, T2.A2 FROM account AS T1 INNER JOIN district AS T2 ON T1.district_id = T2.district_id INNER JOIN disp AS T3 ON T1.account_id = T3.account_id WHERE T3.type = 'OWNER'",
        "candidates": {
            "4": "SELECT DISTINCT c.client_id, c.district_id  FROM client AS c  INNER JOIN disp AS d ON c.client_id = d.client_id  WHERE d.type = 'OWNER';",
            "1": "SELECT T1.client_id, T1.district_id  FROM client AS T1  INNER JOIN disp AS T2 ON T1.client_id = T2.client_id  WHERE T2.type = 'OWNER';",
            "2": "SELECT T1.client_id, T1.district_id FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id WHERE T2.type = 'OWNER'",
            "5": "SELECT T1.client_id, T2.district_id FROM client AS T1 INNER JOIN account AS T2 ON T1.district_id = T2.district_id INNER JOIN disp AS T3 ON T1.client_id = T3.client_id WHERE T3.type = 'OWNER'",
            "6": "SELECT client_id ,  district_id FROM disp AS t1 JOIN client AS t2 ON t1.client_id  =  t2.client_id WHERE TYPE  =  'OWNER'",
            "3": "SELECT T1.client_id, T1.district_id FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id WHERE T2.type = 'OWNER'"
        }
    },
    {
        "question_id": 194,
        "database": "financial",
        "evidence": "the credit card is high-level refers to card.type = 'gold'; eligible for loans refers to disp.type = 'OWNER'",
        "question": "Provide the IDs and age of the client with high level credit card, which is eligible for loans.",
        "schema_used": {
            "disp": [
                "client_id",
                "disp_id",
                "type"
            ],
            "card": [
                "disp_id",
                "type"
            ],
            "client": [
                "client_id",
                "birth_date"
            ]
        },
        "gold": "SELECT T1.client_id, STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', T3.birth_date) FROM disp AS T1 INNER JOIN card AS T2 ON T2.disp_id = T1.disp_id INNER JOIN client AS T3 ON T1.client_id = T3.client_id WHERE T2.type = 'gold' AND T1.type = 'OWNER'",
        "candidates": {
            "4": "SELECT      T1.client_id,      CAST(julianday('now') - julianday(T1.birth_date) AS INTEGER) / 365 AS age FROM      client AS T1  INNER JOIN      disp AS T2 ON T1.client_id = T2.client_id  INNER JOIN      card AS T3 ON T2.disp_id = T3.disp_id WHERE      T3.type = 'gold'      AND T2.type = 'OWNER';",
            "2": "SELECT T1.client_id,  STRFTIME('%Y', 'now') - STRFTIME('%Y', T1.birth_date) AS age  FROM client AS T1  INNER JOIN disp AS T2  ON T1.client_id = T2.client_id  INNER JOIN card AS T3  ON T2.disp_id = T3.disp_id  WHERE T3.type = 'gold' AND T2.type = 'OWNER'",
            "5": "SELECT T1.client_id,  STRFTIME('%Y', 'now') - STRFTIME('%Y', T1.birth_date) AS age  FROM client AS T1  INNER JOIN disp AS T2 ON T1.client_id = T2.client_id  INNER JOIN card AS T3 ON T2.disp_id = T3.disp_id  WHERE T3.type = 'gold' AND T2.type = 'OWNER'",
            "3": "SELECT T1.client_id, STRFTIME('%Y', 'now') - STRFTIME('%Y', T1.birth_date) AS age FROM client AS T1 INNER JOIN disp AS T2 ON T1.client_id = T2.client_id INNER JOIN card AS T3 ON T2.disp_id = T3.disp_id WHERE T3.type = 'gold' AND T2.type = 'OWNER'",
            "6": "SELECT T1.client_id ,  STRFTIME('%Y', 'now') - STRFTIME('%Y', T1.birth_date) - (STRFTIME('%m-%d', 'now') < STRFTIME('%m-%d', T1.birth_date)) FROM client AS T1 JOIN disp AS T2 ON T1.client_id  =  T2.client_id JOIN card AS T3 ON T2.disp_id  =  T3.disp_id WHERE T3.type  =  'gold' AND T2.type  =  'OWNER'",
            "1": "SELECT      T1.client_id,      strftime('%Y', 'now') - strftime('%Y', T1.birth_date) - (strftime('%m-%d', 'now') < strftime('%m-%d', T1.birth_date)) AS age FROM      client AS T1 INNER JOIN      disp AS T2 ON T1.client_id = T2.client_id INNER JOIN      card AS T3 ON T2.disp_id = T3.disp_id WHERE      T3.type = 'gold' AND T2.type = 'OWNER';"
        }
    },
    {
        "question_id": 846,
        "database": "formula_1",
        "evidence": "driver reference name refers to driverRef; first qualifying period refers to q1; drivers who are eliminated in the first qualifying period refers to 5 drivers with MAX(q1); race number refers to raceId;",
        "question": "Please list the reference names of the drivers who are eliminated in the first period in race number 20.",
        "schema_used": {
            "drivers": [
                "driverref",
                "driverid"
            ],
            "qualifying": [
                "driverid",
                "raceid",
                "q1"
            ]
        },
        "gold": "SELECT T2.driverRef FROM qualifying AS T1 INNER JOIN drivers AS T2 ON T2.driverId = T1.driverId WHERE T1.raceId = 20 ORDER BY T1.q1 DESC LIMIT 5",
        "candidates": {
            "2": "SELECT T1.driverRef FROM drivers AS T1 INNER JOIN qualifying AS T2 ON T1.driverId = T2.driverId WHERE T2.raceId = 20 AND T2.q1 IS NULL",
            "4": "SELECT T1.driverRef  FROM drivers AS T1  INNER JOIN qualifying AS T2 ON T1.driverId = T2.driverId  WHERE T2.raceId = 20  ORDER BY T2.q1 DESC  LIMIT 5;",
            "1": "SELECT T1.driverRef  FROM drivers AS T1  INNER JOIN qualifying AS T2 ON T1.driverId = T2.driverId  WHERE T2.raceId = 20  ORDER BY T2.q1 DESC  LIMIT 5;",
            "5": "SELECT T1.driverRef FROM drivers AS T1 INNER JOIN qualifying AS T2 ON T1.driverId = T2.driverId WHERE T2.raceId = 20 AND T2.q1 IS NOT NULL ORDER BY T2.q1 DESC LIMIT 5",
            "6": "SELECT T1.driverRef FROM drivers AS T1 JOIN qualifying AS T2 ON T1.driverId = T2.driverId WHERE T2.raceId = 20 AND T2.q1 IS NOT NULL ORDER BY T2.q1 DESC",
            "3": "SELECT   T2.driverRef FROM qualifying AS T1 INNER JOIN drivers AS T2   ON T1.driverId = T2.driverId WHERE   T1.raceId = 20 ORDER BY   T1.q1 DESC LIMIT 5;"
        }
    },
    {
        "question_id": 847,
        "database": "formula_1",
        "evidence": "race number refers to raceId; second qualifying period refers to q2; best lap time refers to MIN(q2);",
        "question": "What is the surname of the driver with the best lap time in race number 19 in the second qualifying period?",
        "schema_used": {
            "drivers": [
                "surname",
                "driverid"
            ],
            "qualifying": [
                "driverid",
                "raceid",
                "q2"
            ]
        },
        "gold": "SELECT T2.surname FROM qualifying AS T1 INNER JOIN drivers AS T2 ON T2.driverId = T1.driverId WHERE T1.raceId = 19 ORDER BY T1.q2 ASC LIMIT 1",
        "candidates": {
            "4": "SELECT T1.surname  FROM drivers AS T1  INNER JOIN qualifying AS T2 ON T1.driverId = T2.driverId  WHERE T2.raceId = 19  ORDER BY T2.q2 ASC  LIMIT 1;",
            "5": "SELECT surname FROM drivers INNER JOIN qualifying ON drivers.driverId = qualifying.driverId WHERE raceId = 19 ORDER BY q2 LIMIT 1",
            "1": "SELECT T1.surname  FROM drivers AS T1  INNER JOIN qualifying AS T2 ON T1.driverId = T2.driverId  WHERE T2.raceId = 19  ORDER BY T2.q2 ASC  LIMIT 1;",
            "2": "SELECT T1.surname FROM drivers AS T1 INNER JOIN qualifying AS T2 ON T1.driverId = T2.driverId WHERE T2.raceId = 19 ORDER BY T2.q2 LIMIT 1",
            "6": "SELECT T1.surname FROM drivers AS T1 JOIN qualifying AS T2 ON T1.driverid = T2.driverid WHERE T2.raceid = 19 ORDER BY T2.q2 ASC LIMIT 1",
            "3": "SELECT   T2.surname FROM qualifying AS T1 INNER JOIN drivers AS T2   ON T1.driverId = T2.driverId WHERE   T1.raceId = 19 ORDER BY   T1.q2 LIMIT 1;"
        }
    },
    {
        "question_id": 848,
        "database": "formula_1",
        "evidence": "Shanghai is a name of location;",
        "question": "Please list the year during which the race is held on circuits in Shanghai.",
        "schema_used": {
            "races": [
                "year",
                "circuitid"
            ],
            "circuits": [
                "circuitid",
                "location"
            ]
        },
        "gold": "SELECT T2.year FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.location = 'Shanghai'",
        "candidates": {
            "4": "SELECT T1.year  FROM races AS T1  INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitId  WHERE T2.location = 'Shanghai'",
            "1": "SELECT DISTINCT T1.year  FROM races AS T1  INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitId  WHERE T2.location = 'Shanghai';",
            "5": "SELECT T1.year FROM races AS T1 INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T2.location = 'Shanghai'",
            "2": "SELECT T1.year FROM races AS T1 INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T2.location = 'Shanghai'",
            "6": "SELECT T1.year FROM races AS T1 JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T2.location = \"Shanghai\"",
            "3": "SELECT   T1.year FROM races AS T1 INNER JOIN circuits AS T2   ON T1.circuitId = T2.circuitId WHERE   T2.location = 'Shanghai';"
        }
    },
    {
        "question_id": 849,
        "database": "formula_1",
        "evidence": "introduction of races refers to url; Circuit de Barcelona-Catalunya is a name of circuit;",
        "question": "Where can the introduction of the races held on Circuit de Barcelona-Catalunya be found?",
        "schema_used": {
            "circuits": [
                "url",
                "circuitid",
                "name"
            ],
            "races": [
                "circuitid"
            ]
        },
        "gold": "SELECT DISTINCT T1.url FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Circuit de Barcelona-Catalunya'",
        "candidates": {
            "4": "SELECT T1.url FROM races AS T1 INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T2.name = 'Circuit de Barcelona-Catalunya'",
            "1": "SELECT T1.url  FROM races AS T1  INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitId  WHERE T2.name = 'Circuit de Barcelona-Catalunya';",
            "5": "SELECT T1.url FROM races AS T1 INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T2.name = 'Circuit de Barcelona-Catalunya'",
            "2": "SELECT T1.url FROM races AS T1 INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T2.name = 'Circuit de Barcelona-Catalunya'",
            "6": "SELECT T1.url FROM races AS T1 JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T2.name = \"Circuit de Barcelona-Catalunya\"",
            "3": "SELECT T2.url FROM circuits AS T1 INNER JOIN races AS T2 ON T1.circuitId = T2.circuitId WHERE T1.name = 'Circuit de Barcelona-Catalunya'"
        }
    },
    {
        "question_id": 850,
        "database": "formula_1",
        "evidence": "Germany is a name of country;",
        "question": "Please give the name of the race held on the circuits in Germany.",
        "schema_used": {
            "races": [
                "name",
                "circuitid"
            ],
            "circuits": [
                "circuitid",
                "country"
            ]
        },
        "gold": "SELECT DISTINCT T2.name FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.country = 'Germany'",
        "candidates": {
            "4": "SELECT T1.name  FROM races AS T1  INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitId  WHERE T2.country = 'Germany'",
            "1": "SELECT T1.name  FROM races AS T1  INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitId  WHERE T2.country = 'Germany';",
            "5": "SELECT name FROM races INNER JOIN circuits ON races.circuitId = circuits.circuitId WHERE circuits.country = 'Germany'",
            "2": "SELECT T1.name FROM races AS T1 INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T2.country = 'Germany'",
            "6": "SELECT T1.name FROM races AS T1 JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T2.country = \"Germany\"",
            "3": "SELECT T1.name FROM races AS T1 JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T2.country = \"Germany\""
        }
    },
    {
        "question_id": 851,
        "database": "formula_1",
        "evidence": "Renault is a name of constructor;",
        "question": "Please list the positions of the circuits built by the constructor Renault.",
        "schema_used": {
            "constructorstandings": [
                "position",
                "constructorid"
            ],
            "constructors": [
                "constructorid",
                "name"
            ]
        },
        "gold": "SELECT DISTINCT T1.position FROM constructorStandings AS T1 INNER JOIN constructors AS T2 ON T2.constructorId = T1.constructorId WHERE T2.name = 'Renault'",
        "candidates": {
            "4": "SELECT results.position  FROM results  INNER JOIN constructors ON results.constructorId = constructors.constructorId  WHERE constructors.name = 'Renault';",
            "2": "SELECT T1.position FROM results AS T1 INNER JOIN constructors AS T2 ON T1.constructorId = T2.constructorId WHERE T2.name = 'Renault'",
            "5": "SELECT T1.position FROM results AS T1 INNER JOIN constructors AS T2 ON T1.constructorId = T2.constructorId WHERE T2.name = 'Renault'",
            "6": "SELECT T1.position FROM results AS T1 INNER JOIN constructors AS T2 ON T1.constructorId = T2.constructorId WHERE T2.name = \"Renault\"",
            "3": "SELECT T1.position FROM results AS T1 INNER JOIN constructors AS T2 ON T1.constructorId = T2.constructorId WHERE T2.name = \"Renault\"",
            "1": "SELECT r.position FROM results AS r JOIN constructors AS c ON r.constructorId = c.constructorId JOIN races AS ra ON r.raceId = ra.raceId WHERE c.name = 'Renault';"
        }
    },
    {
        "question_id": 852,
        "database": "formula_1",
        "evidence": "",
        "question": "How many races in the year 2010 are held on grand prixs outside Asia and Europe?",
        "schema_used": {
            "races": [
                "raceid",
                "circuitid",
                "year"
            ],
            "circuits": [
                "circuitid",
                "country"
            ]
        },
        "gold": "SELECT COUNT(T3.raceId) FROM circuits AS T1 INNER JOIN races AS T3 ON T3.circuitID = T1.circuitId WHERE T1.country NOT IN ( 'Bahrain', 'China', 'Singapore', 'Japan', 'Korea', 'Turkey', 'UAE', 'Malaysia', 'Spain', 'Monaco', 'Azerbaijan', 'Austria', 'Belgium', 'France', 'Germany', 'Hungary', 'Italy', 'UK' ) AND T3.year = 2010",
        "candidates": {
            "4": "SELECT COUNT(*)  FROM races AS R  INNER JOIN circuits AS C ON R.circuitId = C.circuitId  WHERE R.year = 2010  AND C.country NOT IN ('Asia', 'Europe');",
            "2": "SELECT COUNT(T1.raceId) FROM races AS T1 INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T1.year = 2010 AND T2.country NOT IN ('Asia', 'Europe')",
            "1": "SELECT COUNT(*)  FROM races AS r  JOIN circuits AS c ON r.circuitId = c.circuitId  WHERE r.year = 2010 AND c.country NOT IN ('Asia', 'Europe');",
            "5": "SELECT COUNT(*) FROM races INNER JOIN circuits ON races.circuitId = circuits.circuitId WHERE races.year = 2010 AND circuits.country NOT IN (SELECT country FROM circuits WHERE continent = 'Asia' UNION ALL SELECT country FROM circuits WHERE continent = 'Europe')",
            "6": "SELECT COUNT(*) FROM races AS T1 JOIN circuits AS T2 ON T1.circuitId  =  T2.circuitId WHERE T1.year  =  2010 AND T2.country NOT IN ('Russia', 'Turkey', 'Bahrain', 'UAE', 'China', 'Singapore', 'Korea', 'Japan', 'Monaco', 'Spain', 'Belgium', 'Italy', 'Hungary', 'Germany', 'UK', 'France', 'Portugal', 'Austria', 'Netherlands')",
            "3": "SELECT COUNT(T1.raceId) FROM races AS T1 INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T1.year = 2010 AND T2.country NOT IN ('Bahrain', 'Turkey', 'China', 'Malaysia', 'UAE', 'Singapore', 'Korea', 'Japan', 'Spain', 'Monaco', 'Belgium', 'Italy', 'Hungary', 'Germany', 'Great Britain', 'France', 'Portugal', 'Russia')"
        }
    },
    {
        "question_id": 853,
        "database": "formula_1",
        "evidence": "Spain is a name of country;",
        "question": "Please give the names of the races held on the circuits in Spain.",
        "schema_used": {
            "races": [
                "name",
                "circuitid"
            ],
            "circuits": [
                "circuitid",
                "country"
            ]
        },
        "gold": "SELECT DISTINCT T2.name FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.country = 'Spain'",
        "candidates": {
            "4": "SELECT T1.name FROM races AS T1 INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T2.country = 'Spain'",
            "1": "SELECT T1.name  FROM races AS T1  INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitId  WHERE T2.country = 'Spain';",
            "5": "SELECT T1.name FROM races AS T1 INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T2.country = 'Spain'",
            "2": "SELECT T1.name FROM races AS T1 INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T2.country = 'Spain'",
            "6": "SELECT T1.name FROM races AS T1 JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T2.country = \"Spain\"",
            "3": "SELECT   T1.name FROM races AS T1 INNER JOIN circuits AS T2   ON T1.circuitId = T2.circuitId WHERE   T2.country = 'Spain';"
        }
    },
    {
        "question_id": 854,
        "database": "formula_1",
        "evidence": "coordinate position/location refers to lat, lng; circuits for Australian grand prix refers to races.name = 'Australian Grand Prix'",
        "question": "What is the coordinates location of the circuits for Australian grand prix?",
        "schema_used": {
            "circuits": [
                "lat",
                "lng",
                "circuitid"
            ],
            "races": [
                "circuitid",
                "name"
            ]
        },
        "gold": "SELECT DISTINCT T1.lat, T1.lng FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T2.name = 'Australian Grand Prix'",
        "candidates": {
            "4": "SELECT T2.lat, T2.lng  FROM races AS T1  INNER JOIN circuits AS T2  ON T1.circuitId = T2.circuitId  WHERE T1.name = 'Australian Grand Prix';",
            "1": "SELECT T2.lat, T2.lng  FROM races AS T1  INNER JOIN circuits AS T2  ON T1.circuitId = T2.circuitId  WHERE T1.name = 'Australian Grand Prix';",
            "5": "SELECT T1.lat, T1.lng FROM circuits AS T1 INNER JOIN races AS T2 ON T1.circuitId = T2.circuitId WHERE T2.name = 'Australian Grand Prix'",
            "2": "SELECT T2.lat, T2.lng FROM races AS T1 INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T1.name = 'Australian Grand Prix'",
            "6": "SELECT T2.lat, T2.lng FROM races AS T1 INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T1.name = 'Australian Grand Prix'",
            "3": "SELECT T2.lat ,  T2.lng FROM races AS T1 JOIN circuits AS T2 ON T1.circuitid  =  T2.circuitid WHERE T1.name  =  \"Australian Grand Prix\""
        }
    },
    {
        "question_id": 855,
        "database": "formula_1",
        "evidence": "information about races refers to url;",
        "question": "Where can I find the information about the races held on Sepang International Circuit?",
        "schema_used": {
            "circuits": [
                "url",
                "circuitid",
                "name"
            ],
            "races": [
                "circuitid"
            ]
        },
        "gold": "SELECT DISTINCT T1.url FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Sepang International Circuit'",
        "candidates": {
            "6": "SELECT T1.url FROM races AS T1 JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T2.name = \"Sepang International Circuit\"",
            "4": "SELECT T1.url  FROM races AS T1  INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitId  WHERE T2.name = 'Sepang International Circuit';",
            "5": "SELECT url FROM races INNER JOIN circuits ON races.circuitId = circuits.circuitId WHERE circuits.name = 'Sepang International Circuit'",
            "1": "SELECT T1.url  FROM races AS T1  INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitId  WHERE T2.name = 'Sepang International Circuit';",
            "2": "SELECT T1.url FROM races AS T1 INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T2.name = 'Sepang International Circuit'",
            "3": "SELECT   T1.url FROM races AS T1 INNER JOIN circuits AS T2   ON T1.circuitId = T2.circuitId WHERE   T2.name = 'Sepang International Circuit';"
        }
    },
    {
        "question_id": 856,
        "database": "formula_1",
        "evidence": "",
        "question": "Please list the time of the races held on Sepang International Circuit.",
        "schema_used": {
            "races": [
                "time",
                "circuitid"
            ],
            "circuits": [
                "circuitid",
                "name"
            ]
        },
        "gold": "SELECT DISTINCT T2.time FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Sepang International Circuit'",
        "candidates": {
            "4": "SELECT T1.time  FROM races AS T1  INNER JOIN circuits AS T2  ON T1.circuitId = T2.circuitId  WHERE T2.name = 'Sepang International Circuit';",
            "1": "SELECT T1.time FROM races AS T1 INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T2.name = 'Sepang International Circuit';",
            "3": "SELECT   T1.time FROM races AS T1 INNER JOIN circuits AS T2   ON T1.circuitId = T2.circuitId WHERE   T2.name = 'Sepang International Circuit';",
            "5": "SELECT time FROM races INNER JOIN circuits ON races.circuitId  =  circuits.circuitId WHERE circuits.name  =  'Sepang International Circuit'",
            "2": "SELECT T1.time FROM races AS T1 INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T2.name = 'Sepang International Circuit'",
            "6": "SELECT T1.time FROM races AS T1 JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T2.name = \"Sepang International Circuit\""
        }
    },
    {
        "question_id": 857,
        "database": "formula_1",
        "evidence": "coordinate position/location refers to lat, lng; Abu Dhabi Grand Prix refers to races.name = 'Abu Dhabi Grand Prix'",
        "question": "Give the coordinate position for Abu Dhabi Grand Prix.",
        "schema_used": {
            "circuits": [
                "lat",
                "lng",
                "circuitid"
            ],
            "races": [
                "circuitid",
                "name"
            ]
        },
        "gold": "SELECT DISTINCT T1.lat, T1.lng FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T2.name = 'Abu Dhabi Grand Prix'",
        "candidates": {
            "4": "SELECT T2.lat, T2.lng  FROM races AS T1  INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitId  WHERE T1.name = 'Abu Dhabi Grand Prix';",
            "1": "SELECT T2.lat, T2.lng  FROM races AS T1  INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitId  WHERE T1.name = 'Abu Dhabi Grand Prix';",
            "2": "SELECT T2.lat, T2.lng FROM races AS T1 INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T1.name = 'Abu Dhabi Grand Prix'",
            "5": "SELECT T1.lat, T1.lng FROM circuits AS T1 INNER JOIN races AS T2 ON T1.circuitId = T2.circuitId WHERE T2.name = 'Abu Dhabi Grand Prix'",
            "6": "SELECT T2.lat ,  T2.lng FROM races AS T1 JOIN circuits AS T2 ON T1.circuitid  =  T2.circuitid WHERE T1.name  =  \"Abu Dhabi Grand Prix\"",
            "3": "SELECT T2.lat ,  T2.lng FROM races AS T1 JOIN circuits AS T2 ON T1.circuitId  =  T2.circuitId WHERE T1.name  =  \"Abu Dhabi Grand Prix\""
        }
    },
    {
        "question_id": 858,
        "database": "formula_1",
        "evidence": "race number refers to raceId;",
        "question": "Which country is the constructor which got 1 point in the race No. 24 from?",
        "schema_used": {
            "constructors": [
                "nationality",
                "constructorid"
            ],
            "constructorresults": [
                "constructorid",
                "raceid",
                "points"
            ]
        },
        "gold": "SELECT T2.nationality FROM constructorResults AS T1 INNER JOIN constructors AS T2 ON T2.constructorId = T1.constructorId WHERE T1.raceId = 24 AND T1.points = 1",
        "candidates": {
            "4": "SELECT T1.nationality  FROM constructors AS T1  INNER JOIN constructorResults AS T2 ON T1.constructorId = T2.constructorId  WHERE T2.raceId = 24 AND T2.points = 1;",
            "1": "SELECT T1.nationality  FROM constructors AS T1  INNER JOIN constructorResults AS T2 ON T1.constructorId = T2.constructorId  WHERE T2.raceId = 24 AND T2.points = 1;",
            "5": "SELECT T1.nationality FROM constructors AS T1 INNER JOIN constructorResults AS T2 ON T1.constructorId = T2.constructorId WHERE T2.raceId = 24 AND T2.points = 1",
            "2": "SELECT T1.nationality FROM constructors AS T1 INNER JOIN constructorResults AS T2 ON T1.constructorId = T2.constructorId WHERE T2.raceId = 24 AND T2.points = 1",
            "6": "SELECT T2.nationality FROM constructorResults AS T1 INNER JOIN constructors AS T2 ON T1.constructorId = T2.constructorId WHERE T1.raceId = 24 AND T1.points = 1",
            "3": "SELECT   T2.nationality FROM constructorResults AS T1 INNER JOIN constructors AS T2   ON T1.constructorId = T2.constructorId WHERE   T1.raceId = 24 AND T1.points = 1;"
        }
    },
    {
        "question_id": 859,
        "database": "formula_1",
        "evidence": "race number refers to raceId; Bruno Senna refers to the full name of the driver; Full name of the driver refers to drivers.forename and drivers.surname;",
        "question": "What's Bruno Senna's Q1 result in the qualifying race No. 354?",
        "schema_used": {
            "qualifying": [
                "q1",
                "driverid",
                "raceid"
            ],
            "drivers": [
                "driverid",
                "surname",
                "forename"
            ]
        },
        "gold": "SELECT T1.q1 FROM qualifying AS T1 INNER JOIN drivers AS T2 ON T2.driverId = T1.driverId WHERE T1.raceId = 354 AND T2.forename = 'Bruno' AND T2.surname = 'Senna'",
        "candidates": {
            "4": "SELECT T1.q1  FROM qualifying AS T1  INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId  WHERE T2.forename = 'Bruno' AND T2.surname = 'Senna' AND T1.raceId = 354;",
            "5": "SELECT T1.q1 FROM qualifying AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T2.forename = 'Bruno' AND T2.surname = 'Senna' AND T1.raceId = 354",
            "2": "SELECT T1.q1 FROM qualifying AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.raceId = 354 AND T2.forename = 'Bruno' AND T2.surname = 'Senna'",
            "6": "SELECT T3.q1 FROM drivers AS T1 INNER JOIN qualifying AS T3 ON T1.driverid = T3.driverid WHERE T3.raceId = 354 AND T1.forename = \"Bruno\" AND T1.surname = \"Senna\"",
            "1": "SELECT q.q1 FROM qualifying q JOIN drivers d ON q.driverId = d.driverId WHERE q.raceId = 354 AND d.forename = 'Bruno' AND d.surname = 'Senna';",
            "3": "SELECT   T1.q1 FROM qualifying AS T1 INNER JOIN drivers AS T2   ON T1.driverId = T2.driverId WHERE   T2.forename = 'Bruno' AND T2.surname = 'Senna' AND T1.raceId = 354;"
        }
    },
    {
        "question_id": 860,
        "database": "formula_1",
        "evidence": "race number refers to raceId;",
        "question": "For the driver who had the Q2 time as 0:01:40 in the qualifying race No. 355, what is his nationality?",
        "schema_used": {
            "drivers": [
                "nationality",
                "driverid"
            ],
            "qualifying": [
                "driverid",
                "raceid",
                "q2"
            ]
        },
        "gold": "SELECT DISTINCT T2.nationality FROM qualifying AS T1 INNER JOIN drivers AS T2 ON T2.driverId = T1.driverId WHERE T1.raceId = 355 AND T1.q2 LIKE '1:40%'",
        "candidates": {
            "4": "SELECT T1.nationality  FROM drivers AS T1  INNER JOIN qualifying AS T2 ON T1.driverId = T2.driverId  WHERE T2.raceId = 355 AND T2.q2 = '1:40.000';",
            "1": "SELECT T1.nationality  FROM drivers AS T1  INNER JOIN qualifying AS T2 ON T1.driverId = T2.driverId  WHERE T2.raceId = 355 AND T2.q2 = '1:40.000';",
            "5": "SELECT T1.nationality FROM drivers AS T1 INNER JOIN qualifying AS T2 ON T1.driverId = T2.driverId WHERE T2.raceId = 355 AND T2.q2 = '0:01:40'",
            "2": "SELECT T1.nationality FROM drivers AS T1 INNER JOIN qualifying AS T2 ON T1.driverId = T2.driverId WHERE T2.raceId = 355 AND T2.q2 = '0:01:40'",
            "6": "SELECT T2.nationality FROM qualifying AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.raceId = 355 AND T1.q2 = '0:01:40'",
            "3": "SELECT   T2.nationality FROM qualifying AS T1 INNER JOIN drivers AS T2   ON T1.driverId = T2.driverId WHERE   T1.raceId = 355 AND T1.q2 = '0:01:40';"
        }
    },
    {
        "question_id": 861,
        "database": "formula_1",
        "evidence": "race number refers to raceId; finished 0:0M:SS in the Q3 refers to q3 LIKE 'M:SS%'",
        "question": "What is his number of the driver who finished 0:01:54 in the Q3 of qualifying race No.903?",
        "schema_used": {
            "drivers": [
                "number",
                "driverid"
            ],
            "qualifying": [
                "driverid",
                "raceid",
                "q3"
            ]
        },
        "gold": "SELECT T2.number FROM qualifying AS T1 INNER JOIN drivers AS T2 ON T2.driverId = T1.driverId WHERE T1.raceId = 903 AND T1.q3 LIKE '1:54%'",
        "candidates": {
            "4": "SELECT T1.number  FROM drivers AS T1  INNER JOIN qualifying AS T2 ON T1.driverId = T2.driverId  WHERE T2.raceId = 903 AND T2.q3 LIKE '1:54.%'",
            "1": "SELECT T1.number  FROM drivers AS T1  INNER JOIN qualifying AS T2 ON T1.driverId = T2.driverId  WHERE T2.raceId = 903 AND T2.q3 LIKE '1:54.%';",
            "5": "SELECT T1.number FROM drivers AS T1 INNER JOIN qualifying AS T2 ON T1.driverId = T2.driverId WHERE T2.raceId = 903 AND T2.q3 LIKE '0:01:54'",
            "2": "SELECT T1.number FROM drivers AS T1 INNER JOIN qualifying AS T2 ON T1.driverId = T2.driverId WHERE T2.raceId = 903 AND T2.q3 LIKE '1:54'",
            "3": "SELECT   T1.number FROM drivers AS T1 INNER JOIN qualifying AS T2   ON T1.driverId = T2.driverId WHERE   T2.raceId = 903 AND T2.q3 = '1:54.029';",
            "6": "SELECT T1.number FROM drivers AS T1 JOIN qualifying AS T2 ON T1.driverid = T2.driverid WHERE T2.q3 = \"0:01:54\" AND T2.raceid = 903"
        }
    },
    {
        "question_id": 862,
        "database": "formula_1",
        "evidence": "Bahrain Grand Prix refers to races.name = 'Bahrain Grand Prix'; drivers who finished the race refers to time is not empty (i.e. time IS NOT NULL);",
        "question": "For the Bahrain Grand Prix in 2007, how many drivers not finished the game?",
        "schema_used": {
            "drivers": [
                "driverid"
            ],
            "results": [
                "raceid",
                "driverid",
                "time"
            ],
            "races": [
                "raceid",
                "year",
                "name"
            ]
        },
        "gold": "SELECT COUNT(T3.driverId) FROM races AS T1 INNER JOIN results AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T1.year = 2007 AND T1.name = 'Bahrain Grand Prix' AND T2.time IS NULL",
        "candidates": {
            "4": "SELECT COUNT(*)  FROM results  WHERE raceId IN (SELECT raceId FROM races WHERE name = 'Bahrain Grand Prix' AND year = 2007)  AND time IS NULL;",
            "1": "SELECT COUNT(*)  FROM results r JOIN races ra ON r.raceId = ra.raceId WHERE ra.year = 2007 AND ra.name = 'Bahrain Grand Prix' AND r.time IS NULL;",
            "5": "SELECT COUNT(*) FROM races INNER JOIN results ON races.raceId = results.raceId WHERE races.name = 'Bahrain Grand Prix' AND races.year = 2007 AND results.time IS NULL",
            "2": "SELECT COUNT(*) FROM results WHERE raceId IN (SELECT raceId FROM races WHERE name = 'Bahrain Grand Prix' AND year = 2007) AND time IS NULL",
            "6": "SELECT COUNT(T2.driverId) FROM races AS T1 INNER JOIN results AS T2 ON T1.raceId = T2.raceId WHERE T1.name = 'Bahrain Grand Prix' AND T1.year = 2007 AND T2.time IS NULL",
            "3": "SELECT   COUNT(T2.driverId) FROM races AS T1 INNER JOIN results AS T2   ON T1.raceId = T2.raceId WHERE   T1.name = 'Bahrain Grand Prix' AND T1.year = 2007 AND T2.time IS NULL;"
        }
    },
    {
        "question_id": 863,
        "database": "formula_1",
        "evidence": "race number refers to raceId;",
        "question": "Show me the season page of year when the race No. 901 took place.",
        "schema_used": {
            "seasons": [
                "url",
                "year"
            ],
            "races": [
                "year",
                "raceid"
            ]
        },
        "gold": "SELECT T2.url FROM races AS T1 INNER JOIN seasons AS T2 ON T2.year = T1.year WHERE T1.raceId = 901",
        "candidates": {
            "4": "SELECT T2.url FROM races AS T1 INNER JOIN seasons AS T2 ON T1.year = T2.year WHERE T1.raceId = 901;",
            "1": "SELECT T2.url  FROM races AS T1  INNER JOIN seasons AS T2 ON T1.year = T2.year  WHERE T1.raceId = 901;",
            "5": "SELECT T1.url FROM seasons AS T1 INNER JOIN races AS T2 ON T1.year = T2.year WHERE T2.raceId = 901",
            "2": "SELECT T1.url FROM seasons AS T1 INNER JOIN races AS T2 ON T1.year = T2.year WHERE T2.raceId = 901",
            "6": "SELECT T2.url FROM races AS T1 JOIN seasons AS T2 ON T1.year = T2.year WHERE T1.raceid = 901",
            "3": "SELECT   T2.url FROM races AS T1 INNER JOIN seasons AS T2   ON T1.year = T2.year WHERE   T1.raceId = 901;"
        }
    },
    {
        "question_id": 864,
        "database": "formula_1",
        "evidence": "game and race are synonyms; drivers who finished the race should have record in time;",
        "question": "For the race happened on 2015/11/29, how many drivers finished the game?",
        "schema_used": {
            "results": [
                "driverid",
                "raceid",
                "time"
            ],
            "races": [
                "raceid",
                "date"
            ]
        },
        "gold": "SELECT COUNT(T2.driverId) FROM races AS T1 INNER JOIN results AS T2 ON T2.raceId = T1.raceId WHERE T1.date = '2015-11-29' AND T2.time IS NOT NULL",
        "candidates": {
            "1": "SELECT COUNT(driverId)  FROM results  WHERE raceId IN (     SELECT raceId      FROM races      WHERE date = '2015-11-29' )  AND time IS NOT NULL;",
            "5": "SELECT COUNT(*) FROM results WHERE raceId IN (SELECT raceId FROM races WHERE date = '2015-11-29' AND time IS NOT NULL)",
            "2": "SELECT COUNT(T1.driverId) FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T2.date = '2015-11-29' AND T1.time IS NOT NULL",
            "6": "SELECT COUNT(T2.driverid) FROM races AS T1 JOIN results AS T2 ON T1.raceid  =  T2.raceid WHERE T1.date  =  '2015-11-29' AND T2.Time IS NOT NULL",
            "3": "SELECT COUNT(T2.driverId) FROM races AS T1 INNER JOIN results AS T2 ON T1.raceId = T2.raceId WHERE T1.date = '2015-11-29' AND T2.time IS NOT NULL",
            "4": "SELECT COUNT(driverId)  FROM results  WHERE raceId IN (SELECT raceId FROM races WHERE date = '2015-11-29')  AND time != '+1 Lap' AND time != '+2 Laps' AND time != '+3 Laps' AND time != '+4 Laps' AND time != '+5 Laps' AND time != '+6 Laps' AND time != '+7 Laps' AND time != '+8 Laps' AND time != '+9 Laps' AND time != '+10 Laps' AND time != ' retired' AND time != ' out';"
        }
    },
    {
        "question_id": 865,
        "database": "formula_1",
        "evidence": "drivers who finished the race refers to time is not empty (i.e. time IS NOT NULL); race number refers to raceId; date of birth refers to drivers.dob; The larger the birthday value, the younger the person is, and vice versa;",
        "question": "For all the drivers who finished the game in race No. 592, who is the oldest?",
        "schema_used": {
            "drivers": [
                "forename",
                "surname",
                "driverid",
                "dob"
            ],
            "results": [
                "driverid",
                "raceid",
                "time"
            ]
        },
        "gold": "SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN results AS T2 ON T2.driverId = T1.driverId WHERE T2.raceId = 592 AND T2.time IS NOT NULL AND T1.dob IS NOT NULL ORDER BY T1.dob ASC LIMIT 1",
        "candidates": {
            "4": "SELECT T1.dob  FROM drivers AS T1  INNER JOIN results AS T2 ON T1.driverId = T2.driverId  WHERE T2.raceId = 592 AND T2.time IS NOT NULL  ORDER BY T1.dob DESC  LIMIT 1;",
            "2": "SELECT T1.dob FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId WHERE T2.raceId = 592 AND T2.time IS NOT NULL ORDER BY T1.dob LIMIT 1",
            "5": "SELECT T1.dob FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId WHERE T2.raceId = 592 AND T2.time IS NOT NULL ORDER BY T1.dob LIMIT 1",
            "6": "SELECT T2.dob FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.raceId = 592 AND T1.time IS NOT NULL ORDER BY T2.dob ASC LIMIT 1",
            "3": "SELECT   T1.driverId FROM drivers AS T1 INNER JOIN results AS T2   ON T1.driverId = T2.driverId WHERE   T2.raceId = 592 AND T2.time IS NOT NULL ORDER BY   T1.dob LIMIT 1;",
            "1": "SELECT T1.driverId, T2.fullname  FROM results AS T1  INNER JOIN drivers AS T2  ON T1.driverId = T2.driverId  WHERE T1.raceId = 592 AND T1.time IS NOT NULL  ORDER BY T2.dob ASC  LIMIT 1;"
        }
    },
    {
        "question_id": 866,
        "database": "formula_1",
        "evidence": "player and driver are synonyms; the lap time of 0:0M:SS refers to lapTime.time LIKE 'M:SS%';race number refers to raceId; introduction website of the drivers refers to url;",
        "question": "Who was the player that got the lap time of 0:01:27 in the race No. 161? Show his introduction website.",
        "schema_used": {
            "drivers": [
                "forename",
                "surname",
                "url",
                "driverid"
            ],
            "laptimes": [
                "driverid",
                "raceid",
                "time"
            ]
        },
        "gold": "SELECT DISTINCT T2.forename, T2.surname, T2.url FROM lapTimes AS T1 INNER JOIN drivers AS T2 ON T2.driverId = T1.driverId WHERE T1.raceId = 161 AND T1.time LIKE '1:27%'",
        "candidates": {
            "4": "SELECT T2.url  FROM lapTimes AS T1  INNER JOIN drivers AS T2  ON T1.driverId = T2.driverId  WHERE T1.raceId = 161 AND T1.time = '1:27.000';",
            "1": "SELECT T2.url  FROM lapTimes AS T1  INNER JOIN drivers AS T2  ON T1.driverId = T2.driverId  WHERE T1.raceId = 161 AND T1.time = '1:27.000';",
            "5": "SELECT T1.forename, T1.surname, T1.url FROM drivers AS T1 INNER JOIN lapTimes AS T2 ON T1.driverId = T2.driverId WHERE T2.raceId = 161 AND T2.time LIKE '0:01:27'",
            "2": "SELECT T1.forename, T1.surname, T1.url FROM drivers AS T1 INNER JOIN lapTimes AS T2 ON T1.driverId = T2.driverId WHERE T2.raceId = 161 AND T2.time LIKE '0:01:27'",
            "6": "SELECT T2.url FROM lapTimes AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.raceId = 161 AND T1.time = '0:01:27'",
            "3": "SELECT T2.url FROM lapTimes AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.raceId = 161 AND T1.time = '0:01:27'"
        }
    },
    {
        "question_id": 867,
        "database": "formula_1",
        "evidence": "fastest lap speed refers to MAX(fastestLapSpeed);",
        "question": "For the driver who set the fastest lap speed in race No.933, where does he come from?",
        "schema_used": {
            "drivers": [
                "nationality",
                "driverid"
            ],
            "results": [
                "driverid",
                "fastestlapspeed",
                "raceid",
                "fastestlaptime"
            ]
        },
        "gold": "SELECT T1.nationality FROM drivers AS T1 INNER JOIN results AS T2 ON T2.driverId = T1.driverId WHERE T2.raceId = 933 AND T2.fastestLapTime IS NOT NULL ORDER BY T2.fastestLapSpeed DESC LIMIT 1",
        "candidates": {
            "4": "SELECT T2.nationality  FROM results AS T1  INNER JOIN drivers AS T2  ON T1.driverId = T2.driverId  WHERE T1.raceId = 933  ORDER BY CAST(T1.fastestLapSpeed AS REAL) DESC  LIMIT 1;",
            "1": "SELECT T2.nationality  FROM results AS T1  INNER JOIN drivers AS T2  ON T1.driverId = T2.driverId  WHERE T1.raceId = 933  ORDER BY CAST(T1.fastestLapSpeed AS REAL) DESC  LIMIT 1;",
            "2": "SELECT T2.nationality FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.raceId = 933 ORDER BY CAST(T1.fastestLapSpeed AS REAL) DESC LIMIT 1",
            "5": "SELECT T1.nationality FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId WHERE T2.raceId = 933 ORDER BY T2.fastestLapSpeed DESC LIMIT 1",
            "6": "SELECT T2.nationality FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.raceId = 933 ORDER BY T1.fastestLapSpeed DESC LIMIT 1",
            "3": "SELECT   T2.nationality FROM results AS T1 INNER JOIN drivers AS T2   ON T1.driverId = T2.driverId WHERE   T1.raceId = 933 ORDER BY   T1.fastestLapSpeed DESC LIMIT 1;"
        }
    },
    {
        "question_id": 868,
        "database": "formula_1",
        "evidence": "location coordinates refers to (lat, lng); Malaysian Grand Prix refers to races.name = 'Malaysian Grand Prix'",
        "question": "Where is Malaysian Grand Prix held? Give the location coordinates.",
        "schema_used": {
            "circuits": [
                "lat",
                "lng",
                "circuitid"
            ],
            "races": [
                "circuitid",
                "name"
            ]
        },
        "gold": "SELECT DISTINCT T1.lat, T1.lng FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T2.name = 'Malaysian Grand Prix'",
        "candidates": {
            "2": "SELECT T2.lat, T2.lng FROM races AS T1 INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T1.name = 'Malaysian Grand Prix'",
            "4": "SELECT T2.lat, T2.lng  FROM races AS T1  INNER JOIN circuits AS T2  ON T1.circuitId = T2.circuitId  WHERE T1.name = 'Malaysian Grand Prix';",
            "1": "SELECT T2.lat, T2.lng  FROM races AS T1  INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitId  WHERE T1.name = 'Malaysian Grand Prix';",
            "5": "SELECT T1.lat, T1.lng FROM circuits AS T1 INNER JOIN races AS T2 ON T1.circuitId = T2.circuitId WHERE T2.name = 'Malaysian Grand Prix'",
            "6": "SELECT T2.lat, T2.lng FROM races AS T1 INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T1.name = 'Malaysian Grand Prix'",
            "3": "SELECT T2.lat, T2.lng FROM races AS T1 INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T1.name = 'Malaysian Grand Prix'"
        }
    },
    {
        "question_id": 869,
        "database": "formula_1",
        "evidence": "race number refers to raceId; constructor which got the highest point refers to MAX(constructorResults.points); introduction website of the constructor refers to url;",
        "question": "For the constructor which got the highest point in the race No. 9 , what is its introduction website?",
        "schema_used": {
            "constructors": [
                "url",
                "constructorid"
            ],
            "constructorresults": [
                "constructorid",
                "raceid",
                "points"
            ]
        },
        "gold": "SELECT T2.url FROM constructorResults AS T1 INNER JOIN constructors AS T2 ON T2.constructorId = T1.constructorId WHERE T1.raceId = 9 ORDER BY T1.points DESC LIMIT 1",
        "candidates": {
            "4": "SELECT T1.url  FROM constructors AS T1  INNER JOIN constructorResults AS T2 ON T1.constructorId = T2.constructorId  WHERE T2.raceId = 9  ORDER BY T2.points DESC  LIMIT 1;",
            "1": "SELECT T1.url  FROM constructors AS T1  INNER JOIN constructorResults AS T2 ON T1.constructorId = T2.constructorId  WHERE T2.raceId = 9  ORDER BY T2.points DESC  LIMIT 1;",
            "2": "SELECT T1.url FROM constructors AS T1 INNER JOIN constructorResults AS T2 ON T1.constructorId = T2.constructorId WHERE T2.raceId = 9 ORDER BY T2.points DESC LIMIT 1",
            "5": "SELECT T1.url FROM constructors AS T1 INNER JOIN constructorResults AS T2 ON T1.constructorId = T2.constructorId WHERE T2.raceId = 9 ORDER BY T2.points DESC LIMIT 1",
            "6": "SELECT T1.url FROM constructors AS T1 JOIN constructorResults AS T2 ON T1.constructorId = T2.constructorId WHERE T2.raceId = 9 ORDER BY T2.points DESC LIMIT 1",
            "3": "SELECT   T2.url FROM constructorResults AS T1 INNER JOIN constructors AS T2   ON T1.constructorId = T2.constructorId WHERE   T1.raceId = 9 ORDER BY   T1.points DESC LIMIT 1;"
        }
    },
    {
        "question_id": 870,
        "database": "formula_1",
        "evidence": "race number refers to raceId;",
        "question": "What's Lucas di Grassi's Q1 result in the race No. 345?",
        "schema_used": {
            "qualifying": [
                "q1",
                "driverid",
                "raceid"
            ],
            "drivers": [
                "driverid",
                "surname",
                "forename"
            ]
        },
        "gold": "SELECT T1.q1 FROM qualifying AS T1 INNER JOIN drivers AS T2 ON T2.driverId = T1.driverId WHERE T1.raceId = 345 AND T2.forename = 'Lucas' AND T2.surname = 'di Grassi'",
        "candidates": {
            "5": "SELECT q1  FROM qualifying  INNER JOIN drivers ON qualifying.driverId = drivers.driverId  WHERE  drivers.forename = 'Lucas' AND drivers.surname = 'di Grassi' AND qualifying.raceId = 345",
            "4": "SELECT T1.q1 FROM qualifying AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T2.forename = 'Lucas' AND T2.surname = 'di Grassi' AND T1.raceId = 345",
            "1": "SELECT T1.q1  FROM qualifying AS T1  INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId  WHERE T1.raceId = 345 AND T2.forename = 'Lucas' AND T2.surname = 'di Grassi';",
            "2": "SELECT T1.q1 FROM qualifying AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T2.forename = 'Lucas' AND T2.surname = 'di Grassi' AND T1.raceId = 345",
            "3": "SELECT   q1 FROM qualifying JOIN drivers   ON qualifying.driverId = drivers.driverId WHERE   forename = 'Lucas' AND surname = 'di Grassi' AND raceId = 345;",
            "6": "SELECT T2.q1 FROM drivers AS T1 JOIN qualifying AS T2 ON T1.driverid = T2.driverid WHERE T1.forename = \"Lucas\" AND T1.surname = \"di Grassi\" AND T2.raceid = 345"
        }
    },
    {
        "question_id": 871,
        "database": "formula_1",
        "evidence": "race number refers to raceId;",
        "question": "For the driver who had the Q2 time as 0:01:15 in race No. 347, where is he from?",
        "schema_used": {
            "drivers": [
                "nationality",
                "driverid"
            ],
            "qualifying": [
                "driverid",
                "raceid",
                "q2"
            ]
        },
        "gold": "SELECT DISTINCT T2.nationality FROM qualifying AS T1 INNER JOIN drivers AS T2 ON T2.driverId = T1.driverId WHERE T1.raceId = 347 AND T1.q2 LIKE '1:15%'",
        "candidates": {
            "4": "SELECT T1.nationality  FROM drivers AS T1  INNER JOIN qualifying AS T2 ON T1.driverId = T2.driverId  WHERE T2.raceId = 347 AND T2.q2 = '1:15.000'",
            "6": "SELECT T2.nationality FROM qualifying AS T1 JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.raceId = 347 AND T1.q2 = '0:01:15'",
            "1": "SELECT T1.nationality  FROM drivers AS T1  INNER JOIN qualifying AS T2 ON T1.driverId = T2.driverId  WHERE T2.raceId = 347 AND T2.q2 = '1:15.000';",
            "5": "SELECT T1.nationality FROM drivers AS T1 INNER JOIN qualifying AS T2 ON T1.driverId = T2.driverId WHERE T2.raceId = 347 AND T2.q2 = '0:01:15'",
            "2": "SELECT T1.nationality FROM drivers AS T1 INNER JOIN qualifying AS T2 ON T1.driverId = T2.driverId WHERE T2.raceId = 347 AND T2.q2 = '0:01:15'",
            "3": "SELECT   T1.nationality FROM drivers AS T1 INNER JOIN qualifying AS T2   ON T1.driverId = T2.driverId WHERE   T2.raceId = 347 AND T2.q2 = '0:01:15';"
        }
    },
    {
        "question_id": 872,
        "database": "formula_1",
        "evidence": "race number refers to raceId; had the Q3 time as 0:0M:SS refers to q3 LIKE 'M:SS%'",
        "question": "In the race No. 45, for the driver who had the Q3 time as 0:01:33, what is his abbreviated code?",
        "schema_used": {
            "drivers": [
                "code",
                "driverid"
            ],
            "qualifying": [
                "driverid",
                "raceid",
                "q3"
            ]
        },
        "gold": "SELECT T2.code FROM qualifying AS T1 INNER JOIN drivers AS T2 ON T2.driverId = T1.driverId WHERE T1.raceId = 45 AND T1.q3 LIKE '1:33%'",
        "candidates": {
            "4": "SELECT T1.code  FROM qualifying AS T2  INNER JOIN drivers AS T1  ON T2.driverId = T1.driverId  WHERE T2.raceId = 45 AND T2.q3 LIKE '1:33%';",
            "2": "SELECT T1.code FROM drivers AS T1 INNER JOIN qualifying AS T2 ON T1.driverId = T2.driverId WHERE T2.raceId = 45 AND T2.q3 LIKE '0:01:33'",
            "1": "SELECT T1.code  FROM drivers AS T1  INNER JOIN qualifying AS T2 ON T1.driverId = T2.driverId  WHERE T2.raceId = 45 AND T2.q3 LIKE '0:01:33';",
            "5": "SELECT T1.code FROM drivers AS T1 INNER JOIN qualifying AS T2 ON T1.driverId = T2.driverId WHERE T2.raceId = 45 AND T2.q3 LIKE '0:01:33'",
            "6": "SELECT T2.code FROM qualifying AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.raceId = 45 AND T1.q3 = \"0:01:33\"",
            "3": "SELECT   T1.code FROM drivers AS T1 INNER JOIN qualifying AS T2   ON T1.driverId = T2.driverId WHERE   T2.raceId = 45 AND T2.q3 = '0:01:33';"
        }
    },
    {
        "question_id": 873,
        "database": "formula_1",
        "evidence": "race number refers to raceId;",
        "question": "What is the actual finish time for Bruce McLaren in the race No.743?",
        "schema_used": {
            "results": [
                "time",
                "driverid",
                "raceid"
            ],
            "drivers": [
                "driverid",
                "surname",
                "forename"
            ]
        },
        "gold": "SELECT T2.time FROM drivers AS T1 INNER JOIN results AS T2 ON T2.driverId = T1.driverId WHERE T2.raceId = 743 AND T1.forename = 'Bruce' AND T1.surname = 'McLaren'",
        "candidates": {
            "4": "SELECT T1.time  FROM results AS T1  INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId  WHERE T2.surname = 'McLaren' AND T1.raceId = 743;",
            "5": "SELECT T1.time FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T2.surname = 'McLaren' AND T1.raceId = 743",
            "2": "SELECT T1.time FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.raceId = 743 AND T2.surname = 'McLaren'",
            "6": "SELECT T1.time FROM results AS T1 JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T2.surname = \"McLaren\" AND T1.raceId = 743",
            "1": "SELECT T1.time FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.raceId = 743 AND T2.surname = 'McLaren';",
            "3": "SELECT   T1.time FROM results AS T1 INNER JOIN drivers AS T2   ON T1.driverId = T2.driverId WHERE   T2.surname = 'McLaren' AND T1.raceId = 743;"
        }
    },
    {
        "question_id": 874,
        "database": "formula_1",
        "evidence": "finished second refers to position = 2;",
        "question": "Who finished second in the San Marino Grand Prix in 2006?",
        "schema_used": {
            "drivers": [
                "forename",
                "surname",
                "driverid"
            ],
            "results": [
                "raceid",
                "driverid",
                "position"
            ],
            "races": [
                "raceid",
                "year",
                "name"
            ]
        },
        "gold": "SELECT T3.forename, T3.surname FROM races AS T1 INNER JOIN results AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T1.year = 2006 AND T1.name = 'San Marino Grand Prix' AND T2.position = 2",
        "candidates": {
            "5": "SELECT T1.driverId FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T2.name = 'San Marino Grand Prix' AND T2.year = 2006 AND T1.position = 2",
            "4": "SELECT d.driverId, d.name  FROM drivers d  INNER JOIN results r ON d.driverId = r.driverId  INNER JOIN races ra ON r.raceId = ra.raceId  WHERE ra.name = 'San Marino Grand Prix' AND ra.year = 2006 AND r.position = 2;",
            "1": "SELECT d.forename, d.surname  FROM drivers d  JOIN results r ON d.driverId = r.driverId  JOIN races ra ON r.raceId = ra.raceId  WHERE ra.year = 2006 AND ra.name = 'San Marino Grand Prix' AND r.position = 2;",
            "2": "SELECT T1.forename,  T1.surname  FROM drivers AS T1  INNER JOIN results AS T2  ON T1.driverId = T2.driverId  INNER JOIN races AS T3  ON T2.raceId = T3.raceId  WHERE  T3.name = 'San Marino Grand Prix'  AND T3.year = 2006  AND T2.position = 2",
            "6": "SELECT T1.driverId FROM results AS T1 JOIN races AS T2 ON T1.raceid = T2.raceid WHERE T2.name = \"San Marino Grand Prix\" AND T2.year  =  2006 AND T1.position  =  2",
            "3": "SELECT   T1.driverId FROM results AS T1 INNER JOIN races AS T2   ON T1.raceId = T2.raceId WHERE   T2.name = 'San Marino Grand Prix' AND T2.year = 2006 AND T1.position = 2;"
        }
    },
    {
        "question_id": 875,
        "database": "formula_1",
        "evidence": "the season page refers to url; race number refers to raceId;",
        "question": "Show me the season page of year when the race No. 901 took place.",
        "schema_used": {
            "seasons": [
                "url",
                "year"
            ],
            "races": [
                "year",
                "raceid"
            ]
        },
        "gold": "SELECT T2.url FROM races AS T1 INNER JOIN seasons AS T2 ON T2.year = T1.year WHERE T1.raceId = 901",
        "candidates": {
            "4": "SELECT T2.url  FROM races AS T1  INNER JOIN seasons AS T2 ON T1.year = T2.year  WHERE T1.raceId = 901;",
            "1": "SELECT T2.url  FROM races AS T1  INNER JOIN seasons AS T2 ON T1.year = T2.year  WHERE T1.raceId = 901;",
            "6": "SELECT T2.url FROM races AS T1 INNER JOIN seasons AS T2 ON T1.year = T2.year WHERE T1.raceid = 901",
            "5": "SELECT T1.url FROM seasons AS T1 INNER JOIN races AS T2 ON T1.year = T2.year WHERE T2.raceId = 901",
            "2": "SELECT T1.url FROM seasons AS T1 INNER JOIN races AS T2 ON T1.year = T2.year WHERE T2.raceId = 901",
            "3": "SELECT   T2.url FROM races AS T1 INNER JOIN seasons AS T2   ON T1.year = T2.year WHERE   T1.raceId = 901;"
        }
    },
    {
        "question_id": 876,
        "database": "formula_1",
        "evidence": "game and race are synonyms; drivers who didn't finish the race should have record in time;",
        "question": "For the race happened in 2015/11/29, how many drivers did not finish the game?",
        "schema_used": {
            "results": [
                "driverid",
                "raceid",
                "time"
            ],
            "races": [
                "raceid",
                "date"
            ]
        },
        "gold": "SELECT COUNT(T2.driverId) FROM races AS T1 INNER JOIN results AS T2 ON T2.raceId = T1.raceId WHERE T1.date = '2015-11-29' AND T2.time IS NULL",
        "candidates": {
            "4": "SELECT COUNT(*)  FROM races AS R  INNER JOIN results AS Res  ON R.raceId = Res.raceId  WHERE R.date = '2015-11-29'  AND Res.time LIKE '+%';",
            "5": "SELECT COUNT(*) FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T2.date = '2015-11-29' AND T1.time LIKE '%%'",
            "2": "SELECT COUNT(*) FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T2.date = '2015-11-29' AND T1.statusId !=1",
            "6": "SELECT COUNT(*) FROM results AS T1 JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T2.date = \"2015-11-29\" AND T1.time IS NULL",
            "3": "SELECT   COUNT(T1.raceId) FROM results AS T1 INNER JOIN races AS T2   ON T1.raceId = T2.raceId WHERE   T2.date = '2015-11-29' AND T1.time IS NULL;",
            "1": "SELECT COUNT(*)  FROM results AS R INNER JOIN races AS Ra ON R.raceId = Ra.raceId WHERE Ra.date = '2015-11-29' AND R.time LIKE '+%';"
        }
    },
    {
        "question_id": 877,
        "database": "formula_1",
        "evidence": "race number refers to raceId; drivers who finished the race refers to time has value; the youngest is a driver where MAX(dob);",
        "question": "For all the drivers who finished the game in race No. 872, who is the youngest?",
        "schema_used": {
            "drivers": [
                "forename",
                "surname",
                "driverid",
                "dob"
            ],
            "results": [
                "driverid",
                "raceid",
                "time"
            ]
        },
        "gold": "SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN results AS T2 ON T2.driverId = T1.driverId WHERE T2.raceId = 872 AND T2.time IS NOT NULL ORDER BY T1.dob DESC LIMIT 1",
        "candidates": {
            "4": "SELECT T1.driverId, T2.dob  FROM results AS T1  INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId  WHERE T1.raceId = 872  ORDER BY T2.dob DESC  LIMIT 1;",
            "5": "SELECT T1.dob FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId WHERE T2.raceId = 872 ORDER BY T1.dob DESC LIMIT 1",
            "2": "SELECT T1.driverId FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.raceId = 872 AND T1.time <> 'NULL' ORDER BY T2.dob DESC LIMIT 1",
            "1": "SELECT T1.driverId, T2.forename, T2.surname  FROM results AS T1  INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId  WHERE T1.raceId = 872 AND T1.time != '+1 Lap' AND T1.time != '+2 Laps' ORDER BY T2.dob DESC  LIMIT 1;",
            "6": "SELECT T2.dob FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.raceId = 872 AND T1.time IS NOT NULL ORDER BY T2.dob DESC LIMIT 1",
            "3": "SELECT   T2.dob FROM results AS T1 INNER JOIN drivers AS T2   ON T1.driverId = T2.driverId WHERE   NOT T1.time IS NULL AND T1.raceId = 872 ORDER BY   T2.dob DESC LIMIT 1;"
        }
    },
    {
        "question_id": 878,
        "database": "formula_1",
        "evidence": "race number refers to raceId; the best lap time refers to MIN(time)",
        "question": "Who was the driver that got the best lap time in the race No. 348? Give his full name.",
        "schema_used": {
            "drivers": [
                "forename",
                "surname",
                "driverid"
            ],
            "laptimes": [
                "driverid",
                "raceid",
                "time"
            ]
        },
        "gold": "SELECT T2.forename, T2.surname FROM lapTimes AS T1 INNER JOIN drivers AS T2 ON T2.driverId = T1.driverId WHERE T1.raceId = 348 ORDER BY T1.time ASC LIMIT 1",
        "candidates": {
            "4": "SELECT T2.forename, T2.surname  FROM lapTimes AS T1  INNER JOIN drivers AS T2  ON T1.driverId = T2.driverId  WHERE T1.raceId = 348  ORDER BY T1.time ASC  LIMIT 1;",
            "5": "SELECT T1.forename,  T1.surname  FROM  drivers AS T1  INNER JOIN lapTimes AS T2  ON T1.driverId = T2.driverId  WHERE  T2.raceId = 348  ORDER BY  T2.time  LIMIT 1",
            "2": "SELECT T1.forename,  T1.surname  FROM drivers AS T1  INNER JOIN lapTimes AS T2  ON T1.driverId = T2.driverId  WHERE T2.raceId = 348  ORDER BY T2.time  LIMIT 1",
            "1": "SELECT T2.forename, T2.surname  FROM lapTimes AS T1  INNER JOIN drivers AS T2  ON T1.driverId = T2.driverId  WHERE T1.raceId = 348  ORDER BY T1.time ASC  LIMIT 1;",
            "6": "SELECT T2.forename, T2.surname FROM lapTimes AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.raceId = 348 ORDER BY T1.time ASC LIMIT 1",
            "3": "SELECT T2.forename, T2.surname FROM lapTimes AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.raceId = 348 ORDER BY T1.time LIMIT 1"
        }
    },
    {
        "question_id": 879,
        "database": "formula_1",
        "evidence": "the fastest lap speed refers to (MAX) fastestLapSpeed;",
        "question": "For the driver who set the fastest lap speed, what is his nationality?",
        "schema_used": {
            "drivers": [
                "nationality",
                "driverid"
            ],
            "results": [
                "driverid",
                "fastestlapspeed"
            ]
        },
        "gold": "SELECT T1.nationality FROM drivers AS T1 INNER JOIN results AS T2 ON T2.driverId = T1.driverId ORDER BY T2.fastestLapSpeed DESC LIMIT 1",
        "candidates": {
            "4": "SELECT T2.nationality  FROM results AS T1  INNER JOIN drivers AS T2  ON T1.driverId = T2.driverId  ORDER BY T1.fastestLapSpeed DESC  LIMIT 1;",
            "1": "SELECT T2.nationality  FROM results AS T1  INNER JOIN drivers AS T2  ON T1.driverId = T2.driverId  ORDER BY T1.fastestLapSpeed DESC  LIMIT 1;",
            "5": "SELECT T1.nationality FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId ORDER BY T2.fastestLapSpeed DESC LIMIT 1",
            "2": "SELECT T1.nationality FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId ORDER BY T2.fastestLapSpeed DESC LIMIT 1",
            "6": "SELECT T2.nationality FROM results AS T1 JOIN drivers AS T2 ON T1.driverId = T2.driverId ORDER BY T1.fastestLapSpeed DESC LIMIT 1",
            "3": "SELECT   T2.nationality FROM results AS T1 INNER JOIN drivers AS T2   ON T1.driverId = T2.driverId ORDER BY   T1.fastestLapSpeed DESC LIMIT 1;"
        }
    },
    {
        "question_id": 880,
        "database": "formula_1",
        "evidence": "Paul di Resta refers to the full name of the driver; Full name of the driver refers to drivers.forename ='Paul' and drivers.surname = 'di Resta'; race number refers to raceId; percentage = DIVIDE(SUBTRACT(fastestLapSpeed(raceId = 853), (fastestLapSpeed (raceId = 854)) * 100 , (fastestLapSpeed(raceId = 853))",
        "question": "Paul di Resta was in the No. 853 race, what percent faster did he finish in the 853rd race than the next race for the fastest lap speed?",
        "schema_used": {
            "results": [
                "driverid",
                "fastestlapspeed",
                "raceid"
            ],
            "drivers": [
                "driverid",
                "forename",
                "surname"
            ]
        },
        "gold": "SELECT (SUM(IIF(T2.raceId = 853, T2.fastestLapSpeed, 0)) - SUM(IIF(T2.raceId = 854, T2.fastestLapSpeed, 0))) * 100 / SUM(IIF(T2.raceId = 853, T2.fastestLapSpeed, 0)) FROM drivers AS T1 INNER JOIN results AS T2 ON T2.driverId = T1.driverId WHERE T1.forename = 'Paul' AND T1.surname = 'di Resta'",
        "candidates": {
            "5": "SELECT CAST(REPLACE(SUBSTR(T1.fastestLapSpeed, 1, LENGTH(T1.fastestLapSpeed) - 1), ',', '.') AS REAL) * 100 / (CAST(REPLACE(SUBSTR(T2.fastestLapSpeed, 1, LENGTH(T2.fastestLapSpeed) - 1), ',', '.') AS REAL)) FROM results AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId INNER JOIN drivers AS T3 ON T3.driverId = T1.driverId WHERE T3.forename = 'Paul' AND T3.surname = 'di Resta' AND T1.raceId = 853 AND T2.raceId = 854",
            "4": "SELECT      ((T1.fastestLapSpeed - T2.fastestLapSpeed) / T1.fastestLapSpeed) * 100 AS percentage_faster FROM      results AS T1  INNER JOIN      drivers AS D1 ON T1.driverId = D1.driverId INNER JOIN      results AS T2 ON T2.driverId = D1.driverId AND T2.raceId = T1.raceId + 1 WHERE      D1.forename = 'Paul' AND D1.surname = 'di Resta' AND T1.raceId = 853;",
            "1": "SELECT      ((CAST(T1.fastestLapSpeed AS REAL) - CAST(T2.fastestLapSpeed AS REAL)) / CAST(T1.fastestLapSpeed AS REAL)) * 100 AS speed_difference_percentage FROM      results AS T1  INNER JOIN      drivers AS T3 ON T1.driverId = T3.driverId  INNER JOIN      results AS T2 ON T2.driverId = T3.driverId AND T2.raceId = T1.raceId + 1 WHERE      T3.forename = 'Paul' AND T3.surname = 'di Resta' AND T1.raceId = 853;",
            "6": "SELECT CAST(T1.fastestLapSpeed - T2.fastestLapSpeed AS REAL) * 100 / T2.fastestLapSpeed FROM results AS T1 JOIN results AS T2 ON T2.raceId = T1.raceId + 1 JOIN drivers AS T3 ON T1.driverId = T3.driverId WHERE T3.forename = 'Paul' AND T3.surname = 'di Resta' AND T1.raceId = 853",
            "2": "SELECT CAST(REPLACE(SUBSTR(T1.fastestLapSpeed, 1, LENGTH(T1.fastestLapSpeed) - 2), ',', '') - REPLACE(SUBSTR(T2.fastestLapSpeed, 1, LENGTH(T2.fastestLapSpeed) - 2), ',', '') AS REAL) * 100 / REPLACE(SUBSTR(T1.fastestLapSpeed, 1, LENGTH(T1.fastestLapSpeed) - 2), ',', '') FROM results AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId INNER JOIN drivers AS T3 ON T3.driverId = T1.driverId WHERE T3.forename = 'Paul' AND T3.surname = 'di Resta' AND T1.raceId = 853 AND T2.raceId = 854",
            "3": "SELECT   CAST((     (       SELECT         T1.fastestLapSpeed       FROM results AS T1       INNER JOIN drivers AS T2         ON T1.driverId = T2.driverId       WHERE         T2.forename = 'Paul' AND T2.surname = 'di Resta' AND T1.raceId = 853     ) - (       SELECT         T1.fastestLapSpeed       FROM results AS T1       INNER JOIN drivers AS T2         ON T1.driverId = T2.driverId       WHERE         T2.forename = 'Paul' AND T2.surname = 'di Resta' AND T1.raceId = 854     )   ) AS REAL) * 100 / (     SELECT       T1.fastestLapSpeed     FROM results AS T1     INNER JOIN drivers AS T2       ON T1.driverId = T2.driverId     WHERE       T2.forename = 'Paul' AND T2.surname = 'di Resta' AND T1.raceId = 853   )"
        }
    },
    {
        "question_id": 881,
        "database": "formula_1",
        "evidence": "DIVIDE(COUNT(driverid when time has value ), (COUNT(driverid )) as percentage; in 1983/7/16 refers to when date = '1983-07-16'",
        "question": "For the drivers who took part in the race in 1983/7/16, what's their race completion rate?",
        "schema_used": {
            "results": [
                "raceid",
                "driverid",
                "time"
            ],
            "races": [
                "raceid",
                "date"
            ]
        },
        "gold": "SELECT CAST(COUNT(CASE WHEN T2.time IS NOT NULL THEN T2.driverId END) AS REAL) * 100 / COUNT(T2.driverId) FROM races AS T1 INNER JOIN results AS T2 ON T2.raceId = T1.raceId WHERE T1.date = '1983-07-16'",
        "candidates": {
            "4": "SELECT CAST(COUNT(CASE WHEN T2.time != '+\u9000\u5f79' THEN T2.driverId ELSE NULL END) AS REAL) * 100 / COUNT(T2.driverId)  FROM races AS T1  INNER JOIN results AS T2 ON T1.raceId = T2.raceId  WHERE T1.date = '1983-07-16'",
            "5": "SELECT CAST(SUM(CASE WHEN T1.time <> '' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T2.date = '1983-07-16'",
            "2": "SELECT CAST(SUM(CASE WHEN T1.time <> '' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T2.date = '1983-07-16'",
            "6": "SELECT CAST(SUM(CASE WHEN T2.time IS NOT NULL THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T2.driverId) FROM races AS T1 INNER JOIN results AS T2 ON T1.raceId = T2.raceId WHERE T1.date = '1983-07-16'",
            "3": "SELECT CAST(SUM(CASE WHEN T2.time IS NOT NULL THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T2.driverId) FROM races AS T1 INNER JOIN results AS T2 ON T1.raceId = T2.raceId WHERE T1.date = '1983-07-16'",
            "1": "SELECT CAST(COUNT(CASE WHEN T2.time != '+[0-9.]+[a-zA-Z]*' THEN 1 ELSE NULL END) AS REAL) * 100 / COUNT(T2.driverId) FROM races AS T1 INNER JOIN results AS T2 ON T1.raceId = T2.raceId WHERE T1.date = '1983-07-16';"
        }
    },
    {
        "question_id": 882,
        "database": "formula_1",
        "evidence": "the first race refers to race happened in min(year);",
        "question": "Which year was the first Singapore Grand Prix?",
        "schema_used": {
            "races": [
                "year",
                "name"
            ]
        },
        "gold": "SELECT year FROM races WHERE name = 'Singapore Grand Prix' ORDER BY year ASC LIMIT 1",
        "candidates": {
            "1": "SELECT MIN(year) AS first_singapore_gp_year FROM races WHERE name = 'Singapore Grand Prix';",
            "4": "SELECT MIN(year) AS first_singapore_grand_prix_year  FROM races  WHERE name = 'Singapore Grand Prix';",
            "5": "SELECT MIN(year) FROM races WHERE name = 'Singapore Grand Prix'",
            "2": "SELECT MIN(year) FROM races WHERE name = 'Singapore Grand Prix'",
            "6": "SELECT year FROM races WHERE name = \"Singapore Grand Prix\" ORDER BY YEAR ASC LIMIT 1",
            "3": "SELECT year FROM races WHERE name = 'Singapore Grand Prix' ORDER BY YEAR ASC LIMIT 1"
        }
    },
    {
        "question_id": 883,
        "database": "formula_1",
        "evidence": "",
        "question": "How many races were there in 2005? Name all the races in descending order.",
        "schema_used": {
            "races": [
                "name",
                "year"
            ]
        },
        "gold": "SELECT name FROM races WHERE year = 2005 ORDER BY name DESC",
        "candidates": {
            "4": "SELECT name  FROM races  WHERE year = 2005  ORDER BY name DESC;",
            "1": "SELECT COUNT(*) AS race_count, name FROM races WHERE year = 2005 GROUP BY name ORDER BY name DESC;",
            "5": "SELECT COUNT(name), name FROM races WHERE year = 2005 ORDER BY name DESC",
            "2": "SELECT COUNT(name), name FROM races WHERE year = 2005 ORDER BY name DESC",
            "6": "SELECT COUNT(*), name FROM races WHERE YEAR  =  2005 ORDER BY name DESC",
            "3": "SELECT COUNT(name), name FROM races WHERE YEAR = 2005 GROUP BY name ORDER BY name DESC"
        }
    },
    {
        "question_id": 884,
        "database": "formula_1",
        "evidence": "earliest recorded year and month refers to year = year(min(date)) and month = month(min(date));",
        "question": "List the names of all races that occurred in the earliest recorded year and month.",
        "schema_used": {
            "races": [
                "date",
                "name"
            ]
        },
        "gold": "SELECT name FROM races WHERE STRFTIME('%Y', date) = ( SELECT STRFTIME('%Y', date) FROM races ORDER BY date ASC LIMIT 1 ) AND STRFTIME('%m', date) = ( SELECT STRFTIME('%m', date) FROM races ORDER BY date ASC LIMIT 1 )",
        "candidates": {
            "4": "SELECT name  FROM races  WHERE (YEAR(date), MONTH(date)) = (SELECT YEAR(MIN(date)), MONTH(MIN(date)) FROM races)",
            "1": "SELECT name  FROM races  WHERE (YEAR(date), MONTH(date)) = (     SELECT MIN(YEAR(date)), MIN(MONTH(date))      FROM races )",
            "5": "SELECT name FROM races WHERE STRFTIME('%Y-%m', date) = ( SELECT MIN(STRFTIME('%Y-%m', date)) FROM races )",
            "2": "SELECT name FROM races WHERE STRFTIME('%Y-%m', date) = ( SELECT MIN(STRFTIME('%Y-%m', date)) FROM races )",
            "6": "SELECT name FROM races WHERE date LIKE ( SELECT MIN(date) FROM races )",
            "3": "SELECT name FROM races WHERE SUBSTR(date, 1, 7) = ( SELECT SUBSTR(date, 1, 7) FROM races ORDER BY date ASC LIMIT 1 )"
        }
    },
    {
        "question_id": 885,
        "database": "formula_1",
        "evidence": "the last round refers to max(round);",
        "question": "State the name and date of the last round of race in year 1999.",
        "schema_used": {
            "races": [
                "name",
                "date",
                "year",
                "round"
            ]
        },
        "gold": "SELECT name, date FROM races WHERE year = 1999 ORDER BY round DESC LIMIT 1",
        "candidates": {
            "4": "SELECT name, date  FROM races  WHERE year = 1999  ORDER BY round DESC  LIMIT 1;",
            "2": "SELECT name, date FROM races WHERE year = 1999 ORDER BY round DESC LIMIT 1",
            "1": "SELECT name, date  FROM races  WHERE year = 1999  ORDER BY round DESC  LIMIT 1;",
            "5": "SELECT name,  date  FROM races  WHERE year = 1999  ORDER BY round DESC  LIMIT 1",
            "6": "SELECT name ,  date FROM races WHERE YEAR  =  1999 ORDER BY round DESC LIMIT 1",
            "3": "SELECT name ,  date FROM races WHERE YEAR  = 1999 ORDER BY round DESC LIMIT 1"
        }
    },
    {
        "question_id": 886,
        "database": "formula_1",
        "evidence": "the most number of races refers to max(round);",
        "question": "Which year has the most number of races?",
        "schema_used": {
            "races": [
                "year",
                "round"
            ]
        },
        "gold": "SELECT year FROM races GROUP BY year ORDER BY COUNT(round) DESC LIMIT 1",
        "candidates": {
            "4": "SELECT year FROM races GROUP BY year ORDER BY COUNT(*) DESC LIMIT 1",
            "1": "SELECT year  FROM races  GROUP BY year  ORDER BY COUNT(*) DESC  LIMIT 1;",
            "5": "SELECT year FROM races GROUP BY year ORDER BY COUNT(*) DESC LIMIT 1",
            "2": "SELECT year FROM races GROUP BY year ORDER BY COUNT(round) DESC LIMIT 1",
            "6": "SELECT year FROM races GROUP BY YEAR ORDER BY COUNT(round) DESC LIMIT 1",
            "3": "SELECT   year FROM races GROUP BY   year ORDER BY   COUNT(round) DESC LIMIT 1;"
        }
    },
    {
        "question_id": 887,
        "database": "formula_1",
        "evidence": "not hosted means not in;",
        "question": "Name the races in year 2017 that are not hosted in year 2000.",
        "schema_used": {
            "races": [
                "name",
                "year"
            ]
        },
        "gold": "SELECT name FROM races WHERE year = 2017 AND name NOT IN ( SELECT name FROM races WHERE year = 2000 )",
        "candidates": {
            "4": "SELECT name FROM races WHERE year = 2017 AND name NOT IN (SELECT name FROM races WHERE year = 2000)",
            "1": "SELECT name  FROM races  WHERE year = 2017  AND circuitId NOT IN (SELECT circuitId FROM races WHERE year = 2000);",
            "5": "SELECT name FROM races WHERE year  =  2017 EXCEPT SELECT name FROM races WHERE year  =  2000",
            "2": "SELECT name FROM races WHERE year = 2017",
            "6": "SELECT name FROM races WHERE YEAR  =  2017 EXCEPT SELECT name FROM races WHERE YEAR  =  2000",
            "3": "SELECT name FROM races WHERE YEAR  =  2017 EXCEPT SELECT name FROM races WHERE YEAR  =  2000"
        }
    },
    {
        "question_id": 888,
        "database": "formula_1",
        "evidence": "the first refers to min(year);",
        "question": "In which country was the first European Grand Prix hosted? Name the circuit and location.",
        "schema_used": {
            "circuits": [
                "country",
                "location",
                "circuitid"
            ],
            "races": [
                "circuitid",
                "name",
                "year"
            ]
        },
        "gold": "SELECT T1.country, T1.location FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T2.name = 'European Grand Prix' ORDER BY T2.year ASC LIMIT 1",
        "candidates": {
            "4": "SELECT T2.name, T2.location, T2.country  FROM races AS T1  INNER JOIN circuits AS T2  ON T1.circuitId = T2.circuitId  WHERE T1.name = 'European Grand Prix'  ORDER BY T1.year ASC  LIMIT 1;",
            "1": "SELECT T2.name, T2.location, T2.country  FROM races AS T1  INNER JOIN circuits AS T2  ON T1.circuitId = T2.circuitId  WHERE T1.year = (SELECT MIN(year) FROM races WHERE name LIKE '%European Grand Prix%')  AND T1.name LIKE '%European Grand Prix%';",
            "5": "SELECT T1.country,  T2.name,  T2.location  FROM  circuits AS T1  INNER JOIN races AS T3  ON T1.circuitId = T3.circuitId  WHERE  T3.name = 'European Grand Prix'  ORDER BY  T3.year  LIMIT 1",
            "2": "SELECT T2.country,  T1.name,  T1.location  FROM  circuits AS T1  INNER JOIN  races AS T3  ON  T1.circuitId = T3.circuitId  INNER JOIN  races AS T4  ON  T4.circuitId = T1.circuitId  WHERE  T3.name = 'European Grand Prix'  GROUP BY  T1.circuitId  ORDER BY  MIN(T4.year)  LIMIT 1",
            "6": "SELECT T2.country ,  T2.name ,  T2.location FROM races AS T1 INNER JOIN circuits AS T2 ON T1.circuitId  =  T2.circuitId WHERE T1.name  =  'European Grand Prix' ORDER BY T1.year ASC LIMIT 1",
            "3": "SELECT   T2.country,   T2.name,   T2.location FROM races AS T1 INNER JOIN circuits AS T2   ON T1.circuitId = T2.circuitId WHERE   T1.name = 'European Grand Prix' ORDER BY   T1.year LIMIT 1;"
        }
    },
    {
        "question_id": 889,
        "database": "formula_1",
        "evidence": "the last refers to max(year);",
        "question": "When was the last f1 season whereby Brands Hatch hosted the British Grand Prix?",
        "schema_used": {
            "races": [
                "date",
                "circuitid",
                "year",
                "name"
            ],
            "circuits": [
                "circuitid",
                "name"
            ]
        },
        "gold": "SELECT T2.date FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Brands Hatch' AND T2.name = 'British Grand Prix' ORDER BY T2.year DESC LIMIT 1",
        "candidates": {
            "1": "SELECT MAX(r.year)  FROM races r JOIN circuits c ON r.circuitId = c.circuitId WHERE c.circuitRef = 'brands_hatch' AND r.name = 'British Grand Prix';",
            "4": "SELECT MAX(r.year)  FROM races r JOIN circuits c ON r.circuitId = c.circuitId WHERE c.circuitRef = 'brands_hatch' AND r.name = 'British Grand Prix';",
            "5": "SELECT MAX(year) FROM races WHERE name = 'British Grand Prix' AND circuitId = (SELECT circuitId FROM circuits WHERE circuitRef = 'brandshatch')",
            "2": "SELECT MAX(T1.year) FROM races AS T1 INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T2.circuitRef = 'brandshatch' AND T1.name = 'British Grand Prix'",
            "6": "SELECT T1.year FROM races AS T1 JOIN circuits AS T2 ON T1.circuitid  =  T2.circuitid WHERE T1.name  =  \"British Grand Prix\" AND T2.name  =  \"Brands Hatch\" ORDER BY T1.year DESC LIMIT 1",
            "3": "SELECT   MAX(T1.year) FROM races AS T1 INNER JOIN circuits AS T2   ON T1.circuitId = T2.circuitId WHERE   T2.name = 'Brands Hatch' AND T1.name = 'British Grand Prix';"
        }
    },
    {
        "question_id": 890,
        "database": "formula_1",
        "evidence": "British Grand Prix is the name of race; British refers to the United Kindom",
        "question": "How many seasons has Silverstone Circuit hosted the United Kindom grand prix?",
        "schema_used": {
            "races": [
                "circuitid",
                "name"
            ],
            "circuits": [
                "circuitid",
                "name"
            ]
        },
        "gold": "SELECT COUNT(T2.circuitid) FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Silverstone Circuit' AND T2.name = 'British Grand Prix'",
        "candidates": {
            "4": "SELECT COUNT(DISTINCT T1.year)  FROM races AS T1  INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitId  WHERE T1.name = 'British Grand Prix'",
            "2": "SELECT COUNT(T1.year) FROM races AS T1 INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T2.circuitRef = 'silverstone' AND T1.name = 'British Grand Prix'",
            "1": "SELECT COUNT(DISTINCT r.year)  FROM races r  INNER JOIN circuits c ON r.circuitId = c.circuitId  WHERE r.name = 'British Grand Prix';",
            "5": "SELECT COUNT(T1.year) FROM races AS T1 INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T1.name = 'British Grand Prix' AND T2.circuitRef = 'silverstone'",
            "3": "SELECT COUNT(T1.year) FROM races AS T1 INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T2.circuitRef = 'silverstone' AND T1.name = 'British Grand Prix'",
            "6": "SELECT COUNT(DISTINCT T1.year) FROM races AS T1 JOIN circuits AS T2 ON T1.circuitid  =  T2.circuitid WHERE T1.name  =  'British Grand Prix' AND T2.circuitRef  =  'silverstone'"
        }
    },
    {
        "question_id": 891,
        "database": "formula_1",
        "evidence": "",
        "question": "Name all drivers in the 2010 Singapore Grand Prix order by their position stands.",
        "schema_used": {
            "drivers": [
                "forename",
                "surname",
                "driverid"
            ],
            "driverstandings": [
                "raceid",
                "driverid",
                "position"
            ],
            "races": [
                "raceid",
                "name",
                "year"
            ]
        },
        "gold": "SELECT T3.forename, T3.surname FROM races AS T1 INNER JOIN driverStandings AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T1.name = 'Singapore Grand Prix' AND T1.year = 2010 ORDER BY T2.position ASC",
        "candidates": {
            "4": "SELECT T3.forename, T3.surname  FROM driverStandings AS T1  INNER JOIN races AS T2 ON T1.raceId = T2.raceId  INNER JOIN drivers AS T3 ON T1.driverId = T3.driverId  WHERE T2.year = 2010 AND T2.name = 'Singapore Grand Prix'  ORDER BY T1.position;",
            "1": "SELECT d.forename, d.surname  FROM driverStandings ds INNER JOIN races r ON ds.raceId = r.raceId INNER JOIN drivers d ON ds.driverId = d.driverId WHERE r.year = 2010 AND r.name = 'Singapore Grand Prix' ORDER BY ds.position;",
            "5": "SELECT T1.forename,  T1.surname  FROM drivers AS T1  INNER JOIN driverStandings AS T2  ON T1.driverId = T2.driverId  INNER JOIN races AS T3  ON T2.raceId = T3.raceId  WHERE  T3.year = 2010  AND T3.name = 'Singapore Grand Prix'  ORDER BY T2.position",
            "2": "SELECT T1.forename,  T1.surname  FROM drivers AS T1  INNER JOIN driverStandings AS T2  ON T1.driverId = T2.driverId  INNER JOIN races AS T3  ON T2.raceId = T3.raceId  WHERE  T3.year = 2010 AND T3.name = 'Singapore Grand Prix'  ORDER BY T2.position",
            "6": "SELECT T3.forename, T3.surname FROM races AS T1 JOIN driverStandings AS T2 ON T1.raceId = T2.raceId JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T1.name = \"Singapore Grand Prix\" AND T1.year = 2010 ORDER BY T2.position",
            "3": "SELECT T3.forename ,  T3.surname FROM driverStandings AS T1 JOIN races AS T2 ON T1.raceId  =  T2.raceId JOIN drivers AS T3 ON T1.driverId  =  T3.driverId WHERE T2.year  =  2010 AND T2.name  =  \"Singapore Grand Prix\" ORDER BY T1.position"
        }
    },
    {
        "question_id": 892,
        "database": "formula_1",
        "evidence": "the most points scored refers to max(points); Full name of the driver refers to drivers.forename and drivers.surname;",
        "question": "State the driver with the most points scored. Find his full name with that points.",
        "schema_used": {
            "drivers": [
                "forename",
                "surname",
                "driverid"
            ],
            "driverstandings": [
                "points",
                "raceid",
                "driverid"
            ],
            "races": [
                "raceid"
            ]
        },
        "gold": "SELECT T3.forename, T3.surname, T2.points FROM races AS T1 INNER JOIN driverStandings AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId ORDER BY T2.points DESC LIMIT 1",
        "candidates": {
            "4": "SELECT T2.forename, T2.surname FROM driverStandings AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId ORDER BY T1.points DESC LIMIT 1",
            "1": "SELECT T2.forename, T2.surname  FROM driverStandings AS T1  INNER JOIN drivers AS T2  ON T1.driverId = T2.driverId  ORDER BY T1.points DESC  LIMIT 1;",
            "2": "SELECT SUM(T1.points), T2.forename, T2.surname FROM driverStandings AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId GROUP BY T1.driverId ORDER BY SUM(T1.points) DESC LIMIT 1",
            "5": "SELECT T1.forename,  T1.surname,  SUM(T2.points)  FROM drivers AS T1  INNER JOIN driverStandings AS T2  ON T1.driverId = T2.driverId  GROUP BY T1.driverId  ORDER BY SUM(T2.points) DESC  LIMIT 1",
            "6": "SELECT T2.forename, T2.surname, T1.points FROM driverStandings AS T1 JOIN drivers AS T2 ON T1.driverId = T2.driverId ORDER BY T1.points DESC LIMIT 1",
            "3": "SELECT T2.forename, T2.surname, T1.points FROM driverStandings AS T1 JOIN drivers AS T2 ON T1.driverId = T2.driverId ORDER BY T1.points DESC LIMIT 1"
        }
    },
    {
        "question_id": 893,
        "database": "formula_1",
        "evidence": "",
        "question": "Name the top 3 drivers and the points they scored in the 2017 Chinese Grand Prix.",
        "schema_used": {
            "drivers": [
                "forename",
                "surname",
                "driverid"
            ],
            "driverstandings": [
                "points",
                "raceid",
                "driverid"
            ],
            "races": [
                "raceid",
                "name",
                "year"
            ]
        },
        "gold": "SELECT T3.forename, T3.surname, T2.points FROM races AS T1 INNER JOIN driverStandings AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T1.name = 'Chinese Grand Prix' AND T1.year = 2017 ORDER BY T2.points DESC LIMIT 3",
        "candidates": {
            "4": "SELECT T3.forename, T3.surname, T1.points  FROM driverStandings AS T1  INNER JOIN races AS T2 ON T1.raceId = T2.raceId  INNER JOIN drivers AS T3 ON T1.driverId = T3.driverId  WHERE T2.year = 2017 AND T2.name = 'Chinese Grand Prix' ORDER BY T1.points DESC  LIMIT 3;",
            "1": "SELECT T3.forename, T3.surname, T1.points FROM driverStandings AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId INNER JOIN drivers AS T3 ON T1.driverId = T3.driverId WHERE T2.year = 2017 AND T2.name = 'Chinese Grand Prix' ORDER BY T1.points DESC LIMIT 3;",
            "5": "SELECT T1.forename,  T1.surname,  SUM(T2.points)  FROM drivers AS T1  INNER JOIN driverStandings AS T2  ON T1.driverId = T2.driverId  INNER JOIN races AS T3  ON T2.raceId = T3.raceId  WHERE  T3.year = 2017 AND T3.name = 'Chinese Grand Prix'  GROUP BY  T1.driverId  ORDER BY  SUM(T2.points) DESC  LIMIT 3",
            "2": "SELECT T1.forename,  T1.surname,  SUM(T2.points)  FROM drivers AS T1  INNER JOIN driverStandings AS T2  ON T1.driverId = T2.driverId  INNER JOIN races AS T3  ON T2.raceId = T3.raceId  WHERE  T3.name = 'Chinese Grand Prix'  AND T3.year = 2017  GROUP BY  T1.driverId  ORDER BY  SUM(T2.points) DESC  LIMIT 3",
            "6": "SELECT T3.forename, T3.surname, T1.points FROM driverStandings AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId INNER JOIN drivers AS T3 ON T1.driverId = T3.driverId WHERE T2.year = 2017 AND T2.name = 'Chinese Grand Prix' ORDER BY T1.points DESC LIMIT 3",
            "3": "SELECT   T1.forename,   T1.surname,   T3.points FROM drivers AS T1 INNER JOIN driverStandings AS T3   ON T1.driverId = T3.driverId INNER JOIN races AS T2   ON T3.raceId = T2.raceId WHERE   T2.year = 2017 AND T2.name = 'Chinese Grand Prix' ORDER BY   T3.points DESC LIMIT 3;"
        }
    },
    {
        "question_id": 894,
        "database": "formula_1",
        "evidence": "the best lap time refers to min(milliseconds); List the driver refers to drivers.forename and drivers.surname; List the race refers to races.name",
        "question": "What is the best lap time recorded? List the driver and race with such recorded lap time.",
        "schema_used": {
            "laptimes": [
                "milliseconds",
                "driverid",
                "raceid"
            ],
            "drivers": [
                "forename",
                "surname",
                "driverid"
            ],
            "races": [
                "name",
                "raceid"
            ]
        },
        "gold": "SELECT T2.milliseconds, T1.forename, T1.surname, T3.name FROM drivers AS T1 INNER JOIN lapTimes AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T2.raceId = T3.raceId ORDER BY T2.milliseconds ASC LIMIT 1",
        "candidates": {
            "4": "SELECT MIN(T2.milliseconds) AS best_lap_time, T3.forename, T3.surname, T1.name AS race_name FROM races AS T1 INNER JOIN lapTimes AS T2 ON T1.raceId = T2.raceId INNER JOIN drivers AS T3 ON T2.driverId = T3.driverId",
            "1": "SELECT      d.forename,      d.surname,      r.name,      MIN(lt.milliseconds) AS best_lap_time FROM      lapTimes AS lt JOIN      drivers AS d ON lt.driverId = d.driverId JOIN      races AS r ON lt.raceId = r.raceId GROUP BY      d.driverId, r.raceId ORDER BY      best_lap_time ASC LIMIT 1;",
            "5": "SELECT MIN(T1.milliseconds),  T3.forename,  T3.surname,  T2.name  FROM lapTimes AS T1  INNER JOIN races AS T2  ON T1.raceId = T2.raceId  INNER JOIN drivers AS T3  ON T1.driverId = T3.driverId  GROUP BY  T1.milliseconds  ORDER BY  T1.milliseconds  LIMIT 1",
            "2": "SELECT MIN(T1.milliseconds),  T3.forename,  T3.surname,  T2.name  FROM lapTimes AS T1  INNER JOIN races AS T2  ON T1.raceId = T2.raceId  INNER JOIN drivers AS T3  ON T1.driverId = T3.driverId  GROUP BY  T1.milliseconds  ORDER BY  T1.milliseconds  LIMIT 1",
            "3": "SELECT T1.forename, T1.surname, T3.name FROM drivers AS T1 INNER JOIN lapTimes AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T2.raceId = T3.raceId ORDER BY T2.milliseconds LIMIT 1",
            "6": "SELECT T3.forename ,  T3.surname ,  T1.milliseconds ,  T2.name FROM lapTimes AS T1 JOIN races AS T2 ON T1.raceId  =  T2.raceId JOIN drivers AS T3 ON T1.driverId  =  T3.driverId ORDER BY T1.milliseconds ASC LIMIT 1"
        }
    },
    {
        "question_id": 895,
        "database": "formula_1",
        "evidence": "average lap time = AVG(milliseconds); 'Lewis Hamilton' refers to the full name of the driver; Full name of the driver refers to drivers.forename and drivers.surname; 'Malaysian Grand Prix' refers to races.name = 'Malaysian Grand Prix'",
        "question": "What is the average lap time for Lewis Hamilton in the 2009 Malaysian Grand Prix?",
        "schema_used": {
            "laptimes": [
                "milliseconds",
                "raceid",
                "driverid"
            ],
            "races": [
                "raceid",
                "name",
                "year"
            ],
            "drivers": [
                "driverid",
                "forename",
                "surname"
            ]
        },
        "gold": "SELECT AVG(T2.milliseconds) FROM races AS T1 INNER JOIN lapTimes AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T3.forename = 'Lewis' AND T3.surname = 'Hamilton' AND T1.year = 2009 AND T1.name = 'Malaysian Grand Prix'",
        "candidates": {
            "4": "SELECT AVG(T3.milliseconds)  FROM races AS T1  INNER JOIN lapTimes AS T3 ON T1.raceId = T3.raceId  INNER JOIN drivers AS T2 ON T3.driverId = T2.driverId  WHERE T1.year = 2009 AND T1.name = 'Malaysian Grand Prix' AND T2.forename = 'Lewis' AND T2.surname = 'Hamilton';",
            "1": "SELECT AVG(T3.milliseconds)  FROM races AS T1  INNER JOIN lapTimes AS T2 ON T1.raceId = T2.raceId  INNER JOIN drivers AS T3 ON T2.driverId = T3.driverId  WHERE T1.year = 2009 AND T1.name = 'Malaysian Grand Prix' AND T3.forename = 'Lewis' AND T3.surname = 'Hamilton';",
            "5": "SELECT AVG(T1.milliseconds) FROM lapTimes AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T1.raceId = T3.raceId WHERE T2.forename = 'Lewis' AND T2.surname = 'Hamilton' AND T3.name = 'Malaysian Grand Prix' AND T3.year = 2009",
            "2": "SELECT AVG(T1.milliseconds) FROM lapTimes AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId INNER JOIN drivers AS T3 ON T1.driverId = T3.driverId WHERE T3.forename = 'Lewis' AND T3.surname = 'Hamilton' AND T2.name = 'Malaysian Grand Prix' AND T2.year = 2009",
            "6": "SELECT AVG(T1.milliseconds) FROM lapTimes AS T1 JOIN races AS T2 ON T1.raceId = T2.raceId JOIN drivers AS T3 ON T1.driverId = T3.driverId WHERE T3.forename = \"Lewis\" AND T3.surname = \"Hamilton\" AND T2.year = 2009 AND T2.name = \"Malaysian Grand Prix\"",
            "3": "SELECT AVG(T1.milliseconds) FROM lapTimes AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T1.raceId = T3.raceId WHERE T2.forename = 'Lewis' AND T2.surname = 'Hamilton' AND T3.year = 2009 AND T3.name = 'Malaysian Grand Prix'"
        }
    },
    {
        "question_id": 896,
        "database": "formula_1",
        "evidence": "percentage = DIVIDE(COUNT(raceId) where surname = 'Hamilton' and position>1), (COUNT(raceId) where surname = 'Hamilton'); since 2010 refers to year >= 2010",
        "question": "Calculate the percentage whereby Hamilton was not at the 1st track of the the f1 circuit since 2010.",
        "schema_used": {
            "driverstandings": [
                "raceid",
                "driverid",
                "driverstandingsid",
                "position"
            ],
            "races": [
                "raceid",
                "year"
            ],
            "drivers": [
                "driverid",
                "surname"
            ]
        },
        "gold": "SELECT CAST(COUNT(CASE WHEN T2.position <> 1 THEN T2.position END) AS REAL) * 100 / COUNT(T2.driverStandingsId) FROM races AS T1 INNER JOIN driverStandings AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T3.surname = 'Hamilton' AND T1.year >= 2010",
        "candidates": {
            "4": "SELECT CAST(SUM(CASE WHEN T3.surname = 'Hamilton' AND T2.position > 1 THEN 1 ELSE 0 END) AS REAL) * 100 / SUM(CASE WHEN T3.surname = 'Hamilton' THEN 1 ELSE 0 END)  FROM races AS T1  INNER JOIN results AS T2 ON T1.raceId = T2.raceId  INNER JOIN drivers AS T3 ON T2.driverId = T3.driverId  WHERE T1.year >= 2010;",
            "5": "SELECT CAST(SUM(CASE WHEN T1.position > 1 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T1.raceId = T3.raceId WHERE T2.surname = 'Hamilton' AND T3.year >= 2010",
            "2": "SELECT CAST(SUM(CASE WHEN T1.position > 1 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T1.raceId = T3.raceId WHERE T2.surname = 'Hamilton' AND T3.year >= 2010",
            "6": "SELECT CAST(SUM(CASE WHEN T3.surname = 'Hamilton' AND T2.position != 1 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.raceid) FROM races AS T1 INNER JOIN results AS T2 ON T1.raceid = T2.raceid INNER JOIN drivers AS T3 ON T2.driverid = T3.driverid WHERE T1.year >= 2010",
            "3": "SELECT CAST(SUM(CASE WHEN T1.position > 1 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.position) FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T1.raceId = T3.raceId WHERE T3.year >= 2010 AND T2.surname = 'Hamilton'",
            "1": "SELECT CAST(SUM(CASE WHEN T3.surname = 'Hamilton' AND T2.position > 1 THEN 1 ELSE 0 END) AS REAL) * 100 / SUM(CASE WHEN T3.surname = 'Hamilton' THEN 1 ELSE 0 END)  FROM races AS T1  INNER JOIN results AS T2 ON T1.raceId = T2.raceId  INNER JOIN drivers AS T3 ON T2.driverId = T3.driverId  WHERE T1.year >= 2010;"
        }
    },
    {
        "question_id": 897,
        "database": "formula_1",
        "evidence": "Full name of the driver refers to drivers.forename and drivers.surname; the most winning refers to MAX(COUNT(wins)); average point scores refers to MAX(points);",
        "question": "Name the driver with the most winning. Mention his nationality and what is his maximum point scores.",
        "schema_used": {
            "drivers": [
                "forename",
                "surname",
                "nationality",
                "driverid"
            ],
            "driverstandings": [
                "points",
                "driverid",
                "wins"
            ]
        },
        "gold": "SELECT T1.forename, T1.surname, T1.nationality, MAX(T2.points) FROM drivers AS T1 INNER JOIN driverStandings AS T2 ON T2.driverId = T1.driverId WHERE T2.wins >= 1 GROUP BY T1.forename, T1.surname, T1.nationality ORDER BY COUNT(T2.wins) DESC LIMIT 1",
        "candidates": {
            "5": "SELECT T1.forename, T1.surname, T1.nationality, MAX(T2.points) FROM drivers AS T1 INNER JOIN driverStandings AS T2 ON T1.driverId = T2.driverId GROUP BY T1.driverId ORDER BY SUM(T2.wins) DESC LIMIT 1",
            "2": "SELECT T1.forename,  T1.surname,  T1.nationality,  MAX(T2.points)  FROM drivers AS T1  INNER JOIN driverStandings AS T2  ON T1.driverId = T2.driverId  GROUP BY  T1.driverId  ORDER BY  SUM(T2.wins) DESC  LIMIT 1",
            "6": "SELECT T2.forename ,  T2.surname ,  T2.nationality ,  max(T1.points) FROM driverStandings AS T1 JOIN drivers AS T2 ON T1.driverId  =  T2.driverId GROUP BY T1.driverId ORDER BY sum(T1.wins) DESC LIMIT 1",
            "1": "SELECT      d.forename,      d.surname,      d.nationality,      MAX(ds.points) AS max_points FROM      driverStandings ds INNER JOIN      drivers d ON ds.driverId = d.driverId GROUP BY      ds.driverId ORDER BY      SUM(ds.wins) DESC,      MAX(ds.points) DESC LIMIT 1;",
            "3": "SELECT   T2.forename,   T2.surname,   T2.nationality,   MAX(T1.points) FROM driverStandings AS T1 INNER JOIN drivers AS T2   ON T1.driverId = T2.driverId GROUP BY   T2.forename,   T2.surname,   T2.nationality ORDER BY   SUM(T1.wins) DESC LIMIT 1;",
            "4": "SELECT      d.forename,      d.surname,      d.nationality,      MAX(ds.points) FROM      driverStandings ds INNER JOIN      drivers d ON ds.driverId = d.driverId GROUP BY      ds.driverId ORDER BY      COUNT(ds.wins) DESC,      ds.points DESC LIMIT 1;"
        }
    },
    {
        "question_id": 898,
        "database": "formula_1",
        "evidence": "date of birth refers to drivers.dob; The larger the birthday value, the younger the person is, and vice versa; Japanese refers to nationality = 'Japanese'; age = YEAR(CURRENT_TIMESTAMP) - YEAR(dob);",
        "question": "How old is the youngest Japanese driver? What is his name?",
        "schema_used": {
            "drivers": [
                "forename",
                "surname",
                "nationality",
                "dob"
            ]
        },
        "gold": "SELECT STRFTIME('%Y', CURRENT_TIMESTAMP) - STRFTIME('%Y', dob), forename , surname FROM drivers WHERE nationality = 'Japanese' ORDER BY dob DESC LIMIT 1",
        "candidates": {
            "1": "SELECT forename, surname, (strftime('%Y', 'now') - strftime('%Y', dob)) AS age  FROM drivers  WHERE nationality = 'Japanese'  ORDER BY age ASC  LIMIT 1;",
            "5": "SELECT STRFTIME('%Y', 'now') - STRFTIME('%Y', dob), forename, surname FROM drivers WHERE nationality = 'Japanese' ORDER BY dob DESC LIMIT 1",
            "2": "SELECT STRFTIME('%Y', 'now') - STRFTIME('%Y', dob), forename, surname FROM drivers WHERE nationality = 'Japanese' ORDER BY dob DESC LIMIT 1",
            "6": "SELECT STRFTIME('%Y', 'now') - STRFTIME('%Y', dob), forename, surname FROM drivers WHERE nationality = 'Japanese' ORDER BY dob DESC LIMIT 1",
            "4": "SELECT forename, surname, (strftime('%Y', 'now') - strftime('%Y', dob)) AS age  FROM drivers  WHERE nationality = 'Japanese'  ORDER BY dob DESC  LIMIT 1;",
            "3": "SELECT   STRFTIME('%Y', 'now') - STRFTIME('%Y', dob),   forename,   surname FROM drivers WHERE   nationality = 'Japanese' ORDER BY   dob DESC LIMIT 1;"
        }
    },
    {
        "question_id": 899,
        "database": "formula_1",
        "evidence": "from year 1990 to 2000 refers to year(date) between 1990 and 2000;",
        "question": "List circuits which host 4 f1 races from year 1990 to 2000.",
        "schema_used": {
            "circuits": [
                "name",
                "circuitid"
            ],
            "races": [
                "circuitid",
                "raceid",
                "date"
            ]
        },
        "gold": "SELECT DISTINCT T1.name FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE STRFTIME('%Y', T2.date) BETWEEN '1990' AND '2000' GROUP BY T1.name HAVING COUNT(T2.raceId) = 4",
        "candidates": {
            "1": "SELECT c.circuitId, c.name FROM circuits c JOIN races r ON c.circuitId = r.circuitId WHERE strftime('%Y', r.date) BETWEEN '1990' AND '2000' GROUP BY c.circuitId, c.name HAVING COUNT(r.raceId) = 4;",
            "4": "SELECT c.circuitId, c.name FROM circuits AS c INNER JOIN (     SELECT r.circuitId     FROM races AS r     WHERE strftime('%Y', r.date) BETWEEN '1990' AND '2000'     GROUP BY r.circuitId     HAVING COUNT(r.circuitId) = 4 ) AS subquery ON c.circuitId = subquery.circuitId;",
            "5": "SELECT T1.name FROM circuits AS T1 INNER JOIN races AS T2 ON T1.circuitId = T2.circuitId WHERE STRFTIME('%Y', T2.date) BETWEEN '1990' AND '2000' GROUP BY T1.circuitId HAVING COUNT(*)  >=  4",
            "2": "SELECT T1.name FROM circuits AS T1 INNER JOIN races AS T2 ON T1.circuitId = T2.circuitId WHERE STRFTIME('%Y', T2.date) BETWEEN '1990' AND '2000' GROUP BY T1.circuitId HAVING COUNT(*)  =  4",
            "6": "SELECT T2.name FROM races AS T1 JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T1.date BETWEEN '1990-01-01' AND '2000-12-31' GROUP BY T2.name HAVING COUNT(T1.circuitId)  =  4",
            "3": "SELECT T2.name FROM races AS T1 JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T1.date BETWEEN '1990-01-01' AND '2000-12-31' GROUP BY T2.circuitId HAVING COUNT(T1.circuitId)  =  4"
        }
    },
    {
        "question_id": 900,
        "database": "formula_1",
        "evidence": "",
        "question": "List circuits in USA which hosted f1 races in 2006. State the name and location of circuit and the name of the race it hosted.",
        "schema_used": {
            "circuits": [
                "name",
                "location",
                "circuitid",
                "country"
            ],
            "races": [
                "name",
                "circuitid",
                "year"
            ]
        },
        "gold": "SELECT T1.name, T1.location, T2.name FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.country = 'USA' AND T2.year = 2006",
        "candidates": {
            "4": "SELECT T2.name AS circuit_name, T2.location, T1.name AS race_name  FROM races AS T1  INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitId  WHERE T1.year = 2006 AND T2.country = 'USA';",
            "1": "SELECT T2.name AS circuit_name, T2.location, T1.name AS race_name FROM races AS T1 INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T1.year = 2006 AND T2.country = 'USA';",
            "2": "SELECT T1.name,  T1.location,  T2.name  FROM  circuits AS T1  INNER JOIN races AS T2  ON T1.circuitId = T2.circuitId  WHERE  T1.country = 'USA'  AND  T2.year = 2006",
            "5": "SELECT T1.name,  T2.location,  T3.name  FROM  circuits AS T1  INNER JOIN races AS T3  ON T1.circuitId = T3.circuitId  INNER JOIN races AS T2  ON T1.circuitId = T2.circuitId  WHERE  T1.country = 'USA'  AND  T3.year = 2006",
            "6": "SELECT T2.name ,  T2.location ,  T1.name FROM races AS T1 JOIN circuits AS T2 ON T1.circuitId  =  T2.circuitId WHERE T2.country  =  \"USA\" AND T1.year  =  2006",
            "3": "SELECT   T1.name,   T1.location,   T2.name FROM circuits AS T1 INNER JOIN races AS T2   ON T1.circuitId = T2.circuitId WHERE   T1.country = 'USA' AND T2.year = 2006;"
        }
    },
    {
        "question_id": 901,
        "database": "formula_1",
        "evidence": "in September 2005 refers to MONTH(date) = 9 and YEAR(date) = 2005",
        "question": "Name the races along with its circuit name and location for f1 races hosted in September 2005.",
        "schema_used": {
            "races": [
                "name",
                "circuitid",
                "year",
                "date"
            ],
            "circuits": [
                "name",
                "location",
                "circuitid"
            ]
        },
        "gold": "SELECT DISTINCT T2.name, T1.name, T1.location FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T2.year = 2005 AND STRFTIME('%m', T2.date) = '09'",
        "candidates": {
            "4": "SELECT races.name, circuits.circuitRef, circuits.location  FROM races  INNER JOIN circuits ON races.circuitId = circuits.circuitId  WHERE STRFTIME('%Y', races.date) = '2005' AND STRFTIME('%m', races.date) = '09'",
            "5": "SELECT T1.name,  T2.location  FROM races AS T1 INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitId  WHERE STRFTIME('%Y', T1.date) = '2005' AND STRFTIME('%m', T1.date) = '09'",
            "1": "SELECT r.name AS race_name, c.circuitRef AS circuit_name, c.location AS circuit_location FROM races r JOIN circuits c ON r.circuitId = c.circuitId WHERE strftime('%Y', r.date) = '2005' AND strftime('%m', r.date) = '09';",
            "2": "SELECT T1.name, T2.name, T2.location FROM races AS T1 INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE STRFTIME('%Y', T1.date) = '2005' AND STRFTIME('%m', T1.date) = '09'",
            "6": "SELECT T1.name ,  T2.name ,  T2.location FROM races AS T1 JOIN circuits AS T2 ON T1.circuitid  =  T2.circuitid WHERE STRFTIME('%m', T1.date)  =  '09' AND STRFTIME('%Y', T1.date)  =  '2005'",
            "3": "SELECT   T1.name,   T3.name,   T3.location FROM races AS T1 INNER JOIN circuits AS T3   ON T1.circuitId = T3.circuitId WHERE   STRFTIME('%m', T1.date) = '09' AND STRFTIME('%Y', T1.date) = '2005';"
        }
    },
    {
        "question_id": 902,
        "database": "formula_1",
        "evidence": "Alex Yoong refers to the full name of the driver; Full name of the driver refers to drivers.forename and drivers.surname;track number less than 10 refers to position < 20",
        "question": "Which race was Alex Yoong in when he was in track number less than 20?",
        "schema_used": {
            "races": [
                "name",
                "raceid"
            ],
            "driverstandings": [
                "raceid",
                "driverid",
                "position"
            ],
            "drivers": [
                "driverid",
                "forename",
                "surname"
            ]
        },
        "gold": "SELECT T1.name FROM races AS T1 INNER JOIN driverStandings AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T3.forename = 'Alex' AND T3.surname = 'Yoong' AND T2.position < 20",
        "candidates": {
            "1": "SELECT T1.name  FROM races AS T1  INNER JOIN results AS T2 ON T1.raceId = T2.raceId  INNER JOIN drivers AS T3 ON T2.driverId = T3.driverId  WHERE T3.forename = 'Alex' AND T3.surname = 'Yoong' AND T2.position < 20;",
            "2": "SELECT T1.name FROM races AS T1 INNER JOIN results AS T2 ON T1.raceId = T2.raceId INNER JOIN drivers AS T3 ON T2.driverId = T3.driverId WHERE T3.forename = 'Alex' AND T3.surname = 'Yoong' AND T2.position < 20",
            "5": "SELECT T1.name FROM races AS T1 INNER JOIN results AS T2 ON T1.raceId = T2.raceId INNER JOIN drivers AS T3 ON T2.driverId = T3.driverId WHERE T3.forename = 'Alex' AND T3.surname = 'Yoong' AND T2.position < 20",
            "4": "SELECT T1.name  FROM races AS T1  INNER JOIN results AS T2 ON T1.raceId = T2.raceId  INNER JOIN drivers AS T3 ON T2.driverId = T3.driverId  WHERE T3.forename = 'Alex' AND T3.surname = 'Yoong' AND T2.position < 20",
            "6": "SELECT T1.name FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid = T3.driverid WHERE T3.forename = \"Alex\" AND T3.surname = \"Yoong\" AND T2.position  <  20",
            "3": "SELECT DISTINCT   T1.name FROM races AS T1 INNER JOIN results AS T2   ON T1.raceId = T2.raceId INNER JOIN drivers AS T3   ON T2.driverId = T3.driverId WHERE   T3.forename = 'Alex' AND T3.surname = 'Yoong' AND T2.grid < 20;"
        }
    },
    {
        "question_id": 903,
        "database": "formula_1",
        "evidence": "win from races refers to max(points)",
        "question": "How many times did Michael Schumacher won from races hosted in Sepang International Circuit?",
        "schema_used": {
            "driverstandings": [
                "wins",
                "driverid",
                "raceid"
            ],
            "drivers": [
                "driverid",
                "forename",
                "surname"
            ],
            "races": [
                "raceid",
                "circuitid"
            ],
            "circuits": [
                "circuitid",
                "name"
            ]
        },
        "gold": "SELECT SUM(T2.wins) FROM drivers AS T1 INNER JOIN driverStandings AS T2 ON T2.driverId = T1.driverId INNER JOIN races AS T3 ON T3.raceId = T2.raceId INNER JOIN circuits AS T4 ON T4.circuitId = T3.circuitId WHERE T1.forename = 'Michael' AND T1.surname = 'Schumacher' AND T4.name = 'Sepang International Circuit'",
        "candidates": {
            "1": "SELECT COUNT(*)  FROM races AS R  INNER JOIN circuits AS C ON R.circuitId = C.circuitId  INNER JOIN results AS Res ON R.raceId = Res.raceId  INNER JOIN drivers AS D ON Res.driverId = D.driverId WHERE C.name = 'Sepang International Circuit'  AND D.forename = 'Michael'  AND D.surname = 'Schumacher'  AND Res.points = (SELECT MAX(points) FROM results WHERE raceId = R.raceId);",
            "4": "SELECT COUNT(*)  FROM races AS r  INNER JOIN circuits AS c ON r.circuitId = c.circuitId  INNER JOIN results AS res ON r.raceId = res.raceId  INNER JOIN drivers AS d ON res.driverId = d.driverId  WHERE c.name = 'Sepang International Circuit' AND d.forename = 'Michael' AND d.surname = 'Schumacher' AND res.points = (SELECT MAX(points) FROM results WHERE raceId = r.raceId)",
            "5": "SELECT COUNT(*) FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId INNER JOIN circuits AS T3 ON T2.circuitId = T3.circuitId INNER JOIN drivers AS T4 ON T1.driverId = T4.driverId WHERE T3.name = 'Sepang International Circuit' AND T4.forename = 'Michael' AND T4.surname = 'Schumacher' AND T1.positionOrder = 1",
            "2": "SELECT COUNT(T1.raceId) FROM races AS T1 INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitId INNER JOIN results AS T3 ON T1.raceId = T3.raceId INNER JOIN drivers AS T4 ON T3.driverId = T4.driverId WHERE T2.name = 'Sepang International Circuit' AND T4.forename = 'Michael' AND T4.surname = 'Schumacher' AND T3.position = 1",
            "6": "SELECT COUNT(T1.raceid) FROM races AS T1 JOIN circuits AS T2 ON T1.circuitid = T2.circuitid JOIN results AS T3 ON T1.raceid = T3.raceid JOIN drivers AS T4 ON T3.driverid = T4.driverid WHERE T2.name = \"Sepang International Circuit\" AND T4.forename = \"Michael\" AND T4.surname = \"Schumacher\" GROUP BY T3.raceid ORDER BY T3.points DESC LIMIT 1",
            "3": "SELECT   COUNT(T1.raceId) FROM races AS T1 INNER JOIN circuits AS T2   ON T1.circuitId = T2.circuitId INNER JOIN results AS T3   ON T1.raceId = T3.raceId INNER JOIN drivers AS T4   ON T3.driverId = T4.driverId WHERE   T2.name = 'Sepang International Circuit' AND T4.forename = 'Michael' AND T4.surname = 'Schumacher' AND T3.position = 1;"
        }
    },
    {
        "question_id": 904,
        "database": "formula_1",
        "evidence": "fastest lap refers to min(milliseconds); Alex Yoong refers to the full name of the driver; Full name of the driver refers to drivers.forename and drivers.surname;",
        "question": "State the race and year of race in which Michael Schumacher had his fastest lap.",
        "schema_used": {
            "races": [
                "name",
                "year",
                "raceid"
            ],
            "laptimes": [
                "raceid",
                "driverid",
                "milliseconds"
            ],
            "drivers": [
                "driverid",
                "forename",
                "surname"
            ]
        },
        "gold": "SELECT T1.name, T1.year FROM races AS T1 INNER JOIN lapTimes AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T3.forename = 'Michael' AND T3.surname = 'Schumacher' ORDER BY T2.milliseconds ASC LIMIT 1",
        "candidates": {
            "4": "SELECT T1.name, T1.year  FROM races AS T1  INNER JOIN results AS T2 ON T1.raceId = T2.raceId  INNER JOIN drivers AS T3 ON T2.driverId = T3.driverId  WHERE T3.forename = 'Michael' AND T3.surname = 'Schumacher'  ORDER BY T2.milliseconds ASC  LIMIT 1;",
            "1": "SELECT T1.name, T1.year  FROM races AS T1  INNER JOIN results AS T2 ON T1.raceId = T2.raceId  INNER JOIN drivers AS T3 ON T2.driverId = T3.driverId  WHERE T3.forename = 'Michael' AND T3.surname = 'Schumacher'  ORDER BY T2.milliseconds ASC  LIMIT 1;",
            "5": "SELECT T1.name,  T1.year  FROM races AS T1  INNER JOIN results AS T2 ON T1.raceId = T2.raceId  INNER JOIN drivers AS T3 ON T2.driverId = T3.driverId  WHERE  T3.forename = 'Michael' AND T3.surname = 'Schumacher'  ORDER BY  T2.milliseconds  LIMIT 1",
            "3": "SELECT   T1.name,   T1.year FROM races AS T1 INNER JOIN results AS T2   ON T1.raceId = T2.raceId INNER JOIN drivers AS T3   ON T2.driverId = T3.driverId WHERE   T3.forename = 'Michael' AND T3.surname = 'Schumacher' ORDER BY   T2.milliseconds LIMIT 1;",
            "2": "SELECT T1.name, T1.year FROM races AS T1 INNER JOIN results AS T2 ON T1.raceId = T2.raceId INNER JOIN drivers AS T3 ON T2.driverId = T3.driverId WHERE T3.forename = 'Michael' AND T3.surname = 'Schumacher' ORDER BY T2.milliseconds LIMIT 1",
            "6": "SELECT T1.name ,  T1.year FROM races AS T1 JOIN results AS T2 ON T1.raceId  =  T2.raceId JOIN drivers AS T3 ON T2.driverId  =  T3.driverId WHERE T3.forename  =  \"Michael\" AND T3.surname  =  \"Schumacher\" ORDER BY T2.milliseconds ASC LIMIT 1"
        }
    },
    {
        "question_id": 905,
        "database": "formula_1",
        "evidence": "average points = AVG(points where year = 2000)",
        "question": "What is Eddie Irvine's average points scored in year 2000?",
        "schema_used": {
            "driverstandings": [
                "points",
                "driverid",
                "raceid"
            ],
            "drivers": [
                "driverid",
                "forename",
                "surname"
            ],
            "races": [
                "raceid",
                "year"
            ]
        },
        "gold": "SELECT AVG(T2.points) FROM drivers AS T1 INNER JOIN driverStandings AS T2 ON T2.driverId = T1.driverId INNER JOIN races AS T3 ON T3.raceId = T2.raceId WHERE T1.forename = 'Eddie' AND T1.surname = 'Irvine' AND T3.year = 2000",
        "candidates": {
            "4": "SELECT AVG(T3.points)  FROM drivers AS T1  INNER JOIN results AS T3 ON T1.driverId = T3.driverId  INNER JOIN races AS T2 ON T3.raceId = T2.raceId  WHERE T1.forename = 'Eddie' AND T1.surname = 'Irvine' AND T2.year = 2000;",
            "1": "SELECT AVG(T2.points)  FROM drivers AS T1  INNER JOIN results AS T2 ON T1.driverId = T2.driverId  INNER JOIN races AS T3 ON T2.raceId = T3.raceId  WHERE T1.forename = 'Eddie' AND T1.surname = 'Irvine' AND T3.year = 2000;",
            "5": "SELECT AVG(T1.points) FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId INNER JOIN drivers AS T3 ON T1.driverId = T3.driverId WHERE T3.forename = 'Eddie' AND T3.surname = 'Irvine' AND T2.year = 2000",
            "2": "SELECT AVG(T1.points) FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId INNER JOIN drivers AS T3 ON T1.driverId = T3.driverId WHERE T3.forename = 'Eddie' AND T3.surname = 'Irvine' AND T2.year = 2000",
            "6": "SELECT AVG(T3.points) FROM drivers AS T1 JOIN results AS T3 ON T1.driverId = T3.driverId JOIN races AS T2 ON T3.raceId = T2.raceId WHERE T2.year = 2000 AND T1.forename = \"Eddie\" AND T1.surname = \"Irvine\"",
            "3": "SELECT   AVG(T2.points) FROM drivers AS T1 INNER JOIN results AS T2   ON T1.driverId = T2.driverId INNER JOIN races AS T3   ON T2.raceId = T3.raceId WHERE   T1.forename = 'Eddie' AND T1.surname = 'Irvine' AND T3.year = 2000;"
        }
    },
    {
        "question_id": 906,
        "database": "formula_1",
        "evidence": "first race refers to min(Year); Lewis Hamiltonrefers to the full name of the driver; Full name of the driver refers to drivers.forename and drivers.surname;",
        "question": "Which was Lewis Hamilton first race? What was his points recorded for his first race event?",
        "schema_used": {
            "races": [
                "name",
                "raceid",
                "year"
            ],
            "driverstandings": [
                "points",
                "raceid",
                "driverid"
            ],
            "drivers": [
                "driverid",
                "forename",
                "surname"
            ]
        },
        "gold": "SELECT T1.name, T2.points FROM races AS T1 INNER JOIN driverStandings AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T3.forename = 'Lewis' AND T3.surname = 'Hamilton' ORDER BY T1.year ASC LIMIT 1",
        "candidates": {
            "4": "SELECT T2.name, T1.points  FROM driverStandings AS T1  INNER JOIN races AS T2 ON T1.raceId = T2.raceId  INNER JOIN drivers AS T3 ON T1.driverId = T3.driverId  WHERE T3.forename = 'Lewis' AND T3.surname = 'Hamilton'  ORDER BY T2.year ASC, T2.raceId ASC  LIMIT 1;",
            "1": "SELECT r.name, ds.points  FROM driverStandings ds JOIN races r ON ds.raceId = r.raceId JOIN drivers d ON ds.driverId = d.driverId WHERE d.forename = 'Lewis' AND d.surname = 'Hamilton' ORDER BY r.year ASC, r.raceId ASC LIMIT 1;",
            "5": "SELECT T2.name,  T1.points  FROM driverStandings AS T1  INNER JOIN races AS T2 ON T1.raceId = T2.raceId  INNER JOIN drivers AS T3 ON T1.driverId = T3.driverId  WHERE  T3.forename = 'Lewis' AND T3.surname = 'Hamilton'  ORDER BY T2.year  LIMIT 1",
            "2": "SELECT T2.name,  T1.points  FROM driverStandings AS T1  INNER JOIN races AS T2 ON T1.raceId = T2.raceId  INNER JOIN drivers AS T3 ON T1.driverId = T3.driverId  WHERE  T3.forename = 'Lewis' AND T3.surname = 'Hamilton'  ORDER BY T2.year  LIMIT 1",
            "6": "SELECT T1.name ,  T3.points FROM races AS T1 JOIN drivers AS T2 ON T1.raceid  =  T2.driverid JOIN driverStandings AS T3 ON T1.raceid  =  T3.raceid WHERE T2.forename  =  \"Lewis\" AND T2.surname  =  \"Hamilton\" ORDER BY T1.year ASC LIMIT 1",
            "3": "SELECT   T1.name,   T3.points FROM races AS T1 INNER JOIN driverStandings AS T3   ON T1.raceId = T3.raceId INNER JOIN drivers AS T2   ON T3.driverId = T2.driverId WHERE   T2.forename = 'Lewis' AND T2.surname = 'Hamilton' ORDER BY   T1.year LIMIT 1;"
        }
    },
    {
        "question_id": 907,
        "database": "formula_1",
        "evidence": "",
        "question": "List all races in 2017 and the hosting country order by date of the event.",
        "schema_used": {
            "races": [
                "name",
                "circuitid",
                "year",
                "date"
            ],
            "circuits": [
                "country",
                "circuitid"
            ]
        },
        "gold": "SELECT DISTINCT T2.name, T1.country FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T2.year = 2017 ORDER BY T2.date ASC",
        "candidates": {
            "4": "SELECT r.name, c.country  FROM races r  JOIN circuits c ON r.circuitId = c.circuitId  WHERE r.year = 2017  ORDER BY r.date;",
            "1": "SELECT r.name, c.country FROM races r JOIN circuits c ON r.circuitId = c.circuitId WHERE r.year = 2017 ORDER BY r.date;",
            "5": "SELECT T1.name,  T2.country  FROM races AS T1  INNER JOIN circuits AS T2  ON T1.circuitId = T2.circuitId  WHERE T1.year = 2017  ORDER BY T1.date",
            "2": "SELECT T1.name,  T2.country  FROM races AS T1  INNER JOIN circuits AS T2  ON T1.circuitId = T2.circuitId  WHERE T1.year = 2017  ORDER BY T1.date",
            "3": "SELECT T1.name, T2.country FROM races AS T1 INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T1.year = 2017 ORDER BY T1.date",
            "6": "SELECT T1.name ,  T2.country FROM races AS T1 JOIN circuits AS T2 ON T1.circuitId  =  T2.circuitId WHERE YEAR  =  2017 ORDER BY T1.date"
        }
    },
    {
        "question_id": 908,
        "database": "formula_1",
        "evidence": "",
        "question": "What is the most laps f1 races had? Name the race, year and circuit location where the races with most laps was hosted.",
        "schema_used": {
            "laptimes": [
                "lap",
                "raceid"
            ],
            "races": [
                "name",
                "year",
                "circuitid",
                "raceid"
            ],
            "circuits": [
                "location",
                "circuitid"
            ]
        },
        "gold": "SELECT T3.lap, T2.name, T2.year, T1.location FROM circuits AS T1 INNER JOIN races AS T2 ON T1.circuitId = T2.circuitId INNER JOIN lapTimes AS T3 ON T3.raceId = T2.raceId ORDER BY T3.lap DESC LIMIT 1",
        "candidates": {
            "4": "SELECT T1.name, T1.year, T3.location  FROM results AS T1  INNER JOIN races AS T2 ON T1.raceId = T2.raceId  INNER JOIN circuits AS T3 ON T2.circuitId = T3.circuitId  ORDER BY T1.laps DESC  LIMIT 1;",
            "5": "SELECT T1.name,  T1.year,  T3.location  FROM races AS T1  INNER JOIN results AS T2 ON T1.raceId = T2.raceId  INNER JOIN circuits AS T3 ON T1.circuitId = T3.circuitId  ORDER BY T2.laps DESC  LIMIT 1",
            "2": "SELECT T1.name,  T1.year,  T3.location  FROM races AS T1  INNER JOIN results AS T2  ON T1.raceId = T2.raceId  INNER JOIN circuits AS T3  ON T1.circuitId = T3.circuitId  ORDER BY  T2.laps DESC  LIMIT 1",
            "6": "SELECT T1.name ,  T1.year ,  T3.location FROM races AS T1 JOIN results AS T2 ON T1.raceid  =  T2.raceid JOIN circuits AS T3 ON T1.circuitid  =  T3.circuitid ORDER BY T2.laps DESC LIMIT 1",
            "1": "SELECT      r.name AS race_name,      r.year,      c.location AS circuit_location,      MAX(res.laps) AS max_laps FROM      races r JOIN      circuits c ON r.circuitId = c.circuitId JOIN      results res ON r.raceId = res.raceId GROUP BY      r.raceId ORDER BY      max_laps DESC LIMIT 1;",
            "3": "SELECT T1.laps, T2.name, T2.year, T3.location FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId INNER JOIN circuits AS T3 ON T2.circuitId = T3.circuitId ORDER BY T1.laps DESC LIMIT 1"
        }
    },
    {
        "question_id": 909,
        "database": "formula_1",
        "evidence": "European Grand Prix races refers to races.name = 'European Grand Prix';percentage = divide(COUNT(races where country = Germany and name = 'Europearn Grand Prix'),COUNT(races where name = 'Europearn Grand Prix'))*100",
        "question": "Among all European Grand Prix races, what is the percentage of the races were hosted in Germany?",
        "schema_used": {
            "races": [
                "circuitid",
                "name"
            ],
            "circuits": [
                "circuitid",
                "country"
            ]
        },
        "gold": "SELECT CAST(COUNT(CASE WHEN T1.country = 'Germany' THEN T2.circuitID END) AS REAL) * 100 / COUNT(T2.circuitId) FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T2.name = 'European Grand Prix'",
        "candidates": {
            "4": "SELECT CAST(SUM(CASE WHEN T2.country = 'Germany' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.raceId)  FROM races AS T1  INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitRef  WHERE T1.name = 'European Grand Prix'",
            "1": "SELECT CAST(SUM(CASE WHEN T2.country = 'Germany' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.raceId)  FROM races AS T1  INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitId  WHERE T1.name = 'European Grand Prix';",
            "5": "SELECT CAST(SUM(CASE WHEN T1.country = 'Germany' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM circuits AS T1 INNER JOIN races AS T2 ON T1.circuitId = T2.circuitId WHERE T2.name = 'European Grand Prix'",
            "2": "SELECT CAST(SUM(CASE WHEN T1.country = 'Germany' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM circuits AS T1 INNER JOIN races AS T2 ON T1.circuitId = T2.circuitId WHERE T2.name = 'European Grand Prix'",
            "6": "SELECT CAST(SUM(CASE WHEN T2.country = 'Germany' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.name) FROM races AS T1 INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T1.name = 'European Grand Prix'",
            "3": "SELECT CAST(SUM(CASE WHEN T2.country = 'Germany' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.raceId) FROM races AS T1 INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T1.name = 'European Grand Prix'"
        }
    },
    {
        "question_id": 910,
        "database": "formula_1",
        "evidence": "location coordinates refers to (lat, lng); Silverstone Circuit refers to circuits.name = 'Silverstone Circuit'",
        "question": "What's the location coordinates of Silverstone Circuit?",
        "schema_used": {
            "circuits": [
                "lat",
                "lng",
                "name"
            ]
        },
        "gold": "SELECT lat, lng FROM circuits WHERE name = 'Silverstone Circuit'",
        "candidates": {
            "4": "SELECT lat, lng FROM circuits WHERE name = 'Silverstone Circuit'",
            "1": "SELECT lat, lng  FROM circuits  WHERE name = 'Silverstone Circuit';",
            "5": "SELECT lat, lng FROM circuits WHERE name = 'Silverstone Circuit'",
            "2": "SELECT lat, lng  FROM circuits  WHERE name = 'Silverstone Circuit'",
            "6": "SELECT lat ,  lng FROM circuits WHERE name = 'Silverstone Circuit'",
            "3": "SELECT lat, lng FROM circuits WHERE name = 'Silverstone Circuit'"
        }
    },
    {
        "question_id": 911,
        "database": "formula_1",
        "evidence": "higher latitude refers to max(lat)",
        "question": "Which of these circuits is located at a higher latitude, Silverstone Circuit, Hockenheimring or Hungaroring?",
        "schema_used": {
            "circuits": [
                "name",
                "lat"
            ]
        },
        "gold": "SELECT name FROM circuits WHERE name IN ('Silverstone Circuit', 'Hockenheimring', 'Hungaroring') ORDER BY lat DESC LIMIT 1",
        "candidates": {
            "5": "SELECT name FROM circuits WHERE name IN ('Silverstone Circuit', 'Hockenheimring', 'Hungaroring') ORDER BY lat DESC LIMIT 1",
            "4": "SELECT name FROM circuits WHERE name IN ('Silverstone Circuit', 'Hockenheimring', 'Hungaroring') ORDER BY lat DESC LIMIT 1",
            "1": "SELECT name  FROM circuits  WHERE name IN ('Silverstone Circuit', 'Hockenheimring', 'Hungaroring')  ORDER BY lat DESC  LIMIT 1;",
            "2": "SELECT name FROM circuits WHERE name IN ('Silverstone Circuit','Hockenheimring','Hungaroring') ORDER BY lat DESC LIMIT 1",
            "6": "SELECT name FROM circuits WHERE name = \"Silverstone Circuit\" OR name = \"Hockenheimring\" OR name = \"Hungaroring\" ORDER BY lat DESC LIMIT 1",
            "3": "SELECT name FROM circuits WHERE name = \"Silverstone Circuit\" OR name = \"Hockenheimring\" OR name = \"Hungaroring\" ORDER BY lat DESC LIMIT 1"
        }
    },
    {
        "question_id": 912,
        "database": "formula_1",
        "evidence": "reference name refers to circuitRef; Marina Bay Street Circuit refers to circuits.name = 'Marina Bay Street Circuit'",
        "question": "What's the reference name of Marina Bay Street Circuit?",
        "schema_used": {
            "circuits": [
                "circuitref",
                "name"
            ]
        },
        "gold": "SELECT circuitRef FROM circuits WHERE name = 'Marina Bay Street Circuit'",
        "candidates": {
            "4": "SELECT circuitRef  FROM circuits  WHERE name = 'Marina Bay Street Circuit';",
            "1": "SELECT circuitRef  FROM circuits  WHERE name = 'Marina Bay Street Circuit';",
            "5": "SELECT circuitRef FROM circuits WHERE name = 'Marina Bay Street Circuit'",
            "2": "SELECT circuitRef FROM circuits WHERE name = 'Marina Bay Street Circuit'",
            "6": "SELECT circuitRef FROM circuits WHERE name = \"Marina Bay Street Circuit\"",
            "3": "SELECT   circuitRef FROM circuits WHERE   name = 'Marina Bay Street Circuit';"
        }
    },
    {
        "question_id": 913,
        "database": "formula_1",
        "evidence": "highest altitude refers to max(alt)",
        "question": "In which country can I find the circuit with the highest altitude?",
        "schema_used": {
            "circuits": [
                "country",
                "alt"
            ]
        },
        "gold": "SELECT country FROM circuits ORDER BY alt DESC LIMIT 1",
        "candidates": {
            "4": "SELECT country FROM circuits ORDER BY alt DESC LIMIT 1",
            "1": "SELECT country FROM circuits WHERE alt = (SELECT MAX(alt) FROM circuits)",
            "6": "SELECT country FROM circuits ORDER BY alt DESC LIMIT 1",
            "5": "SELECT country FROM circuits ORDER BY alt DESC LIMIT 1",
            "2": "SELECT country FROM circuits ORDER BY alt DESC LIMIT 1",
            "3": "SELECT country FROM circuits ORDER BY alt DESC LIMIT 1"
        }
    },
    {
        "question_id": 914,
        "database": "formula_1",
        "evidence": "don't have a code refers to code is null",
        "question": "How many drivers don't have a code?",
        "schema_used": {
            "drivers": [
                "driverid",
                "code"
            ]
        },
        "gold": "SELECT COUNT(driverId) - COUNT(CASE WHEN code IS NOT NULL THEN code END) FROM drivers",
        "candidates": {
            "4": "SELECT COUNT(*)  FROM drivers  WHERE code IS NULL;",
            "1": "SELECT COUNT(*)  FROM drivers  WHERE code IS NULL;",
            "2": "SELECT COUNT(*) FROM drivers WHERE code IS NULL",
            "5": "SELECT COUNT(*) FROM drivers WHERE code IS NULL",
            "6": "SELECT count(*) FROM drivers WHERE code IS NULL",
            "3": "SELECT   COUNT(code) FROM drivers WHERE   code IS NULL;"
        }
    },
    {
        "question_id": 915,
        "database": "formula_1",
        "evidence": "date of birth refers to drivers.dob; The larger the birthday value, the younger the person is, and vice versa;",
        "question": "Which country is the oldest driver from?",
        "schema_used": {
            "drivers": [
                "nationality",
                "dob"
            ]
        },
        "gold": "SELECT nationality FROM drivers WHERE dob IS NOT NULL ORDER BY dob ASC LIMIT 1",
        "candidates": {
            "4": "SELECT nationality  FROM drivers  ORDER BY dob ASC  LIMIT 1;",
            "5": "SELECT nationality FROM drivers ORDER BY dob LIMIT 1",
            "1": "SELECT nationality  FROM drivers  ORDER BY dob ASC  LIMIT 1;",
            "2": "SELECT nationality FROM drivers ORDER BY dob LIMIT 1",
            "6": "SELECT nationality FROM drivers ORDER BY dob ASC LIMIT 1",
            "3": "SELECT Nationality FROM drivers ORDER BY dob ASC LIMIT 1"
        }
    },
    {
        "question_id": 916,
        "database": "formula_1",
        "evidence": "Italian refers to nationality = 'italian'",
        "question": "Please list the surnames of all the Italian drivers.",
        "schema_used": {
            "drivers": [
                "surname",
                "nationality"
            ]
        },
        "gold": "SELECT surname FROM drivers WHERE nationality = 'Italian'",
        "candidates": {
            "4": "SELECT surname FROM drivers WHERE nationality = 'Italian'",
            "1": "SELECT surname FROM drivers WHERE nationality = 'Italian'",
            "6": "SELECT surname FROM drivers WHERE nationality  =  'Italian'",
            "5": "SELECT surname FROM drivers WHERE nationality = 'Italian'",
            "2": "SELECT surname FROM drivers WHERE nationality = 'Italian'",
            "3": "SELECT surname FROM drivers WHERE nationality = 'Italian'"
        }
    },
    {
        "question_id": 917,
        "database": "formula_1",
        "evidence": "website refers to url",
        "question": "Which website should I go to if I want to know more about Anthony Davidson?",
        "schema_used": {
            "drivers": [
                "url",
                "forename",
                "surname"
            ]
        },
        "gold": "SELECT url FROM drivers WHERE forename = 'Anthony' AND surname = 'Davidson'",
        "candidates": {
            "4": "SELECT url FROM drivers WHERE forename = 'Anthony' AND surname = 'Davidson'",
            "1": "SELECT url FROM drivers WHERE forename = 'Anthony' AND surname = 'Davidson';",
            "5": "SELECT url FROM drivers WHERE forename = 'Anthony' AND surname = 'Davidson'",
            "2": "SELECT url FROM drivers WHERE forename = 'Anthony' AND surname = 'Davidson'",
            "3": "SELECT url FROM drivers WHERE forename = \"Anthony\" AND surname = \"Davidson\";",
            "6": "SELECT url FROM drivers WHERE forename = \"Anthony\" AND surname = \"Davidson\""
        }
    },
    {
        "question_id": 918,
        "database": "formula_1",
        "evidence": "reference name refers to driverRef",
        "question": "What's Lewis Hamilton's reference name?",
        "schema_used": {
            "drivers": [
                "driverref",
                "forename",
                "surname"
            ]
        },
        "gold": "SELECT driverRef FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton'",
        "candidates": {
            "4": "SELECT driverRef FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton'",
            "5": "SELECT driverRef FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton'",
            "1": "SELECT driverRef FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton';",
            "2": "SELECT driverRef FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton'",
            "6": "SELECT driverRef FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton'",
            "3": "SELECT   driverRef FROM drivers WHERE   forename = 'Lewis' AND surname = 'Hamilton';"
        }
    },
    {
        "question_id": 919,
        "database": "formula_1",
        "evidence": "",
        "question": "Which circuit did the 2009 Spanish Grand Prix use?",
        "schema_used": {
            "circuits": [
                "name",
                "circuitid"
            ],
            "races": [
                "circuitid",
                "year",
                "name"
            ]
        },
        "gold": "SELECT T1.name FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T2.year = 2009 AND T2.name = 'Spanish Grand Prix'",
        "candidates": {
            "4": "SELECT T2.name FROM races AS T1 INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T1.year = 2009 AND T1.name = 'Spanish Grand Prix'",
            "1": "SELECT T2.name FROM races AS T1 INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T1.year = 2009 AND T1.name = 'Spanish Grand Prix';",
            "5": "SELECT T1.name FROM races AS T1 INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T1.year = 2009 AND T1.name = 'Spanish Grand Prix'",
            "2": "SELECT T1.name FROM races AS T1 INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T1.year = 2009 AND T1.name = 'Spanish Grand Prix'",
            "6": "SELECT T2.name FROM races AS T1 JOIN circuits AS T2 ON T1.circuitid = T2.circuitid WHERE T1.year = 2009 AND T1.name = \"Spanish Grand Prix\"",
            "3": "SELECT T2.name FROM races AS T1 INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T1.year = 2009 AND T1.name = \"Spanish Grand Prix\""
        }
    },
    {
        "question_id": 920,
        "database": "formula_1",
        "evidence": "",
        "question": "Please list all the years that Silverstone Circuit was used in a Formula_1 race.",
        "schema_used": {
            "races": [
                "year",
                "circuitid"
            ],
            "circuits": [
                "circuitid",
                "name"
            ]
        },
        "gold": "SELECT DISTINCT T2.year FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Silverstone Circuit'",
        "candidates": {
            "4": "SELECT T1.year  FROM races AS T1  INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitId  WHERE T2.name = 'Silverstone Circuit'",
            "5": "SELECT T1.year FROM races AS T1 INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T2.name = 'Silverstone Circuit'",
            "1": "SELECT DISTINCT T1.year  FROM races AS T1  INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitId  WHERE T2.name = 'Silverstone Circuit';",
            "2": "SELECT T1.year FROM races AS T1 INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T2.name = 'Silverstone Circuit'",
            "6": "SELECT T1.year FROM races AS T1 JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T2.name = \"Silverstone Circuit\"",
            "3": "SELECT DISTINCT T1.year FROM races AS T1 INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T2.name = 'Silverstone Circuit'"
        }
    },
    {
        "question_id": 921,
        "database": "formula_1",
        "evidence": "more information refers to url",
        "question": "Please give more information about the Formula_1 races that used the Silverstone Circuit.",
        "schema_used": {
            "circuits": [
                "url",
                "circuitid",
                "name"
            ],
            "races": [
                "circuitid"
            ]
        },
        "gold": "SELECT DISTINCT T1.url FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Silverstone Circuit'",
        "candidates": {
            "4": "SELECT races.url  FROM races  INNER JOIN circuits ON races.circuitId = circuits.circuitId  WHERE circuits.circuitRef = 'silverstone';",
            "5": "SELECT url FROM races INNER JOIN circuits ON races.circuitId = circuits.circuitId WHERE circuitRef = 'silverstone'",
            "1": "SELECT T1.url, T2.circuitRef, T2.name, T2.location, T2.country  FROM races AS T1  INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitId  WHERE T2.circuitRef = 'silverstone';",
            "2": "SELECT T1.url FROM races AS T1 INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T2.circuitRef = 'silverstone'",
            "6": "SELECT T1.url FROM races AS T1 JOIN circuits AS T2 ON T1.circuitid = T2.circuitid WHERE T2.circuitRef = \"silverstone\"",
            "3": "SELECT   T1.url FROM races AS T1 INNER JOIN circuits AS T2   ON T1.circuitId = T2.circuitId WHERE   T2.circuitRef = 'silverstone';"
        }
    },
    {
        "question_id": 922,
        "database": "formula_1",
        "evidence": "",
        "question": "What time did the the 2010's Formula_1 race took place on the Abu Dhabi Circuit?",
        "schema_used": {
            "races": [
                "date",
                "time",
                "circuitid",
                "year",
                "name"
            ],
            "circuits": [
                "circuitid"
            ]
        },
        "gold": "SELECT T2.date, T2.time FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T2.year = 2010 AND T2.name = 'Abu Dhabi Grand Prix'",
        "candidates": {
            "4": "SELECT T1.time  FROM races AS T1  INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitId  WHERE T1.year = 2010 AND T2.name = 'Abu Dhabi Circuit';",
            "1": "SELECT T1.time  FROM races AS T1  INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitId  WHERE T1.year = 2010 AND T2.name = 'Abu Dhabi Circuit';",
            "5": "SELECT T1.time FROM races AS T1 INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T2.name = 'Abu Dhabi Circuit' AND T1.year = 2010",
            "2": "SELECT T1.time FROM races AS T1 INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T1.year = 2010 AND T2.name = 'Abu Dhabi Yas Marina Circuit'",
            "6": "SELECT T1.time FROM races AS T1 JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T2.name = 'Yas Marina Circuit' AND T1.year  =  2010",
            "3": "SELECT T1.time FROM races AS T1 INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T2.name = 'Yas Marina Circuit' AND T1.year = 2010"
        }
    },
    {
        "question_id": 923,
        "database": "formula_1",
        "evidence": "",
        "question": "How many Formula_1 races took place on the circuits in Italy?",
        "schema_used": {
            "races": [
                "circuitid"
            ],
            "circuits": [
                "circuitid",
                "country"
            ]
        },
        "gold": "SELECT COUNT(T2.circuitId) FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.country = 'Italy'",
        "candidates": {
            "4": "SELECT COUNT(*)  FROM races AS R  INNER JOIN circuits AS C ON R.circuitId = C.circuitId  WHERE C.country = 'Italy';",
            "1": "SELECT COUNT(*)  FROM races AS R  INNER JOIN circuits AS C ON R.circuitId = C.circuitId  WHERE C.country = 'Italy';",
            "5": "SELECT COUNT(*) FROM races INNER JOIN circuits ON races.circuitId = circuits.circuitId WHERE circuits.country = 'Italy'",
            "2": "SELECT COUNT(T1.raceId) FROM races AS T1 INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T2.country = 'Italy'",
            "6": "SELECT COUNT(T1.raceid) FROM races AS T1 JOIN circuits AS T2 ON T1.circuitid  =  T2.circuitid WHERE T2.country  =  \"Italy\"",
            "3": "SELECT   COUNT(T1.raceId) FROM races AS T1 INNER JOIN circuits AS T2   ON T1.circuitId = T2.circuitId WHERE   T2.country = 'Italy';"
        }
    },
    {
        "question_id": 924,
        "database": "formula_1",
        "evidence": "",
        "question": "Please list the exact dates on which a Formula_1 race took place on the Barcelona-Catalunya circuit.",
        "schema_used": {
            "races": [
                "date",
                "circuitid"
            ],
            "circuits": [
                "circuitid",
                "name"
            ]
        },
        "gold": "SELECT T2.date FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T1.name = 'Circuit de Barcelona-Catalunya'",
        "candidates": {
            "4": "SELECT T1.date  FROM races AS T1  INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitId  WHERE T2.name = 'Circuit de Barcelona-Catalunya'",
            "1": "SELECT T1.date  FROM races AS T1  INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitId  WHERE T2.name = 'Catalunya'",
            "5": "SELECT date FROM races INNER JOIN circuits ON races.circuitId = circuits.circuitId WHERE circuits.name = 'Circuit de Barcelona-Catalunya'",
            "2": "SELECT T1.date FROM races AS T1 INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T2.circuitRef = 'catalunya'",
            "6": "SELECT T1.date FROM races AS T1 JOIN circuits AS T2 ON T1.circuitid = T2.circuitid WHERE T2.name = 'Circuit de Barcelona-Catalunya'",
            "3": "SELECT T1.date FROM races AS T1 JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T2.circuitRef = \"catalunya\""
        }
    },
    {
        "question_id": 925,
        "database": "formula_1",
        "evidence": "link of the website refers to url",
        "question": "Please give the link of the website that shows more information about the circuits the Spanish Grand Prix used in 2009.",
        "schema_used": {
            "circuits": [
                "url",
                "circuitid"
            ],
            "races": [
                "circuitid",
                "year",
                "name"
            ]
        },
        "gold": "SELECT T1.url FROM circuits AS T1 INNER JOIN races AS T2 ON T2.circuitID = T1.circuitId WHERE T2.year = 2009 AND T2.name = 'Spanish Grand Prix'",
        "candidates": {
            "4": "SELECT T2.url  FROM races AS T1  INNER JOIN circuits AS T2  ON T1.circuitId = T2.circuitId  WHERE T1.year = 2009 AND T1.name = 'Spanish Grand Prix';",
            "1": "SELECT T2.url  FROM races AS T1  INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitId  WHERE T1.year = 2009 AND T1.name = 'Spanish Grand Prix';",
            "5": "SELECT T1.url FROM circuits AS T1 INNER JOIN races AS T2 ON T1.circuitId = T2.circuitId WHERE T2.name = 'Spanish Grand Prix' AND T2.year = 2009",
            "2": "SELECT T1.url FROM circuits AS T1 INNER JOIN races AS T2 ON T1.circuitId = T2.circuitId WHERE T2.name = 'Spanish Grand Prix' AND T2.year = 2009",
            "6": "SELECT T2.url FROM races AS T1 JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T1.name = \"Spanish Grand Prix\" AND T1.year  =  2009",
            "3": "SELECT   T2.url FROM races AS T1 INNER JOIN circuits AS T2   ON T1.circuitId = T2.circuitId WHERE   T1.name = 'Spanish Grand Prix' AND T1.year = 2009;"
        }
    },
    {
        "question_id": 926,
        "database": "formula_1",
        "evidence": "fastest lap time ever refers to min(fastestLapTime)",
        "question": "What's the fastest lap time ever in a race for Lewis Hamilton?",
        "schema_used": {
            "results": [
                "fastestlaptime",
                "driverid"
            ],
            "drivers": [
                "driverid",
                "forename",
                "surname"
            ]
        },
        "gold": "SELECT T2.fastestLapTime FROM drivers AS T1 INNER JOIN results AS T2 ON T2.driverId = T1.driverId WHERE T1.forename = 'Lewis' AND T1.surname = 'Hamilton' AND T2.fastestLapTime IS NOT NULL ORDER BY T2.fastestLapTime ASC LIMIT 1",
        "candidates": {
            "4": "SELECT T2.fastestLapTime  FROM drivers AS T1  INNER JOIN results AS T2 ON T1.driverId = T2.driverId  WHERE T1.forename = 'Lewis' AND T1.surname = 'Hamilton'  ORDER BY T2.fastestLapTime ASC  LIMIT 1;",
            "1": "SELECT MIN(T1.fastestLapTime)  FROM results AS T1  INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId  WHERE T2.forename = 'Lewis' AND T2.surname = 'Hamilton';",
            "5": "SELECT MIN(T1.fastestLapTime) FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T2.forename = 'Lewis' AND T2.surname = 'Hamilton'",
            "2": "SELECT MIN(T1.fastestLapTime) FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T2.forename = 'Lewis' AND T2.surname = 'Hamilton'",
            "6": "SELECT min(T1.fastestLapTime) FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T2.forename = 'Lewis' AND T2.surname = 'Hamilton'",
            "3": "SELECT   MIN(T1.fastestLapTime) FROM results AS T1 INNER JOIN drivers AS T2   ON T1.driverId = T2.driverId WHERE   T2.forename = 'Lewis' AND T2.surname = 'Hamilton';"
        }
    },
    {
        "question_id": 927,
        "database": "formula_1",
        "evidence": "",
        "question": "Which driver created the fastest lap speed in a Formula_1 race? Please give both his forename and surname.",
        "schema_used": {
            "drivers": [
                "forename",
                "surname",
                "driverid"
            ],
            "results": [
                "driverid",
                "fastestlapspeed",
                "fastestlaptime"
            ]
        },
        "gold": "SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN results AS T2 ON T2.driverId = T1.driverId WHERE T2.fastestLapTime IS NOT NULL ORDER BY T2.fastestLapSpeed DESC LIMIT 1",
        "candidates": {
            "4": "SELECT T2.forename, T2.surname  FROM results AS T1  INNER JOIN drivers AS T2  ON T1.driverId = T2.driverId  ORDER BY CAST(T1.fastestLapSpeed AS REAL) DESC  LIMIT 1;",
            "1": "SELECT T2.forename, T2.surname  FROM results AS T1  INNER JOIN drivers AS T2  ON T1.driverId = T2.driverId  ORDER BY CAST(T1.fastestLapSpeed AS REAL) ASC  LIMIT 1;",
            "2": "SELECT T1.forename,  T1.surname  FROM  drivers AS T1  INNER JOIN results AS T2  ON T1.driverId = T2.driverId  ORDER BY  T2.fastestLapSpeed DESC  LIMIT 1",
            "5": "SELECT T1.forename,  T1.surname  FROM  drivers AS T1  INNER JOIN results AS T2  ON T1.driverId = T2.driverId  ORDER BY  CAST(REPLACE(T2.fastestLapSpeed, ',', '.') AS REAL) DESC  LIMIT 1",
            "6": "SELECT T2.forename, T2.surname FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId ORDER BY T1.fastestLapSpeed DESC LIMIT 1",
            "3": "SELECT   T2.forename,   T2.surname FROM results AS T1 INNER JOIN drivers AS T2   ON T1.driverId = T2.driverId ORDER BY   T1.fastestLapSpeed DESC LIMIT 1;"
        }
    },
    {
        "question_id": 928,
        "database": "formula_1",
        "evidence": "reference name refers to driverRef; Canadian Grand Prix refers to races.name = 'Canadian Grand Prix';",
        "question": "Which driver ranked the first in the Canadian Grand Prix in 2007? Please give his reference name.",
        "schema_used": {
            "drivers": [
                "forename",
                "surname",
                "driverref",
                "driverid"
            ],
            "results": [
                "raceid",
                "driverid",
                "rank"
            ],
            "races": [
                "raceid",
                "year",
                "name"
            ]
        },
        "gold": "SELECT T3.forename, T3.surname, T3.driverRef FROM races AS T1 INNER JOIN results AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T1.name = 'Canadian Grand Prix' AND T2.rank = 1 AND T1.year = 2007",
        "candidates": {
            "4": "SELECT T3.driverRef  FROM races AS T1  INNER JOIN results AS T2 ON T1.raceId = T2.raceId  INNER JOIN drivers AS T3 ON T2.driverId = T3.driverId  WHERE T1.year = 2007 AND T1.name = 'Canadian Grand Prix' AND T2.position = 1",
            "5": "SELECT T1.driverRef FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T3.name = 'Canadian Grand Prix' AND T3.year = 2007 AND T2.positionOrder = 1",
            "2": "SELECT T1.driverRef FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T3.name = 'Canadian Grand Prix' AND T3.year = 2007 AND T2.position = 1",
            "1": "SELECT T2.driverRef  FROM races AS T1  INNER JOIN results AS T3 ON T1.raceId = T3.raceId  INNER JOIN drivers AS T2 ON T3.driverId = T2.driverId  WHERE T1.year = 2007 AND T1.name = 'Canadian Grand Prix' AND T3.position = 1;",
            "6": "SELECT T3.driverRef FROM races AS T1 INNER JOIN results AS T2 ON T1.raceId = T2.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T1.name = \"Canadian Grand Prix\" AND T1.year = 2007 AND T2.positionOrder = 1",
            "3": "SELECT   T3.driverRef FROM races AS T1 INNER JOIN results AS T2   ON T1.raceId = T2.raceId INNER JOIN drivers AS T3   ON T2.driverId = T3.driverId WHERE   T1.name = 'Canadian Grand Prix' AND T1.year = 2007 ORDER BY   T2.rank LIMIT 1;"
        }
    },
    {
        "question_id": 929,
        "database": "formula_1",
        "evidence": "",
        "question": "Please list the Formula_1 races that Lewis Hamilton participated.",
        "schema_used": {
            "races": [
                "name",
                "raceid"
            ],
            "results": [
                "raceid",
                "driverid"
            ],
            "drivers": [
                "driverid",
                "forename",
                "surname"
            ]
        },
        "gold": "SELECT T1.name FROM races AS T1 INNER JOIN results AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T3.forename = 'Lewis' AND T3.surname = 'Hamilton'",
        "candidates": {
            "4": "SELECT T1.name  FROM races AS T1  INNER JOIN results AS T2 ON T1.raceId = T2.raceId  INNER JOIN drivers AS T3 ON T2.driverId = T3.driverId  WHERE T3.forename = 'Lewis' AND T3.surname = 'Hamilton'",
            "1": "SELECT T1.name  FROM races AS T1  INNER JOIN results AS T2 ON T1.raceId = T2.raceId  INNER JOIN drivers AS T3 ON T2.driverId = T3.driverId  WHERE T3.forename = 'Lewis' AND T3.surname = 'Hamilton';",
            "5": "SELECT T1.name FROM races AS T1 INNER JOIN results AS T2 ON T1.raceId = T2.raceId INNER JOIN drivers AS T3 ON T2.driverId = T3.driverId WHERE T3.forename = 'Lewis' AND T3.surname = 'Hamilton'",
            "6": "SELECT T3.name FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T1.forename = \"Lewis\" AND T1.surname = \"Hamilton\"",
            "2": "SELECT T1.name FROM races AS T1 INNER JOIN results AS T2 ON T1.raceId = T2.raceId INNER JOIN drivers AS T3 ON T2.driverId = T3.driverId WHERE T3.forename = 'Lewis' AND T3.surname = 'Hamilton'",
            "3": "SELECT   T1.name FROM races AS T1 INNER JOIN results AS T2   ON T1.raceId = T2.raceId INNER JOIN drivers AS T3   ON T2.driverId = T3.driverId WHERE   T3.forename = 'Lewis' AND T3.surname = 'Hamilton';"
        }
    },
    {
        "question_id": 930,
        "database": "formula_1",
        "evidence": "rank the highest refers to min(rank); Lewis Hamilton refers to the full name of the driver; Full name of the driver refers to drivers.forename and drivers.surname;",
        "question": "In which Formula_1 race did Lewis Hamilton rank the highest?",
        "schema_used": {
            "drivers": [
                "driverid",
                "forename",
                "surname"
            ],
            "results": [
                "raceid",
                "rank",
                "driverid"
            ],
            "races": [
                "name",
                "raceid"
            ]
        },
        "gold": "SELECT name FROM races WHERE raceId IN ( SELECT raceId FROM results WHERE rank = 1 AND driverId = ( SELECT driverId FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton' ) )",
        "candidates": {
            "4": "SELECT r.name  FROM results rs  INNER JOIN races r ON rs.raceId = r.raceId  INNER JOIN drivers d ON rs.driverId = d.driverId  WHERE d.forename = 'Lewis' AND d.surname = 'Hamilton'  ORDER BY rs.rank ASC  LIMIT 1;",
            "2": "SELECT T1.name FROM races AS T1 INNER JOIN results AS T2 ON T1.raceId = T2.raceId INNER JOIN drivers AS T3 ON T2.driverId = T3.driverId WHERE T3.forename = 'Lewis' AND T3.surname = 'Hamilton' ORDER BY T2.rank LIMIT 1",
            "1": "SELECT T3.name  FROM drivers AS T1  INNER JOIN results AS T2 ON T1.driverId = T2.driverId  INNER JOIN races AS T3 ON T2.raceId = T3.raceId  WHERE T1.forename = 'Lewis' AND T1.surname = 'Hamilton'  ORDER BY T2.rank ASC  LIMIT 1;",
            "5": "SELECT T1.name FROM races AS T1 INNER JOIN results AS T2 ON T1.raceId = T2.raceId INNER JOIN drivers AS T3 ON T2.driverId = T3.driverId WHERE T3.forename = 'Lewis' AND T3.surname = 'Hamilton' ORDER BY T2.rank LIMIT 1",
            "6": "SELECT T1.name FROM races AS T1 INNER JOIN results AS T2 ON T1.raceId = T2.raceId INNER JOIN drivers AS T3 ON T2.driverId = T3.driverId WHERE T3.forename = \"Lewis\" AND T3.surname = \"Hamilton\" ORDER BY T2.rank ASC LIMIT 1",
            "3": "SELECT   T1.name FROM races AS T1 INNER JOIN results AS T2   ON T1.raceId = T2.raceId INNER JOIN drivers AS T3   ON T2.driverId = T3.driverId WHERE   T3.forename = 'Lewis' AND T3.surname = 'Hamilton' ORDER BY   T2.rank LIMIT 1;"
        }
    },
    {
        "question_id": 931,
        "database": "formula_1",
        "evidence": "the fastest lap speed among all refers to max(fastestLapSpeed); Spanish Grand Prix refers to races.name = 'Spanish Grand Prix';",
        "question": "What was the fastest lap speed among all drivers in the 2009 Spanish Grand Prix?",
        "schema_used": {
            "results": [
                "fastestlapspeed",
                "raceid"
            ],
            "races": [
                "raceid",
                "name",
                "year"
            ]
        },
        "gold": "SELECT T2.fastestLapSpeed FROM races AS T1 INNER JOIN results AS T2 ON T2.raceId = T1.raceId WHERE T1.name = 'Spanish Grand Prix' AND T1.year = 2009 AND T2.fastestLapSpeed IS NOT NULL ORDER BY T2.fastestLapSpeed DESC LIMIT 1",
        "candidates": {
            "4": "SELECT MAX(T2.fastestLapSpeed)  FROM races AS T1  INNER JOIN results AS T2 ON T1.raceId = T2.raceId  WHERE T1.year = 2009 AND T1.name = 'Spanish Grand Prix';",
            "2": "SELECT MAX(T1.fastestLapSpeed) FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T2.year = 2009 AND T2.name = 'Spanish Grand Prix'",
            "1": "SELECT MAX(T2.fastestLapSpeed)  FROM races AS T1  INNER JOIN results AS T2 ON T1.raceId = T2.raceId  WHERE T1.year = 2009 AND T1.name = 'Spanish Grand Prix';",
            "5": "SELECT MAX(T1.fastestLapSpeed) FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T2.year = 2009 AND T2.name = 'Spanish Grand Prix'",
            "6": "SELECT T2.fastestLapSpeed FROM races AS T1 INNER JOIN results AS T2 ON T1.raceId = T2.raceId WHERE T1.year = 2009 AND T1.name = 'Spanish Grand Prix' ORDER BY T2.fastestLapSpeed DESC LIMIT 1",
            "3": "SELECT T2.fastestLapSpeed FROM races AS T1 INNER JOIN results AS T2 ON T1.raceId = T2.raceId WHERE T1.year = 2009 AND T1.name = 'Spanish Grand Prix' ORDER BY T2.fastestLapSpeed DESC LIMIT 1"
        }
    },
    {
        "question_id": 932,
        "database": "formula_1",
        "evidence": "",
        "question": "In which years did Lewis Hamilton participate in a Formula_1 race?",
        "schema_used": {
            "races": [
                "year",
                "raceid"
            ],
            "results": [
                "raceid",
                "driverid"
            ],
            "drivers": [
                "driverid",
                "forename",
                "surname"
            ]
        },
        "gold": "SELECT DISTINCT T1.year FROM races AS T1 INNER JOIN results AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T3.forename = 'Lewis' AND T3.surname = 'Hamilton'",
        "candidates": {
            "4": "SELECT DISTINCT T1.year FROM races AS T1 INNER JOIN results AS T2 ON T1.raceId = T2.raceId INNER JOIN drivers AS T3 ON T2.driverId = T3.driverId WHERE T3.forename = 'Lewis' AND T3.surname = 'Hamilton'",
            "1": "SELECT DISTINCT T1.year  FROM races AS T1  INNER JOIN results AS T2 ON T1.raceId = T2.raceId  INNER JOIN drivers AS T3 ON T2.driverId = T3.driverId  WHERE T3.forename = 'Lewis' AND T3.surname = 'Hamilton';",
            "2": "SELECT T1.year FROM races AS T1 INNER JOIN results AS T2 ON T1.raceId = T2.raceId INNER JOIN drivers AS T3 ON T2.driverId = T3.driverId WHERE T3.forename = 'Lewis' AND T3.surname = 'Hamilton'",
            "5": "SELECT T1.year FROM races AS T1 INNER JOIN results AS T2 ON T1.raceId = T2.raceId INNER JOIN drivers AS T3 ON T2.driverId = T3.driverId WHERE T3.forename = 'Lewis' AND T3.surname = 'Hamilton' GROUP BY T1.year",
            "6": "SELECT T3.year FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T1.forename = 'Lewis' AND T1.surname = 'Hamilton'",
            "3": "SELECT DISTINCT   T1.year FROM races AS T1 INNER JOIN results AS T2   ON T1.raceId = T2.raceId INNER JOIN drivers AS T3   ON T2.driverId = T3.driverId WHERE   T3.forename = 'Lewis' AND T3.surname = 'Hamilton';"
        }
    },
    {
        "question_id": 933,
        "database": "formula_1",
        "evidence": "Lewis Hamilton refers to the full name of the driver; Full name of the driver refers to drivers.forename and drivers.surname; final rank refers to positionOrder; Chinese Grand Prix refers to races.name = 'Chinese Grand Prix';",
        "question": "What was Lewis Hamilton's final rank in the 2008 Chinese Grand Prix?",
        "schema_used": {
            "results": [
                "positionorder",
                "raceid",
                "driverid"
            ],
            "races": [
                "raceid",
                "year",
                "name"
            ],
            "drivers": [
                "driverid",
                "forename",
                "surname"
            ]
        },
        "gold": "SELECT T2.positionOrder FROM races AS T1 INNER JOIN results AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T3.forename = 'Lewis' AND T3.surname = 'Hamilton' AND T1.name = 'Chinese Grand Prix' AND T1.year = 2008",
        "candidates": {
            "4": "SELECT T3.positionOrder  FROM races AS T1  INNER JOIN results AS T2 ON T1.raceId = T2.raceId  INNER JOIN drivers AS T3 ON T2.driverId = T3.driverId  WHERE T1.name = 'Chinese Grand Prix' AND T1.year = 2008 AND T3.forename = 'Lewis' AND T3.surname = 'Hamilton';",
            "1": "SELECT T3.positionOrder  FROM races AS T1  INNER JOIN results AS T2 ON T1.raceId = T2.raceId  INNER JOIN drivers AS T3 ON T2.driverId = T3.driverId  WHERE T1.year = 2008 AND T1.name = 'Chinese Grand Prix' AND T3.forename = 'Lewis' AND T3.surname = 'Hamilton';",
            "5": "SELECT T1.positionOrder FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId INNER JOIN drivers AS T3 ON T1.driverId = T3.driverId WHERE T3.forename = 'Lewis' AND T3.surname = 'Hamilton' AND T2.name = 'Chinese Grand Prix' AND T2.year = 2008",
            "2": "SELECT T1.positionOrder FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId INNER JOIN drivers AS T3 ON T1.driverId = T3.driverId WHERE T3.forename = 'Lewis' AND T3.surname = 'Hamilton' AND T2.name = 'Chinese Grand Prix' AND T2.year = 2008",
            "6": "SELECT T3.positionOrder FROM drivers AS T1 INNER JOIN races AS T2 ON T1.driverid = T1.driverid INNER JOIN results AS T3 ON T2.raceid = T3.raceid WHERE T1.forename = \"Lewis\" AND T1.surname = \"Hamilton\" AND T2.name = \"Chinese Grand Prix\" AND T2.year = 2008",
            "3": "SELECT   T2.positionOrder FROM drivers AS T1 INNER JOIN results AS T2   ON T1.driverId = T2.driverId INNER JOIN races AS T3   ON T2.raceId = T3.raceId WHERE   T1.forename = 'Lewis' AND T1.surname = 'Hamilton' AND T3.year = 2008 AND T3.name = 'Chinese Grand Prix';"
        }
    },
    {
        "question_id": 934,
        "database": "formula_1",
        "evidence": "the no. 4 grid formation refers to grid = 4",
        "question": "Which driver was in the no. 4 grid formation when starting the race in 1989's Australian Grand Prix? Please give his forename and surname.",
        "schema_used": {
            "drivers": [
                "forename",
                "surname",
                "driverid"
            ],
            "results": [
                "raceid",
                "driverid",
                "grid"
            ],
            "races": [
                "raceid",
                "year",
                "name"
            ]
        },
        "gold": "SELECT T3.forename, T3.surname FROM races AS T1 INNER JOIN results AS T2 ON T2.raceId = T1.raceId INNER JOIN drivers AS T3 ON T3.driverId = T2.driverId WHERE T2.grid = 4 AND T1.name = 'Australian Grand Prix' AND T1.year = 1989",
        "candidates": {
            "1": "SELECT T3.forename, T3.surname  FROM races AS T1  INNER JOIN results AS T2 ON T1.raceId = T2.raceId  INNER JOIN drivers AS T3 ON T2.driverId = T3.driverId  WHERE T1.year = 1989 AND T1.name = 'Australian Grand Prix' AND T2.grid = 4;",
            "4": "SELECT T3.forename, T3.surname  FROM races AS T1  INNER JOIN results AS T2 ON T1.raceId = T2.raceId  INNER JOIN drivers AS T3 ON T2.driverId = T3.driverId  WHERE T1.year = 1989 AND T1.name = 'Australian Grand Prix' AND T2.grid = 4",
            "5": "SELECT T1.forename,  T1.surname  FROM drivers AS T1  INNER JOIN results AS T2  ON T1.driverId = T2.driverId  INNER JOIN races AS T3  ON T2.raceId = T3.raceId  WHERE  T3.year = 1989  AND T3.name = 'Australian Grand Prix'  AND T2.grid = 4",
            "2": "SELECT T1.forename,  T1.surname  FROM drivers AS T1  INNER JOIN results AS T2  ON T1.driverId = T2.driverId  INNER JOIN races AS T3  ON T2.raceId = T3.raceId  WHERE  T3.year = 1989  AND T3.name = 'Australian Grand Prix'  AND T2.grid = 4",
            "6": "SELECT T3.forename ,  T3.surname FROM races AS T1 JOIN results AS T2 ON T1.raceid  =  T2.raceid JOIN drivers AS T3 ON T2.driverid  =  T3.driverid WHERE T1.year  =  1989 AND T1.name  =  'Australian Grand Prix' AND T2.grid  =  4",
            "3": "SELECT   T2.forename,   T2.surname FROM races AS T1 INNER JOIN results AS T3   ON T1.raceId = T3.raceId INNER JOIN drivers AS T2   ON T3.driverId = T2.driverId WHERE   T1.year = 1989 AND T1.name = 'Australian Grand Prix' AND T3.grid = 4;"
        }
    },
    {
        "question_id": 935,
        "database": "formula_1",
        "evidence": "managed to finish the race refers to time is not null",
        "question": "How many drivers managed to finish the race in the 2008 Australian Grand Prix?",
        "schema_used": {
            "results": [
                "driverid",
                "raceid",
                "time"
            ],
            "races": [
                "raceid",
                "name",
                "year"
            ]
        },
        "gold": "SELECT COUNT(T2.driverId) FROM races AS T1 INNER JOIN results AS T2 ON T2.raceId = T1.raceId WHERE T1.name = 'Australian Grand Prix' AND T1.year = 2008 AND T2.time IS NOT NULL",
        "candidates": {
            "4": "SELECT COUNT(*)  FROM races AS R  INNER JOIN results AS Res  ON R.raceId = Res.raceId  WHERE R.year = 2008 AND R.name = 'Australian Grand Prix' AND Res.time IS NOT NULL;",
            "1": "SELECT COUNT(*)  FROM results AS R  INNER JOIN races AS Ra ON R.raceId = Ra.raceId  WHERE Ra.year = 2008 AND Ra.name = 'Australian Grand Prix' AND R.time IS NOT NULL;",
            "5": "SELECT COUNT(*) FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T2.year = 2008 AND T2.name = 'Australian Grand Prix' AND T1.time IS NOT NULL",
            "2": "SELECT COUNT(T1.driverId) FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T2.year = 2008 AND T2.name = 'Australian Grand Prix' AND T1.time IS NOT NULL",
            "6": "SELECT count(*) FROM results AS t1 JOIN races AS t2 ON t1.raceId  =  t2.raceId WHERE t2.year  =  2008 AND t2.name  =  \"Australian Grand Prix\" AND t1.time IS NOT NULL",
            "3": "SELECT   COUNT(T2.driverId) FROM races AS T1 INNER JOIN results AS T2   ON T1.raceId = T2.raceId WHERE   T1.year = 2008 AND T1.name = 'Australian Grand Prix' AND T2.time IS NOT NULL;"
        }
    },
    {
        "question_id": 936,
        "database": "formula_1",
        "evidence": "",
        "question": "Which was the fastest lap for Lewis Hamilton in the 2008 Australian Grand Prix?",
        "schema_used": {
            "results": [
                "fastestlap",
                "raceid",
                "driverid"
            ],
            "races": [
                "raceid",
                "name",
                "year"
            ],
            "drivers": [
                "driverid",
                "surname",
                "forename"
            ]
        },
        "gold": "SELECT T1.fastestLap FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId INNER JOIN drivers AS T3 on T1.driverId = T3.driverId WHERE T2.name = 'Australian Grand Prix' AND T2.year = 2008 AND T3.forename = 'Lewis' AND T3.surname = 'Hamilton'",
        "candidates": {
            "4": "SELECT T2.fastestLapTime  FROM races AS T1  INNER JOIN results AS T2 ON T1.raceId = T2.raceId  INNER JOIN drivers AS T3 ON T2.driverId = T3.driverId  WHERE T1.year = 2008 AND T1.name = 'Australian Grand Prix' AND T3.forename = 'Lewis' AND T3.surname = 'Hamilton';",
            "5": "SELECT T1.fastestLapTime FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T2.year = 2008 AND T2.name = 'Australian Grand Prix' AND T1.driverId = ( SELECT driverId FROM drivers WHERE forename = 'Lewis' AND surname = 'Hamilton' ) ORDER BY T1.fastestLapTime LIMIT 1",
            "2": "SELECT T1.fastestLapTime FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId INNER JOIN drivers AS T3 ON T1.driverId = T3.driverId WHERE T3.forename = 'Lewis' AND T3.surname = 'Hamilton' AND T2.name = 'Australian Grand Prix' AND T2.year = 2008 ORDER BY T1.fastestLapTime LIMIT 1",
            "6": "SELECT T2.fastestLapTime FROM races AS T1 JOIN results AS T2 ON T1.raceid  =  T2.raceid JOIN drivers AS T3 ON T2.driverid  =  T3.driverid WHERE T1.year  =  2008 AND T1.name  =  'Australian Grand Prix' AND T3.forename  =  'Lewis' AND T3.surname  =  'Hamilton'",
            "3": "SELECT   T3.fastestLapTime FROM races AS T1 INNER JOIN drivers AS T2   ON T1.raceId = T2.driverId INNER JOIN results AS T3   ON T1.raceId = T3.raceId WHERE   T2.forename = 'Lewis' AND T2.surname = 'Hamilton' AND T1.year = 2008 AND T1.name = 'Australian Grand Prix';",
            "1": "SELECT T2.fastestLapTime  FROM races AS T1  INNER JOIN results AS T2 ON T1.raceId = T2.raceId  INNER JOIN drivers AS T3 ON T2.driverId = T3.driverId  WHERE T1.year = 2008  AND T1.name = 'Australian Grand Prix'  AND T3.forename = 'Lewis'  AND T3.surname = 'Hamilton'  ORDER BY T2.fastestLapTime ASC  LIMIT 1;"
        }
    },
    {
        "question_id": 937,
        "database": "formula_1",
        "evidence": "finish time refers to time; Chinese Grand Prix refers to races.name = 'Chinese Grand Prix';",
        "question": "What's the finish time for the driver who ranked second in 2008's AustChineseralian Grand Prix?",
        "schema_used": {
            "results": [
                "time",
                "raceid",
                "rank"
            ],
            "races": [
                "raceid",
                "year",
                "name"
            ]
        },
        "gold": "SELECT T1.time FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId WHERE T1.rank = 2 AND T2.name = 'Chinese Grand Prix' AND T2.year = 2008",
        "candidates": {
            "4": "SELECT T2.time  FROM races AS T1  INNER JOIN results AS T2 ON T1.raceId = T2.raceId  WHERE T1.year = 2008 AND T1.name = 'Chinese Grand Prix' AND T2.grid = 2",
            "5": "SELECT T1.time FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T2.year = 2008 AND T2.name = 'Australian Grand Prix' AND T1.position = 2",
            "2": "SELECT T1.time FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T2.year = 2008 AND T2.name = 'Australian Grand Prix' AND T1.position = 2",
            "1": "SELECT r.time  FROM results res JOIN races ra ON res.raceId = ra.raceId WHERE ra.year = 2008 AND ra.name = 'Chinese Grand Prix' AND res.position = 2;",
            "6": "SELECT T2.time FROM races AS T1 INNER JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year = 2008 AND T1.name = 'Chinese Grand Prix' AND T2.grid  =  2",
            "3": "SELECT T2.time FROM races AS T1 INNER JOIN results AS T2 ON T1.raceId = T2.raceId WHERE T1.year = 2008 AND T1.name = 'Australian Grand Prix' AND T2.rank = 2"
        }
    },
    {
        "question_id": 938,
        "database": "formula_1",
        "evidence": "only champion's finished time is represented by 'HH:MM:SS.mmm'; where can I know more refers to url",
        "question": "Who was the champion of 2008's Australian Grand Prix and where can I know more about him?",
        "schema_used": {
            "drivers": [
                "forename",
                "surname",
                "url",
                "driverid"
            ],
            "results": [
                "driverid",
                "raceid",
                "time"
            ],
            "races": [
                "raceid",
                "year",
                "name"
            ]
        },
        "gold": "SELECT T1.forename, T1.surname, T1.url FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T3.raceId = T2.raceId WHERE T3.name = 'Australian Grand Prix' AND T2.time LIKE '_:%:__.___' AND T3.year = 2008",
        "candidates": {
            "4": "SELECT d.forename, d.surname, d.url  FROM races r  JOIN results res ON r.raceId = res.raceId  JOIN drivers d ON res.driverId = d.driverId  WHERE r.year = 2008 AND r.name = 'Australian Grand Prix' AND res.time NOT LIKE '+%'",
            "1": "SELECT d.forename, d.surname, d.url  FROM races r  JOIN results res ON r.raceId = res.raceId  JOIN drivers d ON res.driverId = d.driverId  WHERE r.year = 2008 AND r.name = 'Australian Grand Prix' AND res.time NOT LIKE '+%';",
            "5": "SELECT T1.forename,  T1.surname,  T1.url  FROM drivers AS T1  INNER JOIN results AS T2  ON T1.driverId = T2.driverId  INNER JOIN races AS T3  ON T2.raceId = T3.raceId  WHERE  T3.year = 2008  AND T3.name = 'Australian Grand Prix'  AND T2.positionOrder = 1;",
            "2": "SELECT T1.forename,  T1.surname,  T1.url  FROM drivers AS T1  INNER JOIN results AS T2  ON T1.driverId = T2.driverId  INNER JOIN races AS T3  ON T2.raceId = T3.raceId  WHERE  T3.year = 2008  AND T3.name = 'Australian Grand Prix'  AND T2.time NOT LIKE '%+%';",
            "6": "SELECT T3.forename ,  T3.surname ,  T3.url FROM races AS T1 JOIN results AS T2 ON T1.raceId  =  T2.raceId JOIN drivers AS T3 ON T2.driverId  =  T3.driverId WHERE T1.year  =  2008 AND T1.name  =  'Australian Grand Prix' AND T2.time LIKE '%:%:%'",
            "3": "SELECT   T2.forename,   T2.surname,   T2.url FROM results AS T1 INNER JOIN drivers AS T2   ON T1.driverId = T2.driverId INNER JOIN races AS T3   ON T1.raceId = T3.raceId WHERE   T3.year = 2008 AND T3.name = 'Australian Grand Prix' AND T1.time LIKE '%:%:%';"
        }
    },
    {
        "question_id": 939,
        "database": "formula_1",
        "evidence": "from the UN refers to nationality = 'British'",
        "question": "How many drivers from the UN participated in the 2008 Australian Grand Prix?",
        "schema_used": {
            "drivers": [
                "driverid",
                "nationality"
            ],
            "results": [
                "driverid",
                "raceid"
            ],
            "races": [
                "raceid",
                "year",
                "name"
            ]
        },
        "gold": "SELECT COUNT(*) FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T3.raceId = T2.raceId WHERE T3.name = 'Australian Grand Prix' AND T1.nationality = 'British' AND T3.year = 2008",
        "candidates": {
            "4": "SELECT COUNT(DISTINCT T2.driverId) FROM races AS T1 INNER JOIN results AS T2 ON T1.raceId = T2.raceId INNER JOIN drivers AS T3 ON T2.driverId = T3.driverId WHERE T1.year = 2008 AND T1.name = 'Australian Grand Prix' AND T3.nationality = 'British'",
            "6": "SELECT COUNT(T3.driverid) FROM races AS T1 INNER JOIN results AS T2 ON T1.raceid = T2.raceid INNER JOIN drivers AS T3 ON T2.driverid = T3.driverid WHERE T1.year = 2008 AND T1.name = 'Australian Grand Prix' AND T3.nationality = 'British'",
            "5": "SELECT COUNT(T1.driverId) FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T3.year = 2008 AND T3.name = 'Australian Grand Prix' AND T1.nationality = 'British'",
            "2": "SELECT COUNT(T1.driverId) FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T3.year = 2008 AND T3.name = 'Australian Grand Prix' AND T1.nationality = 'British'",
            "1": "SELECT COUNT(DISTINCT T1.driverId) FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId INNER JOIN drivers AS T3 ON T1.driverId = T3.driverId WHERE T2.year = 2008 AND T2.name = 'Australian Grand Prix' AND T3.nationality = 'British';",
            "3": "SELECT   COUNT(T1.driverId) FROM drivers AS T1 INNER JOIN results AS T2   ON T1.driverId = T2.driverId INNER JOIN races AS T3   ON T2.raceId = T3.raceId WHERE   T3.year = 2008 AND T3.name = 'Australian Grand Prix' AND T1.nationality = 'British';"
        }
    },
    {
        "question_id": 940,
        "database": "formula_1",
        "evidence": "COUNT(raceID) > 0 reveals that this driver participated in races; drivers who finished the race refers to time has value.",
        "question": "Among the drivers that finished the race in the 2008 Chinese Grand Prix, how many of them have participated in Formula_1 races?",
        "schema_used": {
            "results": [
                "driverid",
                "raceid",
                "time"
            ],
            "races": [
                "raceid",
                "name",
                "year"
            ]
        },
        "gold": "SELECT COUNT(*) FROM ( SELECT T1.driverId FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId WHERE T2.name = 'Chinese Grand Prix' AND T2.year = 2008 AND T1.time IS NOT NULL GROUP BY T1.driverId HAVING COUNT(T2.raceId) > 0 )",
        "candidates": {
            "2": "SELECT COUNT(DISTINCT T1.driverId) FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T2.year = 2008 AND T2.name = 'Chinese Grand Prix' AND T1.time IS NOT NULL",
            "5": "SELECT COUNT(DISTINCT T1.driverId) FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T2.year = 2008 AND T2.name = 'Chinese Grand Prix' AND T1.time <> ''",
            "6": "SELECT count(DISTINCT T2.driverid) FROM races AS T1 JOIN results AS T2 ON T1.raceid  =  T2.raceid WHERE T1.year  =  2008 AND T1.name  =  'Chinese Grand Prix' AND T2.time IS NOT NULL",
            "3": "SELECT   COUNT(T1.driverId) FROM results AS T1 INNER JOIN races AS T2   ON T1.raceId = T2.raceId WHERE   T2.year = 2008 AND T2.name = 'Chinese Grand Prix' AND T1.time IS NOT NULL;",
            "4": "SELECT COUNT(DISTINCT r.driverId) FROM results r JOIN races ra ON r.raceId = ra.raceId WHERE ra.year = 2008 AND ra.name = 'Chinese Grand Prix' AND r.time != '+1 Lap' AND r.time != '+2 Laps' AND r.time != '+3 Laps' AND r.time != '+4 Laps' AND r.time != '+5 Laps' AND r.time != '+6 Laps' AND r.time != '+7 Laps' AND r.time != '+8 Laps' AND r.time != '+9 Laps' AND r.time != '+10 Laps' AND r.time != 'Accident' AND r.time != 'Black Flag' AND r.time != 'Disqualified' AND r.time != 'Pit Lane' AND r.time != 'Pit Stop' AND r.time != 'Retired' AND r.time != 'Technical'",
            "1": "SELECT COUNT(DISTINCT r.driverId) FROM results r JOIN races ra ON r.raceId = ra.raceId WHERE ra.year = 2008 AND ra.name = 'Chinese Grand Prix' AND r.time != '+5.478' AND r.time != '+8.163' AND r.time IS NOT NULL;"
        }
    },
    {
        "question_id": 941,
        "database": "formula_1",
        "evidence": "",
        "question": "How many points did Lewis Hamilton get in total in all the Formula_1 races he participated?",
        "schema_used": {
            "results": [
                "points",
                "driverid"
            ],
            "drivers": [
                "driverid",
                "forename",
                "surname"
            ]
        },
        "gold": "SELECT SUM(T2.points) FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId WHERE T1.forename = 'Lewis' AND T1.surname = 'Hamilton'",
        "candidates": {
            "4": "SELECT SUM(points)  FROM driverStandings AS ds  INNER JOIN drivers AS d ON ds.driverId = d.driverId  WHERE d.forename = 'Lewis' AND d.surname = 'Hamilton';",
            "1": "SELECT SUM(T1.points)  FROM driverStandings AS T1  INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId  WHERE T2.forename = 'Lewis' AND T2.surname = 'Hamilton';",
            "3": "SELECT   SUM(T2.points) FROM drivers AS T1 INNER JOIN driverStandings AS T2   ON T1.driverId = T2.driverId WHERE   T1.forename = 'Lewis' AND T1.surname = 'Hamilton';",
            "5": "SELECT SUM(T1.points) FROM driverStandings AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T2.forename = 'Lewis' AND T2.surname = 'Hamilton'",
            "2": "SELECT SUM(T1.points) FROM driverStandings AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T2.forename = 'Lewis' AND T2.surname = 'Hamilton'",
            "6": "SELECT SUM(T1.points) FROM driverStandings AS T1 JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T2.forename = \"Lewis\" AND T2.surname = \"Hamilton\""
        }
    },
    {
        "question_id": 942,
        "database": "formula_1",
        "evidence": "average fastest lap time = avg(fastestLapTime); The time is recorded on 'MM:SS.mmm'",
        "question": "What is the average fastest lap time in seconds for Lewis Hamilton in all the Formula_1 races?",
        "schema_used": {
            "drivers": [
                "driverid",
                "surname",
                "forename"
            ],
            "results": [
                "driverid",
                "fastestlaptime"
            ]
        },
        "gold": "SELECT AVG(CAST(SUBSTR(T2.fastestLapTime, 1, INSTR(T2.fastestLapTime, ':') - 1) AS INTEGER) * 60 + CAST(SUBSTR(T2.fastestLapTime, INSTR(T2.fastestLapTime, ':') + 1) AS REAL)) FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId WHERE T1.surname = 'Hamilton' AND T1.forename = 'Lewis'",
        "candidates": {
            "4": "SELECT AVG(strftime('%s', T1.fastestLapTime)) AS average_fastest_lap_time FROM results AS T1  INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T2.forename = 'Lewis' AND T2.surname = 'Hamilton';",
            "1": "SELECT AVG(strftime('%s', T2.fastestLapTime)) AS average_fastest_lap_time FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId WHERE T1.forename = 'Lewis';",
            "5": "SELECT AVG(STRFTIME('%M',T1.fastestLapTime)*60 + STRFTIME('%S',T1.fastestLapTime) + CAST(STRFTIME('%f',T1.fastestLapTime) AS REAL)/1000) FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T2.forename = 'Lewis' AND T2.surname = 'Hamilton'",
            "2": "SELECT CAST(AVG(REPLACE(SUBSTR(results.fastestLapTime, INSTR(results.fastestLapTime, ':') + 1),'.', '') + STRFTIME('%s', SUBSTR(results.fastestLapTime, 1, INSTR(results.fastestLapTime, ':') -1) || ':00')) AS REAL) FROM results INNER JOIN drivers ON results.driverId = drivers.driverId WHERE drivers.forename = 'Lewis' AND drivers.surname = 'Hamilton'",
            "6": "SELECT avg(substr(fastestLapTime, 1, 2) * 60 + substr(fastestLapTime, 4, 2) + substr(fastestLapTime, 7, 3) * 0.001) FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid WHERE T1.forename = 'Lewis' AND T1.surname = 'Hamilton'",
            "3": "SELECT AVG(CAST(SUBSTR(T2.fastestLapTime, 1, INSTR(T2.fastestLapTime, ':') - 1) AS REAL) * 60 + CAST(SUBSTR(T2.fastestLapTime, INSTR(T2.fastestLapTime, ':') + 1) AS REAL)) FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId WHERE T1.forename = 'Lewis' AND T1.surname = 'Hamilton'"
        }
    },
    {
        "question_id": 943,
        "database": "formula_1",
        "evidence": "completing all the laps refers to time is not null; rate = divide(COUNT(raceID where time is not null), COUNT(raceID))",
        "question": "What is the rate of drivers completing all the laps in the 2008 Australian Grand Prix?",
        "schema_used": {
            "results": [
                "raceid",
                "resultid",
                "time"
            ],
            "races": [
                "raceid",
                "name",
                "year"
            ]
        },
        "gold": "SELECT CAST(SUM(IIF(T1.time IS NOT NULL, 1, 0)) AS REAL) * 100 / COUNT(T1.resultId) FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T2.name = 'Australian Grand Prix' AND T2.year = 2008",
        "candidates": {
            "4": "SELECT CAST(SUM(CASE WHEN T2.time IS NOT NULL THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T2.raceId)  FROM races AS T1  INNER JOIN lapTimes AS T2 ON T1.raceId = T2.raceId  WHERE T1.year = 2008 AND T1.name = 'Australian Grand Prix'",
            "5": "SELECT CAST(SUM(CASE WHEN T1.time IS NOT NULL THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.raceId) FROM lapTimes AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T2.year = 2008 AND T2.name = 'Australian Grand Prix'",
            "2": "SELECT CAST(SUM(CASE WHEN T1.time IS NOT NULL THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.raceId) FROM lapTimes AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T2.year = 2008 AND T2.name = 'Australian Grand Prix'",
            "6": "SELECT CAST(SUM(CASE WHEN T2.time IS NOT NULL THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.raceid) FROM races AS T1 INNER JOIN lapTimes AS T2 ON T1.raceid = T2.raceid WHERE T1.year = 2008 AND T1.name = 'Australian Grand Prix'",
            "3": "SELECT   CAST(SUM(CASE WHEN T2.time IS NOT NULL THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.raceId) FROM races AS T1 INNER JOIN lapTimes AS T2   ON T1.raceId = T2.raceId WHERE   T1.year = 2008 AND T1.name = 'Australian Grand Prix';",
            "1": "SELECT CAST(SUM(CASE WHEN T2.time IS NOT NULL THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T2.raceId)  FROM races AS T1  INNER JOIN lapTimes AS T2 ON T1.raceId = T2.raceId  WHERE T1.year = 2008 AND T1.name = 'Australian Grand Prix';"
        }
    },
    {
        "question_id": 944,
        "database": "formula_1",
        "evidence": "how much faster in percentage = divide(subtract(incremental time, champion time), last_driver time) * 100; last driver finished time = incremental time + champion time; only champion's finished time is represented by 'HH:MM:SS.mmm'; finished the game refers to time is not null",
        "question": "How much faster in percentage is the champion than the driver who finished the race last in the 2008 Australian Grand Prix?",
        "schema_used": {
            "last_driver_incremental": [
                "time_seconds"
            ],
            "champion_time": [
                "time_seconds"
            ],
            "time_in_seconds": [
                "positionorder",
                "time_seconds"
            ],
            "results": [
                "positionorder",
                "raceid",
                "time"
            ],
            "races": [
                "raceid",
                "year",
                "name"
            ]
        },
        "gold": "WITH time_in_seconds AS ( SELECT T1.positionOrder, CASE WHEN T1.positionOrder = 1 THEN (CAST(SUBSTR(T1.time, 1, 1) AS REAL) * 3600) + (CAST(SUBSTR(T1.time, 3, 2) AS REAL) * 60) + CAST(SUBSTR(T1.time, 6) AS REAL) ELSE CAST(SUBSTR(T1.time, 2) AS REAL) END AS time_seconds FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T2.name = 'Australian Grand Prix' AND T1.time IS NOT NULL AND T2.year = 2008 ), champion_time AS ( SELECT time_seconds FROM time_in_seconds WHERE positionOrder = 1), last_driver_incremental AS ( SELECT time_seconds FROM time_in_seconds WHERE positionOrder = (SELECT MAX(positionOrder) FROM time_in_seconds) ) SELECT (CAST((SELECT time_seconds FROM last_driver_incremental) AS REAL) * 100) / (SELECT time_seconds + (SELECT time_seconds FROM last_driver_incremental) FROM champion_time)",
        "candidates": {
            "4": "SELECT      CAST(         (STRFTIME('%s', T2.time) - STRFTIME('%s', T1.time)) * 100 /          STRFTIME('%s', T2.time)     AS REAL) AS percentage_faster FROM      results AS T1 INNER JOIN      races AS T3 ON T1.raceId = T3.raceId INNER JOIN      results AS T2 ON T3.raceId = T2.raceId WHERE      T3.year = 2008      AND T3.name = 'Australian Grand Prix'     AND T1.position = 1     AND T2.position = (SELECT MAX(position) FROM results WHERE raceId = T3.raceId);",
            "2": "SELECT CAST((JULIANDAY(SUBSTR(T2.time,1,INSTR(T2.time,':')-1) ||':'|| SUBSTR(T2.time,INSTR(T2.time,':')+1,LENGTH(T2.time)))-JULIANDAY(T1.time)) AS REAL)*100/(JULIANDAY(SUBSTR(T2.time,1,INSTR(T2.time,':')-1) ||':'|| SUBSTR(T2.time,INSTR(T2.time,':')+1,LENGTH(T2.time)))-JULIANDAY(T1.time)+JULIANDAY(T1.time)) FROM results AS T1 INNER JOIN results AS T2 ON T1.raceId = T2.raceId INNER JOIN races AS T3 ON T1.raceId = T3.raceId WHERE T3.year = 2008 AND T3.name = 'Australian Grand Prix' AND T1.position = 1 AND T2.position = ( SELECT MAX(position) FROM results WHERE raceId = T1.raceId )",
            "6": "SELECT CAST(SUM(CASE WHEN T3.position  !=  1 THEN REPLACE(SUBSTR(T3.time, 2), '.', '') ELSE 0 END) AS REAL) * 100 / SUM(CASE WHEN T3.position  =  1 THEN REPLACE(SUBSTR(T3.time, 2), ':', '') ELSE 0 END) FROM races AS T1 INNER JOIN results AS T3 ON T1.raceid  =  T3.raceid WHERE T1.year  =  2008 AND T1.name  =  'Australian Grand Prix' AND T3.time IS NOT NULL",
            "3": "SELECT CAST(SUM(CASE WHEN T2.position = ( SELECT MIN(T2_1.position) FROM results AS T2_1 INNER JOIN races AS T1_1 ON T1_1.raceId = T2_1.raceId WHERE T1_1.year = 2008 AND T1_1.name = 'Australian Grand Prix' ) THEN 0 ELSE REPLACE(REPLACE(T2.time, '+', ''), ' laps', '') END) AS REAL) * 100 / COUNT(T2.time) FROM races AS T1 INNER JOIN results AS T2 ON T1.raceId = T2.raceId WHERE T1.year = 2008 AND T1.name = 'Australian Grand Prix'",
            "5": "SELECT CAST((JULIANDAY(SUBSTR(T1.time,1,INSTR(T1.time,':')-1)*3600 + SUBSTR(T1.time,INSTR(T1.time,':')+1,INSTR(T1.time,' ',INSTR(T1.time,':')+1)-INSTR(T1.time,':')-1)*60 + SUBSTR(T1.time,INSTR(T1.time,' ',INSTR(T1.time,':')+1)+1,LENGTH(T1.time))) - JULIANDAY(SUBSTR(T2.time,1,INSTR(T2.time,':')-1)*3600 + SUBSTR(T2.time,INSTR(T2.time,':')+1,INSTR(T2.time,' ',INSTR(T2.time,':')+1)-INSTR(T2.time,':')-1)*60 + SUBSTR(T2.time,INSTR(T2.time,' ',INSTR(T2.time,':')+1)+1,LENGTH(T2.time)))) AS REAL)*100/(JULIANDAY(SUBSTR(T2.time,1,INSTR(T2.time,':')-1)*3600 + SUBSTR(T2.time,INSTR(T2.time,':')+1,INSTR(T2.time,' ',INSTR(T2.time,':')+1)-INSTR(T2.time,':')-1)*60 + SUBSTR(T2.time,INSTR(T2.time,' ',INSTR(T2.time,':')+1)+1,LENGTH(T2.time)))) FROM results AS T1 INNER JOIN races AS T3 ON T1.raceId = T3.raceId INNER JOIN results AS T2 ON T1.raceId = T2.raceId WHERE T3.year = 2008 AND T3.name = 'Australian Grand Prix' AND T1.position = 1 AND T2.position = ( SELECT MAX(position) FROM results WHERE raceId = ( SELECT raceId FROM races WHERE year = 2008 AND name = 'Australian Grand Prix' ) )",
            "1": "SELECT WITH RaceData AS (     SELECT          r.raceId,         r.year,         r.name,         MIN(CASE WHEN res.position = 1 THEN res.time END) AS champion_time,         MAX(CASE WHEN res.position = (SELECT MAX(position) FROM results WHERE raceId = r.raceId) THEN res.time END) AS last_driver_time     FROM          races r     JOIN          results res ON r.raceId = res.raceId     WHERE          r.year = 2008 AND r.name = 'Australian Grand Prix'     GROUP BY          r.raceId, r.year, r.name ) SELECT      ((julianday(last_driver_time) - julianday(champion_time)) / julianday(champion_time)) * 100 AS percentage_faster FROM      RaceData;"
        }
    },
    {
        "question_id": 945,
        "database": "formula_1",
        "evidence": "Australia is the country; Melbourne is the location of circuit;",
        "question": "How many circuits are there in Adelaide, Australia?",
        "schema_used": {
            "circuits": [
                "circuitid",
                "location",
                "country"
            ]
        },
        "gold": "SELECT COUNT(circuitId) FROM circuits WHERE location = 'Adelaide' AND country = 'Australia'",
        "candidates": {
            "4": "SELECT COUNT(*)  FROM circuits  WHERE location = 'Adelaide' AND country = 'Australia';",
            "1": "SELECT COUNT(*)  FROM circuits  WHERE location = 'Adelaide' AND country = 'Australia';",
            "5": "SELECT COUNT(*) FROM circuits WHERE location = 'Adelaide' AND country = 'Australia'",
            "2": "SELECT COUNT(*) FROM circuits WHERE location = 'Adelaide' AND country = 'Australia'",
            "6": "SELECT COUNT(*) FROM circuits WHERE location = 'Adelaide' AND country = 'Australia'",
            "3": "SELECT   COUNT(circuitId) FROM circuits WHERE   location = 'Adelaide' AND country = 'Australia';"
        }
    },
    {
        "question_id": 946,
        "database": "formula_1",
        "evidence": "location coordinates refers to (lat, lng); the US refers to country = 'USA';",
        "question": "Please list the location coordinates of the US circuits.",
        "schema_used": {
            "circuits": [
                "lat",
                "lng",
                "country"
            ]
        },
        "gold": "SELECT lat, lng FROM circuits WHERE country = 'USA'",
        "candidates": {
            "4": "SELECT lat, lng FROM circuits WHERE country = 'USA';",
            "1": "SELECT lat, lng FROM circuits WHERE country = 'USA';",
            "5": "SELECT lat, lng FROM circuits WHERE country = 'USA'",
            "2": "SELECT lat, lng FROM circuits WHERE country = 'USA'",
            "6": "SELECT lat ,  lng FROM circuits WHERE country  =  'USA'",
            "3": "SELECT   lat,   lng FROM circuits WHERE   country = 'USA';"
        }
    },
    {
        "question_id": 947,
        "database": "formula_1",
        "evidence": "born after 1980 refers to year (dob) >1980;",
        "question": "How many British drivers were born after 1980?",
        "schema_used": {
            "drivers": [
                "driverid",
                "nationality",
                "dob"
            ]
        },
        "gold": "SELECT COUNT(driverId) FROM drivers WHERE nationality = 'British' AND STRFTIME('%Y', dob) > '1980'",
        "candidates": {
            "4": "SELECT COUNT(*)  FROM drivers  WHERE nationality = 'British' AND strftime('%Y', dob) > '1980';",
            "1": "SELECT COUNT(*)  FROM drivers  WHERE nationality = 'British' AND strftime('%Y', dob) > '1980';",
            "2": "SELECT COUNT(*) FROM drivers WHERE nationality = 'British' AND STRFTIME('%Y', dob) > '1980'",
            "5": "SELECT COUNT(*) FROM drivers WHERE nationality = 'British' AND STRFTIME('%Y', dob) > '1980'",
            "6": "SELECT count(*) FROM drivers WHERE nationality  =  \"British\" AND dob  >  \"1980-12-31\"",
            "3": "SELECT COUNT(driverId) FROM drivers WHERE nationality = 'British' AND STRFTIME('%Y', dob) > '1980'"
        }
    },
    {
        "question_id": 948,
        "database": "formula_1",
        "evidence": "maximum points = MAX(points); British is a nationality",
        "question": "What are the maximum points of British constructors?",
        "schema_used": {
            "constructorstandings": [
                "points",
                "constructorid"
            ],
            "constructors": [
                "constructorid",
                "nationality"
            ]
        },
        "gold": "SELECT MAX(T1.points) FROM constructorStandings AS T1 INNER JOIN constructors AS T2 on T1.constructorId = T2.constructorId WHERE T2.nationality = 'British'",
        "candidates": {
            "4": "SELECT MAX(points)  FROM constructorStandings AS T1  INNER JOIN constructors AS T2  ON T1.constructorId = T2.constructorId  WHERE T2.nationality = 'British';",
            "1": "SELECT MAX(T1.points) FROM constructorStandings AS T1 INNER JOIN constructors AS T2 ON T1.constructorId = T2.constructorId WHERE T2.nationality = 'British';",
            "5": "SELECT MAX(T1.points) FROM constructorStandings AS T1 INNER JOIN constructors AS T2 ON T1.constructorId = T2.constructorId WHERE T2.nationality = 'British'",
            "2": "SELECT MAX(T1.points) FROM constructorStandings AS T1 INNER JOIN constructors AS T2 ON T1.constructorId = T2.constructorId WHERE T2.nationality = 'British'",
            "6": "SELECT MAX(T1.points) FROM constructorStandings AS T1 JOIN constructors AS T2 ON T1.constructorId = T2.constructorId WHERE T2.nationality = \"British\"",
            "3": "SELECT max(T1.points) FROM constructorStandings AS T1 JOIN constructors AS T2 ON T1.constructorId  =  T2.constructorId WHERE T2.nationality  =  \"British\""
        }
    },
    {
        "question_id": 949,
        "database": "formula_1",
        "evidence": "",
        "question": "Which constructor has the highest point?",
        "schema_used": {
            "constructors": [
                "name",
                "constructorid"
            ],
            "constructorstandings": [
                "constructorid",
                "points"
            ]
        },
        "gold": "SELECT T2.name FROM constructorStandings AS T1 INNER JOIN constructors AS T2 on T1.constructorId = T2.constructorId ORDER BY T1.points DESC LIMIT 1",
        "candidates": {
            "4": "SELECT T2.name FROM constructorStandings AS T1 INNER JOIN constructors AS T2 ON T1.constructorId = T2.constructorId ORDER BY T1.points DESC LIMIT 1",
            "1": "SELECT T2.name  FROM constructorStandings AS T1  INNER JOIN constructors AS T2  ON T1.constructorId = T2.constructorId  ORDER BY T1.points DESC  LIMIT 1;",
            "5": "SELECT name  FROM  constructors  WHERE  constructorId = (SELECT constructorId FROM constructorStandings ORDER BY points DESC LIMIT 1)",
            "2": "SELECT T1.name FROM constructors AS T1 INNER JOIN constructorStandings AS T2 ON T1.constructorId = T2.constructorId ORDER BY T2.points DESC LIMIT 1",
            "6": "SELECT T2.name FROM constructorStandings AS T1 INNER JOIN constructors AS T2 ON T1.constructorId = T2.constructorId ORDER BY T1.points DESC LIMIT 1",
            "3": "SELECT   T2.name FROM constructorStandings AS T1 INNER JOIN constructors AS T2   ON T1.constructorId = T2.constructorId ORDER BY   T1.points DESC LIMIT 1;"
        }
    },
    {
        "question_id": 950,
        "database": "formula_1",
        "evidence": "race at 291 refers to raceID = 291;",
        "question": "Please list the constructor names with 0 points at race 291.",
        "schema_used": {
            "constructors": [
                "name",
                "constructorid"
            ],
            "constructorstandings": [
                "constructorid",
                "points",
                "raceid"
            ]
        },
        "gold": "SELECT T2.name FROM constructorStandings AS T1 INNER JOIN constructors AS T2 on T1.constructorId = T2.constructorId WHERE T1.points = 0 AND T1.raceId = 291",
        "candidates": {
            "4": "SELECT T1.name  FROM constructors AS T1  INNER JOIN constructorResults AS T2 ON T1.constructorId = T2.constructorId  WHERE T2.raceId = 291 AND T2.points = 0;",
            "1": "SELECT T1.name  FROM constructors AS T1  INNER JOIN constructorResults AS T2  ON T1.constructorId = T2.constructorId  WHERE T2.raceId = 291 AND T2.points = 0;",
            "5": "SELECT T1.name FROM constructors AS T1 INNER JOIN constructorResults AS T2 ON T1.constructorId = T2.constructorId WHERE T2.raceId = 291 AND T2.points = 0",
            "2": "SELECT T1.name FROM constructors AS T1 INNER JOIN constructorResults AS T2 ON T1.constructorId = T2.constructorId WHERE T2.raceId = 291 AND T2.points = 0",
            "6": "SELECT T1.name FROM constructors AS T1 JOIN constructorResults AS T2 ON T1.constructorId = T2.constructorId WHERE T2.raceId = 291 AND T2.points = 0",
            "3": "SELECT T2.name FROM constructorResults AS T1 INNER JOIN constructors AS T2 ON T1.constructorId = T2.constructorId WHERE T1.raceId = 291 AND T1.points = 0"
        }
    },
    {
        "question_id": 951,
        "database": "formula_1",
        "evidence": "2 races refers to COUNT(raceID) = 2; Japanese refers to constructors.nationality = 'Japanese';",
        "question": "How many Japanese constructors have 0 points in 2 races?",
        "schema_used": {
            "constructorstandings": [
                "constructorid",
                "raceid",
                "points"
            ],
            "constructors": [
                "constructorid",
                "nationality"
            ]
        },
        "gold": "SELECT COUNT(T1.raceId) FROM constructorStandings AS T1 INNER JOIN constructors AS T2 on T1.constructorId = T2.constructorId WHERE T1.points = 0 AND T2.nationality = 'Japanese' GROUP BY T1.constructorId HAVING COUNT(raceId) = 2",
        "candidates": {
            "4": "SELECT COUNT(T1.constructorId) FROM constructorResults AS T1 INNER JOIN constructors AS T2 ON T1.constructorId = T2.constructorId WHERE T2.nationality = 'Japanese' GROUP BY T1.constructorId HAVING COUNT(T1.raceId) = 2 AND SUM(T1.points) = 0",
            "1": "SELECT COUNT(*)  FROM constructorResults AS T1  INNER JOIN constructors AS T2 ON T1.constructorId = T2.constructorId  WHERE T2.nationality = 'Japanese'  GROUP BY T1.constructorId  HAVING COUNT(T1.raceId) = 2 AND SUM(T1.points) = 0;",
            "5": "SELECT COUNT(*) FROM constructors AS T1 INNER JOIN constructorResults AS T2 ON T1.constructorId = T2.constructorId WHERE T1.nationality = 'Japanese' AND T2.points = 0 GROUP BY T2.constructorId HAVING COUNT(*)  = 2",
            "2": "SELECT COUNT(T1.constructorId) FROM constructors AS T1 INNER JOIN constructorResults AS T2 ON T1.constructorId = T2.constructorId WHERE T1.nationality = 'Japanese' AND T2.points = 0 GROUP BY T1.constructorId HAVING COUNT(T2.raceId) = 2",
            "6": "SELECT COUNT(*) FROM constructors AS T1 JOIN constructorResults AS T2 ON T1.constructorId  =  T2.constructorId WHERE T1.nationality  =  'Japanese' AND T2.points  =  0 GROUP BY T2.constructorId HAVING COUNT(T2.raceId)  =  2",
            "3": "SELECT COUNT(T1.constructorId) FROM constructors AS T1 INNER JOIN constructorResults AS T2 ON T1.constructorId = T2.constructorId WHERE T1.nationality = 'Japanese' AND T2.points = 0 GROUP BY T2.constructorId HAVING COUNT(T2.raceId) = 2"
        }
    },
    {
        "question_id": 952,
        "database": "formula_1",
        "evidence": "",
        "question": "Which constructors have been ranked 1?",
        "schema_used": {
            "constructors": [
                "name",
                "constructorid"
            ],
            "results": [
                "constructorid",
                "rank"
            ]
        },
        "gold": "SELECT DISTINCT T2.name FROM results AS T1 INNER JOIN constructors AS T2 on T1.constructorId = T2.constructorId WHERE T1.rank = 1",
        "candidates": {
            "4": "SELECT T2.name  FROM constructorStandings AS T1  INNER JOIN constructors AS T2  ON T1.constructorId = T2.constructorId  WHERE T1.position = 1;",
            "1": "SELECT T2.name  FROM constructorStandings AS T1  INNER JOIN constructors AS T2  ON T1.constructorId = T2.constructorId  WHERE T1.position = 1;",
            "2": "SELECT T1.name FROM constructors AS T1 INNER JOIN constructorStandings AS T2 ON T1.constructorId = T2.constructorId WHERE T2.position = 1",
            "5": "SELECT T1.name FROM constructors AS T1 INNER JOIN constructorStandings AS T2 ON T1.constructorId = T2.constructorId WHERE T2.position = 1",
            "6": "SELECT T2.name FROM constructorStandings AS T1 JOIN constructors AS T2 ON T1.constructorId  =  T2.constructorId WHERE T1.position  =  1",
            "3": "SELECT   T2.name FROM constructorStandings AS T1 INNER JOIN constructors AS T2   ON T1.constructorId = T2.constructorId WHERE   T1.position = 1;"
        }
    },
    {
        "question_id": 953,
        "database": "formula_1",
        "evidence": "lap numbers of over 50 refers to laps > 50;",
        "question": "How many French constructors have a lap number of over 50?",
        "schema_used": {
            "results": [
                "constructorid",
                "laps"
            ],
            "constructors": [
                "constructorid",
                "nationality"
            ]
        },
        "gold": "SELECT COUNT(DISTINCT T2.constructorId) FROM results AS T1 INNER JOIN constructors AS T2 on T1.constructorId = T2.constructorId WHERE T1.laps > 50 AND T2.nationality = 'French'",
        "candidates": {
            "4": "SELECT COUNT(DISTINCT T1.driverId) FROM lapTimes AS T1 INNER JOIN results AS T2 ON T1.raceId = T2.raceId AND T1.driverId = T2.driverId INNER JOIN constructors AS T3 ON T2.constructorId = T3.constructorId WHERE T1.lap > 50 AND T3.nationality = 'French'",
            "2": "SELECT COUNT(T1.constructorId) FROM constructors AS T1 INNER JOIN results AS T2 ON T1.constructorId = T2.constructorId INNER JOIN lapTimes AS T3 ON T2.raceId = T3.raceId WHERE T1.nationality = 'French' AND T3.lap > 50",
            "5": "SELECT COUNT(T1.constructorId) FROM constructors AS T1 INNER JOIN results AS T2 ON T1.constructorId = T2.constructorId INNER JOIN lapTimes AS T3 ON T2.raceId = T3.raceId WHERE T1.nationality = 'French' AND T3.lap > 50",
            "6": "SELECT COUNT(T3.constructorId) FROM lapTimes AS T1 JOIN results AS T2 ON T1.raceId = T2.raceId AND T1.driverId = T2.driverId JOIN constructors AS T3 ON T2.constructorId = T3.constructorId WHERE T3.nationality = 'French' AND T1.lap  >  50",
            "3": "SELECT COUNT(T3.constructorId) FROM results AS T1 INNER JOIN lapTimes AS T2   ON T1.raceId = T2.raceId AND T1.driverId = T2.driverId INNER JOIN constructors AS T3   ON T1.constructorId = T3.constructorId WHERE   T3.nationality = 'French' AND T2.lap > 50;",
            "1": "SELECT COUNT(DISTINCT T1.raceId, T1.driverId) FROM lapTimes AS T1 INNER JOIN results AS T2 ON T1.raceId = T2.raceId AND T1.driverId = T2.driverId INNER JOIN constructors AS T3 ON T2.constructorId = T3.constructorId WHERE T1.lap > 50 AND T3.nationality = 'French' GROUP BY T1.raceId, T1.driverId"
        }
    },
    {
        "question_id": 954,
        "database": "formula_1",
        "evidence": "from 2007 to 2009 refers to year between 2007 and 2009; race completion refers to time is not null; percentage = Divide(COUNT(DriverID where time is not null and year between 2007 and 2009),Count (DriverID where year between 2007 and 2009))*100; ",
        "question": "Please calculate the race completion percentage of Japanese drivers from 2007 to 2009.",
        "schema_used": {
            "results": [
                "raceid",
                "driverid",
                "time"
            ],
            "races": [
                "raceid",
                "year"
            ],
            "drivers": [
                "driverid",
                "nationality"
            ]
        },
        "gold": "SELECT CAST(SUM(IIF(T1.time IS NOT NULL, 1, 0)) AS REAL) * 100 / COUNT(T1.raceId) FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId INNER JOIN drivers AS T3 on T1.driverId = T3.driverId WHERE T3.nationality = 'Japanese' AND T2.year BETWEEN 2007 AND 2009",
        "candidates": {
            "4": "SELECT CAST(SUM(CASE WHEN T3.nationality = 'Japanese' AND T2.time IS NOT NULL THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(CASE WHEN T3.nationality = 'Japanese' THEN 1 ELSE 0 END) FROM races AS T1 INNER JOIN results AS T2 ON T1.raceId = T2.raceId INNER JOIN drivers AS T3 ON T2.driverId = T3.driverId WHERE T1.year BETWEEN 2007 AND 2009;",
            "5": "SELECT CAST(SUM(CASE WHEN T1.time IS NOT NULL THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T1.raceId = T3.raceId WHERE T2.nationality = 'Japanese' AND T3.year BETWEEN 2007 AND 2009",
            "2": "SELECT CAST(SUM(CASE WHEN T1.time IS NOT NULL THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId INNER JOIN drivers AS T3 ON T1.driverId = T3.driverId WHERE T3.nationality = 'Japanese' AND T2.year BETWEEN 2007 AND 2009",
            "3": "SELECT CAST(SUM(CASE WHEN T3.nationality = 'Japanese' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.driverId) FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId INNER JOIN drivers AS T3 ON T1.driverId = T3.driverId WHERE T2.year BETWEEN 2007 AND 2009",
            "6": "SELECT CAST(SUM(CASE WHEN T3.nationality = 'Japanese' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.driverId) FROM results AS T1 INNER JOIN drivers AS T3 ON T1.driverid = T3.driverid INNER JOIN races AS T2 ON T1.raceid = T2.raceid WHERE T2.year BETWEEN 2007 AND 2009",
            "1": "SELECT      CAST(SUM(CASE WHEN T2.time IS NOT NULL THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T2.driverId)  FROM      races AS T1  INNER JOIN      results AS T2 ON T1.raceId = T2.raceId  INNER JOIN      drivers AS T3 ON T2.driverId = T3.driverId WHERE      T1.year BETWEEN 2007 AND 2009      AND T3.nationality = 'Japanese';"
        }
    },
    {
        "question_id": 955,
        "database": "formula_1",
        "evidence": "only champion's finished time is represented by 'HH:MM:SS.mmm'; finished the game refers to time is not null; before year 1975 refers to year < 1975;",
        "question": "What is the average time in seconds of champion for each year, before year 1975?",
        "schema_used": {
            "champion_time": [
                "year",
                "time_seconds"
            ],
            "races": [
                "year",
                "raceid"
            ],
            "results": [
                "positionorder",
                "raceid",
                "time"
            ],
            "time_in_seconds": [
                "year",
                "raceid",
                "time_seconds",
                "positionorder"
            ]
        },
        "gold": "WITH time_in_seconds AS ( SELECT T2.year, T2.raceId, T1.positionOrder, CASE WHEN T1.positionOrder = 1 THEN (CAST(SUBSTR(T1.time, 1, 1) AS REAL) * 3600) + (CAST(SUBSTR(T1.time, 3, 2) AS REAL) * 60) + CAST(SUBSTR(T1.time, 6,2) AS REAL )   + CAST(SUBSTR(T1.time, 9) AS REAL)/1000 ELSE 0 END AS time_seconds FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T1.time IS NOT NULL ), champion_time AS ( SELECT year, raceId, time_seconds FROM time_in_seconds WHERE positionOrder = 1 ) SELECT year, AVG(time_seconds) FROM champion_time WHERE year < 1975 GROUP BY year HAVING AVG(time_seconds) IS NOT NULL",
        "candidates": {
            "1": "SELECT      r.year,      AVG(strftime('%s', r.time)) AS average_time_seconds FROM      races ra INNER JOIN      results r ON ra.raceId = r.raceId WHERE      r.position = 1 AND r.time IS NOT NULL AND ra.year < 1975 GROUP BY      r.year;",
            "4": "SELECT      r.year,      AVG(         strftime('%s', r.time)          - strftime('%s', '00:00:00')          + CAST(strftime('%f', r.time) AS REAL)     ) AS average_time_in_seconds FROM      races ra INNER JOIN      results r ON ra.raceId = r.raceId WHERE      r.position = 1      AND ra.year < 1975      AND r.time IS NOT NULL GROUP BY      r.year;",
            "2": "SELECT CAST(SUM(REPLACE(SUBSTR(T2.time, 1, INSTR(T2.time, ':') - 1) * 3600 + SUBSTR(T2.time, INSTR(T2.time, ':') + 1, INSTR(SUBSTR(T2.time, INSTR(T2.time, ':') + 1), ':') - 1) * 60 + SUBSTR(T2.time, -9, 9), ',', '.') ) AS REAL) / COUNT(T2.time) FROM races AS T1 INNER JOIN results AS T2 ON T1.raceId = T2.raceId WHERE T2.position = 1 AND T1.year < 1975 AND T2.time NOT LIKE '%+%';",
            "5": "SELECT T1.year, CAST(SUBSTR(T2.time, 1, INSTR(T2.time, ':') - 1) AS REAL) * 3600 + CAST(SUBSTR(T2.time, INSTR(T2.time, ':') + 1, INSTR(T2.time, ':', INSTR(T2.time, ':') + 1) - INSTR(T2.time, ':') - 1) AS REAL) * 60 + CAST(SUBSTR(T2.time, INSTR(T2.time, ':', INSTR(T2.time, ':') + 1) + 1) AS REAL) FROM races AS T1 INNER JOIN results AS T2 ON T1.raceId = T2.raceId WHERE T2.position = 1 AND T1.year < 1975 AND T2.time IS NOT NULL GROUP BY T1.year",
            "6": "SELECT AVG(CASE WHEN T3.time LIKE '%:%:%' THEN CAST(SUBSTR(T3.time, 1, 2) AS REAL) * 3600 + CAST(SUBSTR(T3.time, 4, 2) AS REAL) * 60 + CAST(SUBSTR(T3.time, 7) AS REAL) ELSE NULL END), T2.year FROM drivers AS T1 INNER JOIN races AS T2 ON T1.driverId = T2.raceId INNER JOIN results AS T3 ON T2.raceId = T3.raceId WHERE T3.position  =  1 AND T2.year  <  1975 GROUP BY T2.year",
            "3": "SELECT   AVG(     CAST(SUBSTR(T2.time, 1, 2) AS REAL) * 3600 + CAST(SUBSTR(T2.time, 4, 2) AS REAL) * 60 + CAST(SUBSTR(T2.time, 7) AS REAL)   ),   T1.year FROM races AS T1 INNER JOIN results AS T2   ON T1.raceId = T2.raceId WHERE   NOT T2.time IS NULL AND T2.position = 1 AND T1.year < 1975 GROUP BY   T1.year;"
        }
    },
    {
        "question_id": 956,
        "database": "formula_1",
        "evidence": "born after 1975 refers to year(dob) >1975;",
        "question": "Which drivers born after 1975 have been ranked 2? Please give their forenames and surnames.",
        "schema_used": {
            "drivers": [
                "forename",
                "surname",
                "driverid",
                "dob"
            ],
            "results": [
                "driverid",
                "rank"
            ]
        },
        "gold": "SELECT T2.forename, T2.surname FROM results AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId WHERE STRFTIME('%Y', T2.dob) > '1975' AND T1.rank = 2",
        "candidates": {
            "4": "SELECT T2.forename, T2.surname  FROM results AS T1  INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId  WHERE T1.grid = 2 AND YEAR(T2.dob) > 1975;",
            "1": "SELECT T1.forename, T1.surname  FROM drivers AS T1  INNER JOIN results AS T2 ON T1.driverId = T2.driverId  WHERE strftime('%Y', T1.dob) > '1975' AND T2.position = 2;",
            "5": "SELECT forename,  surname  FROM  drivers  WHERE  STRFTIME('%Y', dob) > '1975'  INTERSECT  SELECT  forename,  surname  FROM  drivers  INNER JOIN results  ON drivers.driverId = results.driverId  WHERE  position = 2",
            "2": "SELECT T1.forename,  T1.surname  FROM drivers AS T1  INNER JOIN results AS T2  ON T1.driverId = T2.driverId  WHERE STRFTIME('%Y', T1.dob) > '1975' AND T2.grid = 2",
            "6": "SELECT forename ,  surname FROM drivers WHERE CAST(strftime('%Y', dob) AS INTEGER)  >  1975 INTERSECT SELECT T1.forename ,  T1.surname FROM drivers AS T1 JOIN results AS T2 ON T1.driverid  =  T2.driverid WHERE T2.grid  =  2",
            "3": "SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN results AS T2   ON T1.driverId = T2.driverId WHERE   T1.dob > '1975-12-31' AND T2.rank = 2;"
        }
    },
    {
        "question_id": 957,
        "database": "formula_1",
        "evidence": "haven't finished the race refers to time is null;",
        "question": "How many Italian drivers haven't finished the race?",
        "schema_used": {
            "results": [
                "driverid",
                "time"
            ],
            "drivers": [
                "driverid",
                "nationality"
            ]
        },
        "gold": "SELECT COUNT(T1.driverId) FROM results AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId WHERE T2.nationality = 'Italian' AND T1.time IS NULL",
        "candidates": {
            "4": "SELECT COUNT(driverId)  FROM results  WHERE time IS NULL  AND driverId IN (     SELECT driverId      FROM drivers      WHERE nationality = 'Italian' );",
            "5": "SELECT COUNT(*) FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T2.nationality = 'Italian' AND T1.time IS NULL",
            "1": "SELECT COUNT(T1.driverId) FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T2.nationality = 'Italian' AND T1.time IS NULL;",
            "2": "SELECT COUNT(*) FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T2.nationality = 'Italian' AND T1.time IS NULL",
            "6": "SELECT count(*) FROM drivers AS T1 JOIN results AS T2 ON T1.driverid  =  T2.driverid WHERE T1.nationality  =  'Italian' AND T2.time IS NULL",
            "3": "SELECT   COUNT(T1.driverId) FROM drivers AS T1 INNER JOIN results AS T2   ON T1.driverId = T2.driverId WHERE   T1.nationality = 'Italian' AND T2.time IS NULL;"
        }
    },
    {
        "question_id": 958,
        "database": "formula_1",
        "evidence": "",
        "question": "Which driver has the fastest lap time? Please give their forenames and surnames.",
        "schema_used": {
            "drivers": [
                "forename",
                "surname",
                "driverid"
            ],
            "results": [
                "fastestlaptime",
                "driverid"
            ]
        },
        "gold": "SELECT T2.forename, T2.surname, T1.fastestLapTime FROM results AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId WHERE T1.fastestLapTime IS NOT NULL ORDER BY T1.fastestLapTime ASC LIMIT 1",
        "candidates": {
            "2": "SELECT forename,  surname  FROM  drivers  INNER JOIN results  ON drivers.driverId = results.driverId  ORDER BY  fastestLapTime  LIMIT 1",
            "1": "SELECT T2.forename, T2.surname  FROM results AS T1  INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId  ORDER BY T1.fastestLapTime ASC  LIMIT 1;",
            "5": "SELECT forename, surname FROM drivers WHERE driverId = ( SELECT driverId FROM results ORDER BY fastestLapTime LIMIT 1 )",
            "6": "SELECT T2.forename ,  T2.surname FROM results AS T1 JOIN drivers AS T2 ON T1.driverId = T2.driverId ORDER BY T1.fastestLapTime ASC LIMIT 1",
            "3": "SELECT   T2.forename,   T2.surname FROM results AS T1 INNER JOIN drivers AS T2   ON T1.driverId = T2.driverId ORDER BY   T1.fastestLapTime LIMIT 1;",
            "4": "SELECT T2.forename, T2.surname  FROM results AS T1  INNER JOIN drivers AS T2  ON T1.driverId = T2.driverId  ORDER BY CAST(T1.fastestLapTime AS REAL) ASC  LIMIT 1;"
        }
    },
    {
        "question_id": 959,
        "database": "formula_1",
        "evidence": "in 2009 refers to year = 2009; Only the time of the champion shows in the format of \"hour: minutes: seconds.millionsecond\"",
        "question": "What is the fastest lap number of the champion in 2009?",
        "schema_used": {
            "results": [
                "fastestlap",
                "raceid",
                "time"
            ],
            "races": [
                "raceid",
                "year"
            ]
        },
        "gold": "SELECT T1.fastestLap FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId WHERE T2.year = 2009 AND T1.time LIKE '_:%:__.___'",
        "candidates": {
            "5": "SELECT T1.fastestLap FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T2.year = 2009 AND T1.position = 1",
            "6": "SELECT T3.fastestLap FROM races AS T1 INNER JOIN results AS T3 ON T1.raceid = T3.raceid WHERE T3.position  =  1 AND T1.year  =  2009",
            "2": "SELECT T1.fastestLap FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T2.year = 2009 AND T1.position = 1",
            "4": "SELECT T3.fastestLap  FROM races AS T1  INNER JOIN driverStandings AS T2 ON T1.raceId = T2.raceId  INNER JOIN results AS T3 ON T1.raceId = T3.raceId AND T2.driverId = T3.driverId  WHERE T1.year = 2009 AND T2.position = 1;",
            "3": "SELECT   T3.fastestLap FROM driverStandings AS T1 INNER JOIN races AS T2   ON T1.raceId = T2.raceId INNER JOIN results AS T3   ON T1.driverId = T3.driverId WHERE   T2.year = 2009 AND T1.position = 1;",
            "1": "SELECT r.fastestLap FROM results r JOIN (     SELECT raceId, driverId     FROM driverStandings     WHERE position = 1 AND raceId IN (         SELECT raceId         FROM races         WHERE year = 2009     ) ) ds ON r.raceId = ds.raceId AND r.driverId = ds.driverId WHERE r.fastestLap IS NOT NULL;"
        }
    },
    {
        "question_id": 960,
        "database": "formula_1",
        "evidence": "Spanish Grand Prix is the name of race refers to name = 'Spanish Grand Prix'; average fastest lap speed refers to avg(fastestLapSpeed);",
        "question": "What is the average of fastest lap speed in the 2009 Spanish Grand Prix race?",
        "schema_used": {
            "results": [
                "fastestlapspeed",
                "raceid"
            ],
            "races": [
                "raceid",
                "year",
                "name"
            ]
        },
        "gold": "SELECT AVG(T1.fastestLapSpeed) FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId WHERE T2.year = 2009 AND T2.name = 'Spanish Grand Prix'",
        "candidates": {
            "4": "SELECT AVG(CAST(SUBSTR(results.fastestLapSpeed, 1, INSTR(results.fastestLapSpeed, '.') - 1) AS REAL))  FROM results  INNER JOIN races ON results.raceId = races.raceId  WHERE races.year = 2009 AND races.name = 'Spanish Grand Prix';",
            "1": "SELECT AVG(T2.fastestLapSpeed)  FROM races AS T1  INNER JOIN results AS T2 ON T1.raceId = T2.raceId  WHERE T1.name = 'Spanish Grand Prix' AND T1.year = 2009;",
            "5": "SELECT AVG(CAST(T1.fastestLapSpeed AS REAL)) FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T2.year = 2009 AND T2.name = 'Spanish Grand Prix'",
            "2": "SELECT AVG(T1.fastestLapSpeed)  FROM results AS T1  INNER JOIN races AS T2  ON T1.raceId = T2.raceId  WHERE T2.year = 2009 AND T2.name = 'Spanish Grand Prix'",
            "6": "SELECT avg(fastestLapSpeed) FROM results AS T1 JOIN races AS T2 ON T1.raceid  =  T2.raceid WHERE T2.year  =  2009 AND T2.name  =  'Spanish Grand Prix'",
            "3": "SELECT AVG(T2.fastestLapSpeed) FROM races AS T1 INNER JOIN results AS T2 ON T1.raceId = T2.raceId WHERE T1.year = 2009 AND T1.name = 'Spanish Grand Prix'"
        }
    },
    {
        "question_id": 961,
        "database": "formula_1",
        "evidence": "shortest actual finishing time refers to Min(milliseconds) except milliseconds = null;",
        "question": "Which race has the shortest actual finishing time? Please give the name and year.",
        "schema_used": {
            "races": [
                "name",
                "year",
                "raceid"
            ],
            "results": [
                "raceid",
                "milliseconds"
            ]
        },
        "gold": "SELECT T1.name, T1.year FROM races AS T1 INNER JOIN results AS T2 on T1.raceId = T2.raceId WHERE T2.milliseconds IS NOT NULL ORDER BY T2.milliseconds LIMIT 1",
        "candidates": {
            "4": "SELECT T1.name, T1.year  FROM races AS T1  INNER JOIN results AS T2 ON T1.raceId = T2.raceId  WHERE T2.milliseconds IS NOT NULL  ORDER BY T2.milliseconds ASC  LIMIT 1;",
            "1": "SELECT T1.name, T1.year  FROM races AS T1  INNER JOIN results AS T2 ON T1.raceId = T2.raceId  WHERE T2.milliseconds IS NOT NULL  ORDER BY T2.milliseconds ASC  LIMIT 1;",
            "5": "SELECT T1.name,  T1.year  FROM races AS T1 INNER JOIN results AS T2 ON T1.raceId = T2.raceId  WHERE T2.milliseconds IS NOT NULL  ORDER BY T2.milliseconds  LIMIT 1",
            "2": "SELECT T1.name,  T1.year  FROM races AS T1  INNER JOIN results AS T2  ON T1.raceId = T2.raceId  WHERE T2.milliseconds IS NOT NULL  ORDER BY T2.milliseconds  LIMIT 1",
            "6": "SELECT T1.name ,  T1.year FROM races AS T1 JOIN results AS T2 ON T1.raceid  =  T2.raceid WHERE T2.milliseconds IS NOT NULL ORDER BY T2.milliseconds ASC LIMIT 1",
            "3": "SELECT T1.name ,  T1.year FROM races AS T1 JOIN results AS T2 ON T1.raceid  =  T2.raceid WHERE T2.milliseconds IS NOT NULL ORDER BY T2.milliseconds ASC LIMIT 1"
        }
    },
    {
        "question_id": 962,
        "database": "formula_1",
        "evidence": "born before 1985 refers to year(dob)<1985; in 2000 to 2005 refers to year between 2000 and 2005; percentage = Divide(COUNT(driverId where year (dob) <1985 and laps >50),COUNT(DriverID where year between 2000 and 2005) *100;",
        "question": "From 2000 to 2005, what percentage of drivers who were born before 1985 and the lap numbers were over 50?",
        "schema_used": {
            "results": [
                "raceid",
                "driverid",
                "laps"
            ],
            "races": [
                "raceid",
                "year"
            ],
            "drivers": [
                "driverid",
                "dob"
            ]
        },
        "gold": "SELECT CAST(SUM(IIF(STRFTIME('%Y', T3.dob) < '1985' AND T1.laps > 50, 1, 0)) AS REAL) * 100 / COUNT(*) FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId INNER JOIN drivers AS T3 on T1.driverId = T3.driverId WHERE T2.year BETWEEN 2000 AND 2005",
        "candidates": {
            "4": "SELECT      CAST(SUM(CASE WHEN YEAR(T3.dob) < 1985 AND T1.lap > 50 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.driverId)  FROM      lapTimes AS T1  INNER JOIN      races AS T2 ON T1.raceId = T2.raceId  INNER JOIN      drivers AS T3 ON T1.driverId = T3.driverId  WHERE      T2.year BETWEEN 2000 AND 2005;",
            "5": "SELECT CAST(SUM(CASE WHEN STRFTIME('%Y', T1.dob) < '1985' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM drivers AS T1 INNER JOIN lapTimes AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T3.year BETWEEN 2000 AND 2005 AND T2.lap > 50",
            "1": "SELECT      CAST(SUM(CASE WHEN strftime('%Y', T3.dob) < 1985 AND T1.lap > 50 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.driverId) FROM      lapTimes AS T1  INNER JOIN      races AS T2 ON T1.raceId = T2.raceId  INNER JOIN      drivers AS T3 ON T1.driverId = T3.driverId WHERE      T2.year BETWEEN 2000 AND 2005;",
            "2": "SELECT CAST(SUM(CASE WHEN SUBSTR(T3.dob, 1, 4) < '1985' AND T2.lap > 50 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(*) FROM races AS T1 INNER JOIN lapTimes AS T2 ON T1.raceId = T2.raceId INNER JOIN drivers AS T3 ON T2.driverId = T3.driverId WHERE T1.year BETWEEN 2000 AND 2005",
            "6": "SELECT CAST(SUM(CASE WHEN T3.year BETWEEN 2000 AND 2005 AND T2.lap > 50 THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.driverId) FROM drivers AS T1 JOIN lapTimes AS T2 ON T1.driverId = T2.driverId JOIN races AS T3 ON T2.raceId = T3.raceId WHERE STRFTIME('%Y', T1.dob) < '1985'",
            "3": "SELECT CAST(SUM(CASE WHEN T3.dob < '1985-01-01' THEN 1 ELSE 0 END) AS REAL) * 100 / COUNT(T1.driverId) FROM lapTimes AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId INNER JOIN drivers AS T3 ON T1.driverId = T3.driverId WHERE T2.year BETWEEN 2000 AND 2005 AND T1.lap > 50"
        }
    },
    {
        "question_id": 963,
        "database": "formula_1",
        "evidence": "lap time less than 02:00.00 refers to seconds < 120;",
        "question": "How many French drivers who obtain the laptime less than 02:00.00?",
        "schema_used": {
            "drivers": [
                "driverid",
                "nationality"
            ],
            "laptimes": [
                "driverid",
                "time"
            ]
        },
        "gold": "SELECT COUNT(T1.driverId) FROM drivers AS T1 INNER JOIN lapTimes AS T2 on T1.driverId = T2.driverId WHERE T1.nationality = 'French' AND (CAST(SUBSTR(T2.time, 1, 2) AS INTEGER) * 60 + CAST(SUBSTR(T2.time, 4, 2) AS INTEGER) + CAST(SUBSTR(T2.time, 7, 2) AS REAL) / 1000) < 120",
        "candidates": {
            "4": "SELECT COUNT(*)  FROM lapTimes AS T1  INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId  WHERE T2.nationality = 'French' AND T1.milliseconds < 120000;",
            "1": "SELECT COUNT(*) FROM lapTimes AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T2.nationality = 'French' AND T1.milliseconds < 120000;",
            "6": "SELECT COUNT(T1.driverid) FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE T1.nationality = 'French' AND T2.milliseconds < 120000",
            "5": "SELECT COUNT(*) FROM lapTimes AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T2.nationality = 'French' AND T1.milliseconds < 120000",
            "2": "SELECT COUNT(T1.driverId) FROM lapTimes AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T2.nationality = 'French' AND T1.milliseconds < 120000",
            "3": "SELECT COUNT(T2.driverId) FROM lapTimes AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T2.nationality = 'French' AND T1.milliseconds < 120000"
        }
    },
    {
        "question_id": 964,
        "database": "formula_1",
        "evidence": "nationality = 'America'",
        "question": "List out the code for drivers who have nationality in America.",
        "schema_used": {
            "drivers": [
                "code",
                "nationality"
            ]
        },
        "gold": "SELECT code FROM drivers WHERE Nationality = 'American'",
        "candidates": {
            "4": "SELECT code FROM drivers WHERE nationality = 'American'",
            "1": "SELECT code FROM drivers WHERE nationality = 'American';",
            "5": "SELECT code FROM drivers WHERE nationality = 'American'",
            "2": "SELECT code FROM drivers WHERE nationality = 'American'",
            "6": "SELECT code FROM drivers WHERE nationality = \"American\"",
            "3": "SELECT   code FROM drivers WHERE   nationality = 'American';"
        }
    },
    {
        "question_id": 965,
        "database": "formula_1",
        "evidence": "",
        "question": "List out the Id number of races which were hold in 2009.",
        "schema_used": {
            "races": [
                "raceid",
                "year"
            ]
        },
        "gold": "SELECT raceId FROM races WHERE year = 2009",
        "candidates": {
            "4": "SELECT raceId FROM races WHERE year = 2009",
            "2": "SELECT raceId FROM races WHERE year = 2009",
            "1": "SELECT raceId FROM races WHERE year = 2009;",
            "5": "SELECT raceId FROM races WHERE year = 2009",
            "6": "SELECT raceId FROM races WHERE YEAR  =  2009",
            "3": "SELECT   raceId FROM races WHERE   year = 2009;"
        }
    },
    {
        "question_id": 966,
        "database": "formula_1",
        "evidence": "",
        "question": "How many driver participated in race ID number 18?",
        "schema_used": {
            "driverstandings": [
                "driverid",
                "raceid"
            ]
        },
        "gold": "SELECT COUNT(driverId) FROM driverStandings WHERE raceId = 18",
        "candidates": {
            "4": "SELECT COUNT(DISTINCT driverId) FROM results WHERE raceId = 18",
            "1": "SELECT COUNT(DISTINCT driverId)  FROM results  WHERE raceId = 18;",
            "2": "SELECT COUNT(DISTINCT driverId)  FROM results  WHERE raceId = 18",
            "5": "SELECT COUNT(DISTINCT driverId) FROM results WHERE raceId = 18",
            "6": "SELECT COUNT(DISTINCT driverId) FROM results WHERE raceId = 18",
            "3": "SELECT   COUNT(driverId) FROM results WHERE   raceId = 18;"
        }
    },
    {
        "question_id": 967,
        "database": "formula_1",
        "evidence": "youngest driver refers to Max (year(dob)); Netherlandic and Dutch refer to the same country",
        "question": "State code numbers of top 3 yougest drivers. How many Netherlandic drivers among them?",
        "schema_used": {
            "drivers": [
                "nationality",
                "dob"
            ]
        },
        "gold": "SELECT COUNT(*) FROM ( SELECT T1.nationality FROM drivers AS T1 ORDER BY JULIANDAY(T1.dob) DESC LIMIT 3) AS T3 WHERE T3.nationality = 'Dutch'",
        "candidates": {
            "4": "SELECT COUNT(*)  FROM (     SELECT code      FROM drivers      ORDER BY YEAR(dob) DESC      LIMIT 3 ) AS youngest_drivers WHERE nationality = 'Dutch';",
            "1": "SELECT code, nationality  FROM drivers  ORDER BY dob DESC  LIMIT 3;",
            "5": "SELECT COUNT(CASE WHEN nationality = 'Dutch' THEN 1 END), COUNT(*) FROM (SELECT code FROM drivers ORDER BY dob DESC LIMIT 3)",
            "2": "SELECT COUNT(CASE WHEN nationality = 'Dutch' THEN 1 END) FROM ( SELECT code FROM drivers ORDER BY dob DESC LIMIT 3 )",
            "6": "SELECT code FROM drivers ORDER BY dob DESC LIMIT 3",
            "3": "SELECT code FROM drivers ORDER BY dob DESC LIMIT 3"
        }
    },
    {
        "question_id": 968,
        "database": "formula_1",
        "evidence": "reference name refers to driverRef;",
        "question": "What is reference name of Robert Kubica?",
        "schema_used": {
            "drivers": [
                "driverref",
                "forename",
                "surname"
            ]
        },
        "gold": "SELECT driverRef FROM drivers WHERE forename = 'Robert' AND surname = 'Kubica'",
        "candidates": {
            "4": "SELECT driverRef FROM drivers WHERE forename = 'Robert' AND surname = 'Kubica'",
            "1": "SELECT driverRef FROM drivers WHERE forename = 'Robert' AND surname = 'Kubica';",
            "5": "SELECT driverRef FROM drivers WHERE forename = 'Robert' AND surname = 'Kubica'",
            "2": "SELECT driverRef FROM drivers WHERE forename = 'Robert' AND surname = 'Kubica'",
            "6": "SELECT driverRef FROM drivers WHERE forename = 'Robert' AND surname = 'Kubica'",
            "3": "SELECT   driverRef FROM drivers WHERE   forename = 'Robert' AND surname = 'Kubica';"
        }
    },
    {
        "question_id": 969,
        "database": "formula_1",
        "evidence": "born in 1980 refers to year(dob) = 1980;",
        "question": "How many British drivers who were born in 1980?",
        "schema_used": {
            "drivers": [
                "driverid",
                "nationality",
                "dob"
            ]
        },
        "gold": "SELECT COUNT(driverId) FROM drivers WHERE nationality = 'British' AND STRFTIME('%Y', dob) = '1980'",
        "candidates": {
            "4": "SELECT COUNT(*)  FROM drivers  WHERE nationality = 'British' AND strftime('%Y', dob) = '1980';",
            "2": "SELECT COUNT(*) FROM drivers WHERE nationality = 'British' AND STRFTIME('%Y', dob) = '1980'",
            "1": "SELECT COUNT(*)  FROM drivers  WHERE nationality = 'British' AND strftime('%Y', dob) = '1980';",
            "5": "SELECT COUNT(*) FROM drivers WHERE nationality = 'British' AND STRFTIME('%Y', dob) = '1980'",
            "6": "SELECT count(*) FROM drivers WHERE nationality  =  \"British\" AND STRFTIME('%Y', dob)  =  '1980'",
            "3": "SELECT   COUNT(driverId) FROM drivers WHERE   nationality = 'British' AND STRFTIME('%Y', dob) = '1980';"
        }
    },
    {
        "question_id": 970,
        "database": "formula_1",
        "evidence": "born from 1980-1990 refers to year(dob) between 1980 and 1990; earliest lap time refers to Min(time);",
        "question": "List out top 3 German drivers who were born from 1980-1990 and have the earliest lap time.",
        "schema_used": {
            "drivers": [
                "driverid",
                "nationality",
                "dob"
            ],
            "pitstops": [
                "driverid",
                "time"
            ]
        },
        "gold": "SELECT T2.driverId FROM pitStops AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId WHERE T2.nationality = 'German' AND STRFTIME('%Y', T2.dob) BETWEEN '1980' AND '1990' ORDER BY T1.time LIMIT 3",
        "candidates": {
            "4": "SELECT d.forename, d.surname  FROM drivers d  JOIN lapTimes lt ON d.driverId = lt.driverId  WHERE d.nationality = 'German' AND STRFTIME('%Y', d.dob) BETWEEN '1980' AND '1990' GROUP BY d.driverId  ORDER BY MIN(strftime('%S', lt.time)) + (MIN(strftime('%M', lt.time)) * 60) ASC  LIMIT 3;",
            "5": "SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN lapTimes AS T2 ON T1.driverId = T2.driverId WHERE T1.nationality = 'German' AND STRFTIME('%Y', T1.dob) BETWEEN '1980' AND '1990' GROUP BY T1.driverId ORDER BY MIN(T2.time) LIMIT 3",
            "1": "SELECT d.forename, d.surname, MIN(l.time) AS earliest_lap_time FROM drivers d JOIN lapTimes l ON d.driverId = l.driverId WHERE d.nationality = 'German'    AND strftime('%Y', d.dob) BETWEEN '1980' AND '1990' GROUP BY d.driverId ORDER BY earliest_lap_time ASC LIMIT 3;",
            "2": "SELECT T1.forename,  T1.surname,  MIN(T2.time)  FROM drivers AS T1  INNER JOIN lapTimes AS T2  ON T1.driverId = T2.driverId  WHERE T1.nationality = 'German'  AND STRFTIME('%Y', T1.dob) BETWEEN '1980' AND '1990'  GROUP BY T1.driverId  ORDER BY MIN(T2.time)  LIMIT 3",
            "6": "SELECT forename ,  surname FROM drivers WHERE nationality  =  'German' AND YEAR(dob) BETWEEN 1980 AND 1990 INTERSECT SELECT T1.forename ,  T1.surname FROM drivers AS T1 JOIN lapTimes AS T2 ON T1.driverId  =  T2.driverId ORDER BY T2.time ASC LIMIT 3",
            "3": "SELECT   T1.forename,   T1.surname FROM drivers AS T1 INNER JOIN lapTimes AS T2   ON T1.driverId = T2.driverId WHERE   T1.nationality = 'German' AND STRFTIME('%Y', T1.dob) BETWEEN '1980' AND '1990' ORDER BY   T2.time LIMIT 3;"
        }
    },
    {
        "question_id": 971,
        "database": "formula_1",
        "evidence": "oldest refers to MIN(year(dob)); reference names appear in drverRef.",
        "question": "Please state the reference name of the oldest German driver.",
        "schema_used": {
            "drivers": [
                "driverref",
                "nationality",
                "dob"
            ]
        },
        "gold": "SELECT driverRef FROM drivers WHERE nationality = 'German' ORDER BY JULIANDAY(dob) ASC LIMIT 1",
        "candidates": {
            "4": "SELECT driverRef  FROM drivers  WHERE nationality = 'German'  ORDER BY dob ASC  LIMIT 1;",
            "5": "SELECT driverRef FROM drivers WHERE nationality = 'German' ORDER BY dob LIMIT 1",
            "2": "SELECT driverRef FROM drivers WHERE nationality = 'German' ORDER BY dob LIMIT 1",
            "1": "SELECT driverRef  FROM drivers  WHERE nationality = 'German'  ORDER BY dob ASC  LIMIT 1;",
            "6": "SELECT driverRef FROM drivers WHERE nationality  =  \"German\" ORDER BY dob LIMIT 1",
            "3": "SELECT   driverRef FROM drivers WHERE   nationality = 'German' ORDER BY   dob LIMIT 1;"
        }
    },
    {
        "question_id": 972,
        "database": "formula_1",
        "evidence": "born in 1971 refers to year(dob) = 1971; has the fastest lap time refers to fastestLapTime has values",
        "question": "Which drivers who were born in 1971 and has the fastest lap time on the race? Give id and code of these drivers.",
        "schema_used": {
            "drivers": [
                "driverid",
                "code",
                "dob"
            ],
            "results": [
                "driverid",
                "fastestlaptime"
            ]
        },
        "gold": "SELECT T2.driverId, T2.code FROM results AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId WHERE STRFTIME('%Y', T2.dob) = '1971' AND T1.fastestLapTime IS NOT NULL",
        "candidates": {
            "4": "SELECT T1.driverId, T1.code  FROM drivers AS T1  INNER JOIN results AS T2 ON T1.driverId = T2.driverId  WHERE STRFTIME('%Y', T1.dob) = '1971'  AND T2.fastestLapTime IS NOT NULL;",
            "1": "SELECT T1.driverId, T1.code  FROM drivers AS T1  INNER JOIN results AS T2 ON T1.driverId = T2.driverId  WHERE STRFTIME('%Y', T1.dob) = '1971'  AND T2.fastestLapTime IS NOT NULL;",
            "5": "SELECT T1.driverId,  T1.code  FROM  drivers AS T1  INNER JOIN results AS T2  ON T1.driverId = T2.driverId  WHERE  STRFTIME('%Y', T1.dob) = '1971'  AND T2.fastestLapTime IS NOT NULL",
            "2": "SELECT T1.driverId, T2.code FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE STRFTIME('%Y', T2.dob) = '1971' AND T1.fastestLapTime IS NOT NULL",
            "6": "SELECT driverId ,  code FROM drivers WHERE strftime('%Y', dob)  =  '1971' INTERSECT SELECT driverId ,  fastestLapTime FROM results WHERE NOT fastestLapTime  =  \"\\\\N\"",
            "3": "SELECT T1.driverId, T1.code FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId WHERE STRFTIME('%Y', T1.dob) = '1971' AND T2.fastestLapTime IS NOT NULL"
        }
    },
    {
        "question_id": 973,
        "database": "formula_1",
        "evidence": "born before 1982 refers to year(dob) < 1982; latest lap time refers to Max(time);",
        "question": "List out top 10 Spanish drivers who were born before 1982 and have the latest lap time.",
        "schema_used": {
            "drivers": [
                "driverid",
                "nationality",
                "dob"
            ],
            "pitstops": [
                "driverid",
                "time"
            ]
        },
        "gold": "SELECT T2.driverId FROM pitStops AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId WHERE T2.nationality = 'Spanish' AND STRFTIME('%Y', T2.dob) < '1982' ORDER BY T1.time DESC LIMIT 10",
        "candidates": {
            "4": "SELECT d.forename, d.surname, MAX(l.time)  FROM drivers d  JOIN lapTimes l ON d.driverId = l.driverId  WHERE d.nationality = 'Spanish' AND YEAR(d.dob) < 1982  GROUP BY d.driverId  ORDER BY MAX(l.time) DESC  LIMIT 10;",
            "1": "SELECT d.forename, d.surname, MAX(l.time)  FROM drivers d  JOIN lapTimes l ON d.driverId = l.driverId  WHERE d.nationality = 'Spanish' AND YEAR(d.dob) < 1982  GROUP BY d.driverId  ORDER BY MAX(l.time) DESC  LIMIT 10;",
            "5": "SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN lapTimes AS T2 ON T1.driverId = T2.driverId WHERE T1.nationality = 'Spanish' AND STRFTIME('%Y', T1.dob) < '1982' GROUP BY T1.driverId ORDER BY MAX(T2.time) DESC LIMIT 10",
            "2": "SELECT T1.forename,  T1.surname  FROM drivers AS T1  INNER JOIN lapTimes AS T2 ON T1.driverId = T2.driverId  WHERE T1.nationality = 'Spanish' AND STRFTIME('%Y', T1.dob) < '1982'  GROUP BY T1.driverId  ORDER BY MAX(T2.time) DESC  LIMIT 10",
            "6": "SELECT forename ,  surname FROM drivers WHERE nationality  =  'Spanish' AND strftime('%Y', dob)  <  '1982' ORDER BY (SELECT max(time) FROM lapTimes WHERE driverid  =  drivers.driverid) DESC LIMIT 10",
            "3": "SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN lapTimes AS T2 ON T1.driverId = T2.driverId WHERE T1.nationality = 'Spanish' AND STRFTIME('%Y', T1.dob) < '1982' ORDER BY T2.time DESC LIMIT 10"
        }
    },
    {
        "question_id": 974,
        "database": "formula_1",
        "evidence": "'has the fastest lap time?' refers to fastestLapTime has values",
        "question": "State the racing year which has the fastest lap time?",
        "schema_used": {
            "races": [
                "year",
                "raceid"
            ],
            "results": [
                "raceid",
                "fastestlaptime"
            ]
        },
        "gold": "SELECT T2.year FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId WHERE T1.fastestLapTime IS NOT NULL",
        "candidates": {
            "4": "SELECT T1.year  FROM races AS T1  INNER JOIN results AS T2 ON T1.raceId = T2.raceId  ORDER BY T2.fastestLapTime ASC  LIMIT 1;",
            "1": "SELECT T1.year  FROM races AS T1  INNER JOIN results AS T2 ON T1.raceId = T2.raceId  ORDER BY T2.fastestLapTime ASC  LIMIT 1;",
            "5": "SELECT year FROM races INNER JOIN results ON races.raceId = results.raceId ORDER BY fastestLapTime LIMIT 1",
            "2": "SELECT T1.year FROM races AS T1 INNER JOIN results AS T2 ON T1.raceId = T2.raceId ORDER BY T2.fastestLapTime LIMIT 1",
            "6": "SELECT T1.year FROM races AS T1 JOIN results AS T2 ON T1.raceId = T2.raceId WHERE T2.fastestLapTime IS NOT NULL ORDER BY T2.fastestLapTime ASC LIMIT 1",
            "3": "SELECT T1.year FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T2.fastestLapTime IS NOT NULL ORDER BY T2.fastestLapTime LIMIT 1"
        }
    },
    {
        "question_id": 975,
        "database": "formula_1",
        "evidence": "lowest speed of lap time refers to Max(time);",
        "question": "Which year has the lowest speed of lap time?",
        "schema_used": {
            "races": [
                "year",
                "raceid"
            ],
            "laptimes": [
                "raceid",
                "time"
            ]
        },
        "gold": "SELECT T2.year FROM lapTimes AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId ORDER BY T1.time DESC LIMIT 1",
        "candidates": {
            "4": "SELECT year FROM races WHERE raceId = (SELECT raceId FROM results ORDER BY time DESC LIMIT 1)",
            "2": "SELECT year  FROM races  ORDER BY year ASC  LIMIT 1",
            "5": "SELECT year FROM races INNER JOIN results ON races.raceId = results.raceId GROUP BY year ORDER BY MAX(time) LIMIT 1",
            "6": "SELECT T1.year FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid ORDER BY T2.time DESC LIMIT 1",
            "3": "SELECT   T1.year FROM races AS T1 INNER JOIN results AS T2   ON T1.raceId = T2.raceId ORDER BY   T2.time DESC LIMIT 1;",
            "1": "SELECT T1.year  FROM races AS T1  INNER JOIN results AS T2 ON T1.raceId = T2.raceId  ORDER BY T2.time DESC  LIMIT 1;"
        }
    },
    {
        "question_id": 976,
        "database": "formula_1",
        "evidence": "fastest time refers to Min(time);",
        "question": "List the driver's ID of the top five driver, by descending order, the fastest time during the first lap of the race.",
        "schema_used": {
            "laptimes": [
                "driverid",
                "lap",
                "time"
            ]
        },
        "gold": "SELECT driverId FROM lapTimes WHERE lap = 1 ORDER BY time LIMIT 5",
        "candidates": {
            "5": "SELECT driverId FROM lapTimes WHERE lap = 1 ORDER BY time LIMIT 5",
            "4": "SELECT driverId FROM lapTimes WHERE lap = 1 GROUP BY driverId ORDER BY MIN(time) ASC LIMIT 5;",
            "1": "SELECT driverId FROM lapTimes WHERE lap = 1 GROUP BY driverId ORDER BY MIN(time) ASC LIMIT 5;",
            "2": "SELECT driverId FROM lapTimes WHERE lap = 1 ORDER BY time LIMIT 5",
            "6": "SELECT driverId FROM lapTimes WHERE lap  =  1 ORDER BY time ASC LIMIT 5",
            "3": "SELECT   driverId FROM lapTimes WHERE   lap = 1 ORDER BY   time LIMIT 5;"
        }
    },
    {
        "question_id": 977,
        "database": "formula_1",
        "evidence": "disqualified refers to statusID = 2, finisher refers to time! = null; race no. refers to raceId; raceId > 50 and raceId < 100;",
        "question": "From race no. 50 to 100, how many finishers have been disqualified?",
        "schema_used": {
            "results": [
                "raceid",
                "statusid",
                "time"
            ]
        },
        "gold": "SELECT SUM(IIF(time IS NOT NULL, 1, 0)) FROM results WHERE statusId = 2 AND raceID < 100 AND raceId > 50",
        "candidates": {
            "4": "SELECT COUNT(*)  FROM results  WHERE raceId BETWEEN 50 AND 100  AND statusId = 2  AND time IS NOT NULL;",
            "1": "SELECT COUNT(*)  FROM results AS T1  INNER JOIN status AS T2 ON T1.statusId = T2.statusId  WHERE T1.raceId BETWEEN 50 AND 100  AND T1.time IS NOT NULL  AND T2.statusId = 2;",
            "5": "SELECT COUNT(*) FROM results AS T1 INNER JOIN status AS T2 ON T1.statusId = T2.statusId WHERE T2.statusId = 2 AND T1.raceId BETWEEN 50 AND 100 AND T1.time <> \"\"",
            "2": "SELECT COUNT(*) FROM results INNER JOIN status ON results.statusId = status.statusId WHERE status.statusId = 2 AND results.time IS NOT NULL AND results.raceId BETWEEN 50 AND 100",
            "6": "SELECT COUNT(*) FROM results WHERE statusId = 2 AND raceId >= 50 AND raceId <= 100",
            "3": "SELECT COUNT(T1.statusId) FROM results AS T1 INNER JOIN status AS T2 ON T1.statusId = T2.statusId WHERE T1.raceId > 50 AND T1.raceId < 100 AND T2.statusId = 4"
        }
    },
    {
        "question_id": 978,
        "database": "formula_1",
        "evidence": "location coordinates refers to (lat,lng); Austria refers to country = 'Austria';",
        "question": "How many times the circuits were held in Austria? Please give their location and coordinates.",
        "schema_used": {
            "circuits": [
                "location",
                "lat",
                "lng",
                "country"
            ]
        },
        "gold": "SELECT DISTINCT location, lat, lng FROM circuits WHERE country = 'Austria'",
        "candidates": {
            "4": "SELECT lat, lng FROM circuits WHERE country = 'Austria'",
            "1": "SELECT lat, lng, country FROM circuits WHERE country = 'Austria';",
            "5": "SELECT COUNT(*), lat, lng FROM circuits WHERE country = 'Austria' GROUP BY lat, lng",
            "2": "SELECT COUNT(T1.country),  T1.lat,  T1.lng  FROM circuits AS T1  WHERE  T1.country = 'Austria'  GROUP BY  T1.country",
            "6": "SELECT COUNT(*), lat, lng FROM circuits WHERE country = 'Austria'",
            "3": "SELECT COUNT(*), location ,  lat ,  lng FROM circuits WHERE country  =  'Austria'"
        }
    },
    {
        "question_id": 979,
        "database": "formula_1",
        "evidence": "finisher refers to time is not null;",
        "question": "What race number has the most finishers?",
        "schema_used": {
            "results": [
                "raceid",
                "time"
            ]
        },
        "gold": "SELECT raceId FROM results GROUP BY raceId ORDER BY COUNT(time IS NOT NULL) DESC LIMIT 1",
        "candidates": {
            "4": "SELECT number  FROM results  WHERE time IS NOT NULL  GROUP BY number  ORDER BY COUNT(*) DESC  LIMIT 1;",
            "5": "SELECT number FROM results WHERE time IS NOT NULL GROUP BY number ORDER BY COUNT(*) DESC LIMIT 1",
            "1": "SELECT number  FROM results  WHERE time IS NOT NULL  GROUP BY number  ORDER BY COUNT(*) DESC  LIMIT 1;",
            "2": "SELECT number FROM results GROUP BY number ORDER BY COUNT(time) DESC LIMIT 1",
            "6": "SELECT number FROM results WHERE time IS NOT NULL GROUP BY number ORDER BY COUNT(time) DESC LIMIT 1",
            "3": "SELECT number FROM results WHERE   TIME IS NOT NULL GROUP BY   number ORDER BY   COUNT(number) DESC LIMIT 1;"
        }
    },
    {
        "question_id": 980,
        "database": "formula_1",
        "evidence": "passed the second qualifying lap refers to q2 is not null; birthday refers to dob; reference name of drivers refers to driverRef; race no. refers to raceId;",
        "question": "List the reference name of the drivers who passed the second qualifying lap during race no. 23. Indicate their nationality and birthday.",
        "schema_used": {
            "drivers": [
                "driverref",
                "nationality",
                "dob",
                "driverid"
            ],
            "qualifying": [
                "driverid",
                "raceid",
                "q2"
            ]
        },
        "gold": "SELECT T2.driverRef, T2.nationality, T2.dob FROM qualifying AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId WHERE T1.raceId = 23 AND T1.q2 IS NOT NULL",
        "candidates": {
            "4": "SELECT T1.driverRef, T1.nationality, T1.dob  FROM drivers AS T1  INNER JOIN qualifying AS T2 ON T1.driverId = T2.driverId  WHERE T2.raceId = 23 AND T2.q2 IS NOT NULL;",
            "1": "SELECT T1.driverRef, T1.nationality, T1.dob  FROM drivers AS T1  INNER JOIN qualifying AS T2 ON T1.driverId = T2.driverId  WHERE T2.raceId = 23 AND T2.q2 IS NOT NULL;",
            "5": "SELECT T1.driverRef,  T1.nationality,  T1.dob  FROM  drivers AS T1  INNER JOIN qualifying AS T2  ON T1.driverId = T2.driverId  WHERE  T2.raceId = 23 AND T2.q2 IS NOT NULL",
            "2": "SELECT T1.driverRef,  T1.nationality,  T1.dob  FROM drivers AS T1  INNER JOIN qualifying AS T2  ON T1.driverId = T2.driverId  WHERE  T2.raceId = 23 AND T2.q2 IS NOT NULL;",
            "6": "SELECT T1.driverRef ,  T1.nationality ,  T1.dob FROM drivers AS T1 JOIN qualifying AS T2 ON T1.driverid  =  T2.driverid WHERE T2.raceid  =  23 AND T2.q2 IS NOT NULL",
            "3": "SELECT   T1.driverRef,   T1.nationality,   T1.dob FROM drivers AS T1 INNER JOIN qualifying AS T2   ON T1.driverId = T2.driverId WHERE   NOT T2.q2 IS NULL AND T2.raceId = 23;"
        }
    },
    {
        "question_id": 981,
        "database": "formula_1",
        "evidence": "date of birth refers to drivers.dob; The larger the birthday value, the younger the person is, and vice versa; first qualifying race refers to MIN(races.date);",
        "question": "On what year did the youngest driver had his first qualifying race? Also state the name, date and time of the race.",
        "schema_used": {
            "drivers": [
                "driverid",
                "dob"
            ],
            "races": [
                "year",
                "name",
                "date",
                "time",
                "raceid"
            ],
            "qualifying": [
                "driverid",
                "raceid"
            ]
        },
        "gold": "SELECT T3.year, T3.name, T3.date, T3.time FROM qualifying AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId INNER JOIN races AS T3 on T1.raceId = T3.raceId WHERE T1.driverId = ( SELECT driverId FROM drivers ORDER BY dob DESC LIMIT 1 ) ORDER BY T3.date ASC LIMIT 1",
        "candidates": {
            "4": "SELECT      T3.year AS race_year,      T1.name,      T1.date,      T1.time FROM      races AS T1  INNER JOIN      qualifying AS T2 ON T1.raceId = T2.raceId  INNER JOIN      seasons AS T3 ON T1.year = T3.year  INNER JOIN      drivers AS T4 ON T2.driverId = T4.driverId  ORDER BY      T4.dob DESC  LIMIT 1;",
            "1": "SELECT      T3.year,      T1.name,      T1.date,      T1.time FROM      races AS T1  INNER JOIN      qualifying AS T2 ON T1.raceId = T2.raceId  INNER JOIN      seasons AS T3 ON T1.year = T3.year  INNER JOIN      drivers AS T4 ON T2.driverId = T4.driverId  ORDER BY      T4.dob DESC,      T1.date ASC  LIMIT 1;",
            "5": "SELECT T1.name,  T1.date,  T1.time,  STRFTIME('%Y', T2.dob)  FROM races AS T1  INNER JOIN qualifying AS T3 ON T1.raceId = T3.raceId  INNER JOIN drivers AS T2 ON T3.driverId = T2.driverId  ORDER BY T2.dob DESC  LIMIT 1",
            "2": "SELECT T1.year,  T1.name,  T1.date,  T1.time  FROM races AS T1  INNER JOIN qualifying AS T2  ON T1.raceId = T2.raceId  INNER JOIN drivers AS T3  ON T2.driverId = T3.driverId  ORDER BY T3.dob DESC  LIMIT 1",
            "6": "SELECT T1.year ,  T3.name ,  T3.date ,  T3.time FROM drivers AS T2 JOIN qualifying AS T1 ON T1.driverId  =  T2.driverId JOIN races AS T3 ON T1.raceId  =  T3.raceId ORDER BY T2.dob DESC, T3.date LIMIT 1",
            "3": "SELECT   T1.year,   T2.name,   T2.date,   T2.time FROM drivers AS T3 INNER JOIN qualifying AS T4   ON T3.driverId = T4.driverId INNER JOIN races AS T2   ON T4.raceId = T2.raceId INNER JOIN seasons AS T1   ON T2.year = T1.year ORDER BY   T3.dob DESC,   T2.date LIMIT 1;"
        }
    },
    {
        "question_id": 982,
        "database": "formula_1",
        "evidence": "puncture status refers to status = Puncture;",
        "question": "How many American drivers have puncture status.",
        "schema_used": {
            "drivers": [
                "driverid",
                "nationality"
            ],
            "results": [
                "driverid",
                "statusid"
            ],
            "status": [
                "statusid",
                "status"
            ]
        },
        "gold": "SELECT COUNT(T1.driverId) FROM drivers AS T1 INNER JOIN results AS T2 on T1.driverId = T2.driverId INNER JOIN status AS T3 on T2.statusId = T3.statusId WHERE T3.status = 'Puncture' AND T1.nationality = 'American'",
        "candidates": {
            "4": "SELECT COUNT(*)  FROM results AS T1  INNER JOIN status AS T2 ON T1.statusId = T2.statusId  INNER JOIN drivers AS T3 ON T1.driverId = T3.driverId  WHERE T2.status = 'Puncture' AND T3.nationality = 'American';",
            "1": "SELECT COUNT(*) FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId INNER JOIN status AS T3 ON T1.statusId = T3.statusId WHERE T2.nationality = 'American' AND T3.status = 'Puncture';",
            "5": "SELECT COUNT(*) FROM results AS T1 INNER JOIN status AS T2 ON T1.statusId = T2.statusId INNER JOIN drivers AS T3 ON T1.driverId = T3.driverId WHERE T2.status = 'Puncture' AND T3.nationality = 'American'",
            "2": "SELECT COUNT(*) FROM results AS T1 INNER JOIN status AS T2 ON T1.statusId = T2.statusId INNER JOIN drivers AS T3 ON T1.driverId = T3.driverId WHERE T2.status = 'Puncture' AND T3.nationality = 'American'",
            "6": "SELECT count(*) FROM drivers AS t1 JOIN results AS t2 ON t1.driverid  =  t2.driverid JOIN status AS t3 ON t2.statusid  =  t3.statusid WHERE t3.status  =  \"Puncture\" AND t1.nationality  =  \"American\"",
            "3": "SELECT COUNT(T1.driverid) FROM drivers AS T1 INNER JOIN results AS T2   ON T1.driverid = T2.driverid INNER JOIN status AS T3   ON T2.statusid = T3.statusid WHERE   T1.nationality = 'American' AND T3.status = 'Puncture';"
        }
    },
    {
        "question_id": 983,
        "database": "formula_1",
        "evidence": "introduction website refers to url; Italian is a nationality",
        "question": "Which of the Italian constructor got the highest point to date? Give its introduction website?",
        "schema_used": {
            "constructors": [
                "url",
                "constructorid",
                "nationality"
            ],
            "constructorstandings": [
                "constructorid",
                "points"
            ]
        },
        "gold": "SELECT T1.url FROM constructors AS T1 INNER JOIN constructorStandings AS T2 on T1.constructorId = T2.constructorId WHERE T1.nationality = 'Italian' ORDER BY T2.points DESC LIMIT 1",
        "candidates": {
            "4": "SELECT url FROM constructors WHERE nationality = 'Italian' ORDER BY points DESC LIMIT 1",
            "2": "SELECT url FROM constructors WHERE nationality = 'Italian' ORDER BY name",
            "5": "SELECT url FROM constructors WHERE nationality = 'Italian' ORDER BY points DESC LIMIT 1",
            "1": "SELECT c.url FROM constructors c WHERE c.nationality = 'Italian' ORDER BY (     SELECT SUM(cr.points)     FROM constructorResults cr     WHERE cr.constructorId = c.constructorId ) DESC LIMIT 1;",
            "3": "SELECT   T1.url FROM constructors AS T1 INNER JOIN constructorStandings AS T2   ON T1.constructorId = T2.constructorId WHERE   T1.nationality = 'Italian' ORDER BY   T2.points DESC LIMIT 1;",
            "6": "SELECT url FROM constructors WHERE nationality  =  \"Italian\""
        }
    },
    {
        "question_id": 984,
        "database": "formula_1",
        "evidence": "introduction website refers to url;",
        "question": "What is the website of the constructor who tallied the most total wins.",
        "schema_used": {
            "constructors": [
                "url",
                "constructorid"
            ],
            "constructorstandings": [
                "constructorid",
                "wins"
            ]
        },
        "gold": "SELECT T1.url FROM constructors AS T1 INNER JOIN constructorStandings AS T2 on T1.constructorId = T2.constructorId ORDER BY T2.wins DESC LIMIT 1",
        "candidates": {
            "4": "SELECT T2.url  FROM constructorStandings AS T1  INNER JOIN constructors AS T2  ON T1.constructorId = T2.constructorId  GROUP BY T1.constructorId  ORDER BY SUM(T1.wins) DESC  LIMIT 1;",
            "1": "SELECT T2.url  FROM constructorStandings AS T1  INNER JOIN constructors AS T2  ON T1.constructorId = T2.constructorId  GROUP BY T1.constructorId  ORDER BY SUM(T1.wins) DESC  LIMIT 1;",
            "5": "SELECT url FROM constructors WHERE constructorId = ( SELECT constructorId FROM constructorStandings ORDER BY wins DESC LIMIT 1 )",
            "2": "SELECT T1.url FROM constructors AS T1 INNER JOIN constructorStandings AS T2 ON T1.constructorId = T2.constructorId GROUP BY T1.constructorId ORDER BY SUM(T2.wins) DESC LIMIT 1",
            "6": "SELECT T2.url FROM constructorStandings AS T1 INNER JOIN constructors AS T2 ON T1.constructorId = T2.constructorId ORDER BY T1.wins DESC LIMIT 1",
            "3": "SELECT   T2.url FROM constructorStandings AS T1 INNER JOIN constructors AS T2   ON T1.constructorId = T2.constructorId GROUP BY   T2.constructorId ORDER BY   SUM(T1.wins) DESC LIMIT 1;"
        }
    },
    {
        "question_id": 985,
        "database": "formula_1",
        "evidence": "slowest time refers to Max(time);",
        "question": "Among the drivers who participated in the French Grand Prix, who has the slowest time in the 3rd lap.",
        "schema_used": {
            "laptimes": [
                "driverid",
                "raceid",
                "time",
                "lap"
            ],
            "races": [
                "raceid",
                "name"
            ]
        },
        "gold": "SELECT T1.driverId FROM lapTimes AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId WHERE T2.name = 'French Grand Prix' AND T1.lap = 3 ORDER BY T1.time DESC LIMIT 1",
        "candidates": {
            "4": "SELECT T3.forename, T3.surname  FROM lapTimes AS T1  INNER JOIN races AS T2 ON T1.raceId = T2.raceId  INNER JOIN drivers AS T3 ON T1.driverId = T3.driverId  WHERE T2.name = 'French Grand Prix' AND T1.lap = 3  ORDER BY T1.time DESC  LIMIT 1;",
            "5": "SELECT T1.forename,  T1.surname  FROM drivers AS T1  INNER JOIN lapTimes AS T2 ON T1.driverId = T2.driverId  INNER JOIN races AS T3 ON T2.raceId = T3.raceId  WHERE  T3.name = 'French Grand Prix'  AND T2.lap = 3  ORDER BY  T2.time DESC  LIMIT 1",
            "2": "SELECT T1.forename,  T1.surname  FROM drivers AS T1  INNER JOIN lapTimes AS T2  ON T1.driverId = T2.driverId  INNER JOIN races AS T3  ON T2.raceId = T3.raceId  WHERE  T3.name = 'French Grand Prix'  AND T2.lap = 3  ORDER BY  T2.time DESC  LIMIT 1",
            "6": "SELECT T1.forename ,  T1.surname FROM drivers AS T1 JOIN lapTimes AS T2 ON T1.driverId  =  T2.driverId JOIN races AS T3 ON T2.raceId  =  T3.raceId WHERE T3.name  =  \"French Grand Prix\" AND T2.lap  =  3 ORDER BY T2.time DESC LIMIT 1",
            "3": "SELECT   T2.forename,   T2.surname FROM lapTimes AS T1 INNER JOIN drivers AS T2   ON T1.driverId = T2.driverId INNER JOIN races AS T3   ON T1.raceId = T3.raceId WHERE   T3.name = 'French Grand Prix' AND T1.lap = 3 ORDER BY   T1.time DESC LIMIT 1;",
            "1": "SELECT      d.forename,      d.surname,      MAX(lt.time) AS slowest_time FROM      races r JOIN      lapTimes lt ON r.raceId = lt.raceId JOIN      drivers d ON lt.driverId = d.driverId WHERE      r.name = 'French Grand Prix' AND      lt.lap = 3 GROUP BY      d.driverId ORDER BY      slowest_time DESC LIMIT 1;"
        }
    },
    {
        "question_id": 986,
        "database": "formula_1",
        "evidence": "fastest refers to Min(time);",
        "question": "In which race did the fastest 1st lap time was recorded? Please indicate the time in milliseconds.",
        "schema_used": {
            "laptimes": [
                "milliseconds",
                "raceid",
                "lap",
                "time"
            ],
            "races": [
                "raceid"
            ]
        },
        "gold": "SELECT T1.milliseconds FROM lapTimes AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId WHERE T1.lap = 1 ORDER BY T1.time LIMIT 1",
        "candidates": {
            "5": "SELECT raceId FROM lapTimes WHERE lap = 1 ORDER BY STRFTIME('%M:%S.%f', time) LIMIT 1",
            "2": "SELECT raceId, MIN(milliseconds) FROM lapTimes WHERE lap = 1",
            "6": "SELECT raceId ,  MIN(milliseconds) FROM lapTimes WHERE lap  =  1",
            "3": "SELECT T1.raceId, MIN(T1.milliseconds) FROM lapTimes AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T1.lap = 1",
            "1": "SELECT T1.raceId, CAST(SUBSTR(T1.time, 1, INSTR(T1.time, ':') - 1) AS INT) * 60000         + CAST(SUBSTR(T1.time, INSTR(T1.time, ':') + 1, INSTR(T1.time, '.') - INSTR(T1.time, ':') - 1) AS INT) * 1000         + CAST(SUBSTR(T1.time, INSTR(T1.time, '.') + 1) AS INT) AS milliseconds FROM lapTimes AS T1 WHERE T1.lap = 1 ORDER BY T1.time ASC LIMIT 1;",
            "4": "SELECT T1.raceId, CAST(SUBSTR(T2.time, 1, INSTR(T2.time, ':')-1) AS INT) * 60000         + CAST(SUBSTR(T2.time, INSTR(T2.time, ':')+1) AS INT) * 1000         + CAST(SUBSTR(T2.time, INSTR(T2.time, '.')+1) AS INT) AS milliseconds FROM lapTimes AS T1 INNER JOIN (     SELECT raceId, MIN(strftime('%s', time)) AS min_time     FROM lapTimes     WHERE lap = 1     GROUP BY raceId ) AS T3 ON T1.raceId = T3.raceId AND strftime('%s', T1.time) = T3.min_time WHERE T1.lap = 1 ORDER BY milliseconds ASC LIMIT 1;"
        }
    },
    {
        "question_id": 987,
        "database": "formula_1",
        "evidence": "top 10 refers to rank <11; AVG(fastestLapTime);",
        "question": "What is the average fastest lap time of the top 10 drivers in the 2006 United States Grand Prix?",
        "schema_used": {
            "results": [
                "fastestlaptime",
                "raceid",
                "rank"
            ],
            "races": [
                "raceid",
                "name",
                "year"
            ]
        },
        "gold": "SELECT AVG(T1.fastestLapTime) FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId WHERE T1.rank < 11 AND T2.year = 2006 AND T2.name = 'United States Grand Prix'",
        "candidates": {
            "4": "SELECT AVG(strftime('%s', fastestLapTime)) AS average_fastest_lap_time FROM results AS R INNER JOIN races AS Ra ON R.raceId = Ra.raceId WHERE Ra.year = 2006 AND Ra.name = 'United States Grand Prix' AND R.rank < 11;",
            "1": "SELECT AVG(strftime('%s', T2.fastestLapTime)) AS average_fastest_lap_time FROM races AS T1 JOIN results AS T2 ON T1.raceId = T2.raceId WHERE T1.year = 2006 AND T1.name = 'United States Grand Prix' AND T2.rank < 11;",
            "2": "SELECT CAST(AVG(REPLACE(SUBSTR(fastestLapTime, 3), '.', '')) AS REAL)  FROM results  WHERE raceId = (SELECT raceId FROM races WHERE name = 'United States Grand Prix' AND year = 2006)  AND rank <= 10",
            "5": "SELECT CAST(AVG(STRFTIME('%M', T1.fastestLapTime) * 60 + STRFTIME('%S', T1.fastestLapTime) + STRFTIME('%f', T1.fastestLapTime) / 1000000) AS REAL) FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T2.year = 2006 AND T2.name = 'United States Grand Prix' AND T1.rank <= 10",
            "6": "SELECT avg(T2.fastestLapTime) FROM races AS T1 INNER JOIN results AS T2 ON T1.raceId = T2.raceId WHERE T1.year = 2006 AND T1.name = 'United States Grand Prix' AND T2.rank < 11",
            "3": "SELECT AVG(T2.fastestLapTime) FROM races AS T1 INNER JOIN results AS T2 ON T1.raceId = T2.raceId WHERE T1.name = 'United States Grand Prix' AND T1.year = 2006 AND T2.rank < 11"
        }
    },
    {
        "question_id": 988,
        "database": "formula_1",
        "evidence": "Full name of the driver refers to drivers.forename and drivers.surname; born between 1980-1985 refers to 1980< year(dob)>1985; Average pitstop duration refers to Divide(SUM(duration),COUNT(duration)); shortest average refers to Min(avg(duration));",
        "question": "List down top 3 German drivers who has the shortest average pit stop duration and were born between 1980-1985.",
        "schema_used": {
            "drivers": [
                "forename",
                "surname",
                "driverid",
                "nationality",
                "dob"
            ],
            "pitstops": [
                "driverid",
                "duration"
            ]
        },
        "gold": "SELECT T2.forename, T2.surname FROM pitStops AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId WHERE T2.nationality = 'German' AND STRFTIME('%Y', T2.dob) BETWEEN '1980' AND '1985' GROUP BY T2.forename, T2.surname ORDER BY AVG(T1.duration) LIMIT 3",
        "candidates": {
            "4": "SELECT d.forename, d.surname  FROM drivers d  JOIN pitStops p ON d.driverId = p.driverId  WHERE d.nationality = 'German' AND strftime('%Y', d.dob) BETWEEN '1980' AND '1985' GROUP BY d.driverId  ORDER BY AVG(p.duration) ASC  LIMIT 3;",
            "5": "SELECT T1.forename, T1.surname FROM drivers AS T1 INNER JOIN pitStops AS T2 ON T1.driverId = T2.driverId WHERE T1.nationality = 'German' AND STRFTIME('%Y', T1.dob) BETWEEN '1980' AND '1985' GROUP BY T1.driverId ORDER BY AVG(REPLACE(T2.duration, ',', '.')) LIMIT 3",
            "2": "SELECT T1.forename,  T1.surname  FROM drivers AS T1  INNER JOIN pitStops AS T2 ON T1.driverId = T2.driverId  WHERE T1.nationality = 'German'  AND STRFTIME('%Y', T1.dob) BETWEEN '1980' AND '1985'  GROUP BY T1.driverId  ORDER BY AVG(REPLACE(T2.duration, ',', '.'))  LIMIT 3",
            "1": "SELECT d.forename, d.surname FROM drivers d JOIN (     SELECT ps.driverId, SUM(strftime('%s', ps.duration)) / COUNT(ps.duration) AS avg_duration     FROM pitStops ps     WHERE d.nationality = 'German' AND d.dob BETWEEN '1980-01-01' AND '1985-12-31'     GROUP BY ps.driverId     ORDER BY avg_duration ASC     LIMIT 3 ) subq ON d.driverId = subq.driverId;",
            "6": "SELECT T1.forename ,  T1.surname FROM drivers AS T1 JOIN pitStops AS T2 ON T1.driverId  =  T2.driverId WHERE T1.nationality  =  'German' AND T1.dob BETWEEN \"1980-01-01\" AND \"1985-12-31\" GROUP BY T1.driverId ORDER BY avg(T2.duration) ASC LIMIT 3",
            "3": "SELECT   T1.forename,   T1.surname FROM drivers AS T1 INNER JOIN pitStops AS T2   ON T1.driverId = T2.driverId WHERE   T1.nationality = 'German' AND T1.dob BETWEEN '1980-01-01' AND '1985-12-31' GROUP BY   T1.driverId ORDER BY   AVG(CAST(REPLACE(T2.duration, ',', '') AS REAL)) LIMIT 3;"
        }
    },
    {
        "question_id": 989,
        "database": "formula_1",
        "evidence": "Only the time of the champion shows in the format of \"hour: minutes: seconds.millionsecond\";",
        "question": "Who is the champion of the Canadian Grand Prix in 2008? Indicate his finish time.",
        "schema_used": {
            "results": [
                "time",
                "raceid"
            ],
            "races": [
                "raceid",
                "name",
                "year"
            ]
        },
        "gold": "SELECT T1.time FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T2.name = 'Canadian Grand Prix' AND T2.year = 2008 AND T1.time LIKE '_:%:__.___'",
        "candidates": {
            "5": "SELECT T1.name,  T2.time  FROM races AS T1 INNER JOIN results AS T2 ON T1.raceId = T2.raceId  WHERE T1.year = 2008 AND T1.name = 'Canadian Grand Prix' AND T2.positionOrder = 1",
            "2": "SELECT T1.name,  T2.time  FROM races AS T1  INNER JOIN results AS T2 ON T1.raceId = T2.raceId  WHERE T1.year = 2008 AND T1.name = 'Canadian Grand Prix' AND T2.position = 1",
            "4": "SELECT d.driverId, d.driverRef, r.time  FROM drivers d  JOIN results r ON d.driverId = r.driverId  JOIN races ra ON r.raceId = ra.raceId  WHERE ra.name = 'Canadian Grand Prix' AND ra.year = 2008 AND r.position = 1;",
            "6": "SELECT T1.time FROM results AS T1 JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T2.year = 2008 AND T2.name = 'Canadian Grand Prix' AND T1.time LIKE '%:%:%'",
            "3": "SELECT   T2.time FROM races AS T1 INNER JOIN results AS T2   ON T1.raceId = T2.raceId INNER JOIN drivers AS T3   ON T2.driverId = T3.driverId WHERE   T1.year = 2008 AND T1.name = 'Canadian Grand Prix';",
            "1": "SELECT      d.forename || ' ' || d.surname AS driver_name,     r.time FROM      races ra JOIN      results res ON ra.raceId = res.raceId JOIN      drivers d ON res.driverId = d.driverId WHERE      ra.year = 2008      AND ra.name = 'Canadian Grand Prix'     AND res.position = 1;"
        }
    },
    {
        "question_id": 990,
        "database": "formula_1",
        "evidence": "the time of the champion shows in the format of \"minutes: seconds.millionsecond\" in which Max(time); constructor reference name refers to constructorRef; website refers to url",
        "question": "What is the constructor reference name of the champion in the 2009 Singapore Grand Prix? Please give its website.",
        "schema_used": {
            "constructors": [
                "constructorref",
                "url",
                "constructorid"
            ],
            "results": [
                "raceid",
                "constructorid",
                "time"
            ],
            "races": [
                "raceid",
                "name",
                "year"
            ]
        },
        "gold": "SELECT T3.constructorRef, T3.url FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId INNER JOIN constructors AS T3 on T1.constructorId = T3.constructorId WHERE T2.name = 'Singapore Grand Prix' AND T2.year = 2009 AND T1.time LIKE '_:%:__.___'",
        "candidates": {
            "4": "SELECT T3.url  FROM races AS T1  INNER JOIN results AS T2 ON T1.raceId = T2.raceId  INNER JOIN constructors AS T3 ON T2.constructorId = T3.constructorId  WHERE T1.year = 2009 AND T1.name = 'Singapore Grand Prix'  ORDER BY T2.time ASC  LIMIT 1;",
            "2": "SELECT T1.url FROM constructors AS T1 INNER JOIN results AS T2 ON T1.constructorId = T2.constructorId INNER JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T3.year = 2009 AND T3.name = 'Singapore Grand Prix' ORDER BY T2.time DESC LIMIT 1",
            "5": "SELECT T1.constructorRef,  T2.url  FROM  results AS T1  INNER JOIN constructors AS T2  ON T1.constructorId = T2.constructorId  INNER JOIN races AS T3  ON T1.raceId = T3.raceId  WHERE  T3.year = 2009  AND T3.name = 'Singapore Grand Prix'  ORDER BY  T1.position  LIMIT 1",
            "6": "SELECT T3.url FROM results AS T1 JOIN races AS T2 ON T1.raceId = T2.raceId JOIN constructors AS T3 ON T1.constructorId = T3.constructorId WHERE T2.name = \"Singapore Grand Prix\" AND T2.year = 2009 ORDER BY T1.time LIMIT 1",
            "3": "SELECT T3.url FROM races AS T1 INNER JOIN results AS T2 ON T1.raceId = T2.raceId INNER JOIN constructors AS T3 ON T3.constructorId = T2.constructorId WHERE T1.year = 2009 AND T1.name = 'Singapore Grand Prix' ORDER BY T2.time LIMIT 1",
            "1": "SELECT      c.constructorRef,      c.url FROM      constructors AS c JOIN      results AS r ON c.constructorId = r.constructorId JOIN      races AS ra ON r.raceId = ra.raceId WHERE      ra.year = 2009      AND ra.name = 'Singapore Grand Prix'     AND r.position = 1;"
        }
    },
    {
        "question_id": 991,
        "database": "formula_1",
        "evidence": "Full name refers to forname, surname; Date of birth refers to dob; year(dob) BETWEEN '1981' AND '1991'; Austrian is a nationality",
        "question": "What is the full name and date of birth of Austrian drivers born between 1981 and 1991?",
        "schema_used": {
            "drivers": [
                "forename",
                "surname",
                "dob",
                "nationality"
            ]
        },
        "gold": "SELECT forename, surname, dob FROM drivers WHERE nationality = 'Austrian' AND STRFTIME('%Y', dob) BETWEEN '1981' AND '1991'",
        "candidates": {
            "4": "SELECT forename, surname, dob  FROM drivers  WHERE nationality = 'Austrian' AND strftime('%Y', dob) BETWEEN '1981' AND '1991';",
            "1": "SELECT forename, surname, dob  FROM drivers  WHERE nationality = 'Austrian' AND strftime('%Y', dob) BETWEEN '1981' AND '1991';",
            "5": "SELECT forename,  surname,  dob  FROM drivers  WHERE nationality = 'Austrian'  AND STRFTIME('%Y', dob) BETWEEN '1981' AND '1991'",
            "2": "SELECT forename, surname, dob  FROM drivers  WHERE nationality = 'Austrian' AND STRFTIME('%Y', dob) BETWEEN '1981' AND '1991'",
            "6": "SELECT forename ,  surname ,  dob FROM drivers WHERE nationality  =  'Austrian' AND dob BETWEEN '1981-01-01' AND '1991-12-31'",
            "3": "SELECT forename, surname, dob FROM drivers WHERE nationality = 'Austrian' AND STRFTIME('%Y', dob) BETWEEN '1981' AND '1991'"
        }
    },
    {
        "question_id": 992,
        "database": "formula_1",
        "evidence": "FFull name refers to forname+surname; Nationality refers to German; Date of birth refers to dob; year(dob) BETWEEN '1971' AND '1985'",
        "question": "Find the full name, Wiki Pedia page link, and date of birth of German drivers born between 1971 and 1985. List it in descending order of date of birth.",
        "schema_used": {
            "drivers": [
                "forename",
                "surname",
                "url",
                "dob",
                "nationality"
            ]
        },
        "gold": "SELECT forename, surname, url, dob FROM drivers WHERE nationality = 'German' AND STRFTIME('%Y', dob) BETWEEN '1971' AND '1985' ORDER BY dob DESC",
        "candidates": {
            "4": "SELECT forename || ' ' || surname AS full_name, url AS wiki_page_link, dob  FROM drivers  WHERE nationality = 'German' AND strftime('%Y', dob) BETWEEN '1971' AND '1985'  ORDER BY dob DESC;",
            "1": "SELECT forename || ' ' || surname AS full_name, url AS wiki_page_link, dob  FROM drivers  WHERE nationality = 'German' AND strftime('%Y', dob) BETWEEN '1971' AND '1985'  ORDER BY dob DESC;",
            "5": "SELECT forename || ' ' || surname,  url,  dob  FROM drivers  WHERE nationality = 'German'  AND STRFTIME('%Y', dob) BETWEEN '1971' AND '1985'  ORDER BY dob DESC",
            "2": "SELECT forename || ' ' || surname,  url,  dob  FROM drivers  WHERE nationality = 'German'  AND STRFTIME('%Y', dob) BETWEEN '1971' AND '1985'  ORDER BY dob DESC",
            "6": "SELECT forename ,  surname ,  url ,  dob FROM drivers WHERE nationality  =  'German' AND SUBSTR(dob, 1, 4) BETWEEN '1971' AND '1985' ORDER BY dob DESC",
            "3": "SELECT forename, surname, url, dob FROM drivers WHERE nationality = 'German' AND STRFTIME('%Y', dob) BETWEEN '1971' AND '1985' ORDER BY dob DESC"
        }
    },
    {
        "question_id": 993,
        "database": "formula_1",
        "evidence": "coordinates expressed in latitude and longitude refers to (lat, lng)",
        "question": "In which location does the Hungaroring circuit located? Also, find the country and coordinates of this circuit?",
        "schema_used": {
            "circuits": [
                "country",
                "lat",
                "lng",
                "name"
            ]
        },
        "gold": "SELECT country, lat, lng FROM circuits WHERE name = 'Hungaroring'",
        "candidates": {
            "4": "SELECT location, country, lat, lng  FROM circuits  WHERE name = 'Hungaroring';",
            "1": "SELECT location, country, lat, lng  FROM circuits  WHERE name = 'Hungaroring';",
            "5": "SELECT location,country,lat,lng FROM circuits WHERE name = 'Hungaroring'",
            "2": "SELECT location, country, lat, lng  FROM circuits  WHERE name = 'Hungaroring';",
            "3": "SELECT location ,  country ,  lat ,  lng FROM circuits WHERE name =  'Hungaroring'",
            "6": "SELECT location ,  country ,  lat ,  lng FROM circuits WHERE name = \"Hungaroring\""
        }
    },
    {
        "question_id": 994,
        "database": "formula_1",
        "evidence": "Monaco Grand Priz refers to the race; race in year between 1980 and 2010",
        "question": "Which constructor scored most points from Monaco Grand Prix between 1980 and 2010? List the score, name and nationality of this team.",
        "schema_used": {
            "constructors": [
                "name",
                "nationality",
                "constructorid"
            ],
            "constructorresults": [
                "points",
                "constructorid",
                "raceid"
            ],
            "races": [
                "raceid",
                "name",
                "year"
            ]
        },
        "gold": "SELECT SUM(T1.points), T2.name, T2.nationality FROM constructorResults AS T1 INNER JOIN constructors AS T2 ON T1.constructorId = T2.constructorId INNER JOIN races AS T3 ON T3.raceid = T1.raceid WHERE T3.name = 'Monaco Grand Prix' AND T3.year BETWEEN 1980 AND 2010 GROUP BY T2.name ORDER BY SUM(T1.points) DESC LIMIT 1",
        "candidates": {
            "4": "SELECT MAX(T2.points), T3.name, T3.nationality  FROM races AS T1  INNER JOIN constructorStandings AS T2 ON T1.raceId = T2.raceId  INNER JOIN constructors AS T3 ON T2.constructorId = T3.constructorId  WHERE T1.name = 'Monaco Grand Prix' AND T1.year BETWEEN 1980 AND 2010  GROUP BY T3.constructorId  ORDER BY MAX(T2.points) DESC  LIMIT 1;",
            "5": "SELECT T1.points, T2.name, T2.nationality FROM constructorStandings AS T1 INNER JOIN constructors AS T2 ON T1.constructorId = T2.constructorId INNER JOIN races AS T3 ON T1.raceId = T3.raceId WHERE T3.name = 'Monaco Grand Prix' AND T3.year BETWEEN 1980 AND 2010 ORDER BY T1.points DESC LIMIT 1",
            "2": "SELECT T1.points,  T2.name,  T2.nationality  FROM constructorStandings AS T1  INNER JOIN constructors AS T2  ON T1.constructorId = T2.constructorId  INNER JOIN races AS T3  ON T1.raceId = T3.raceId  WHERE  T3.name = 'Monaco Grand Prix'  AND  T3.year BETWEEN 1980 AND 2010  ORDER BY  T1.points DESC  LIMIT 1",
            "6": "SELECT T2.points, T3.name, T3.nationality FROM races AS T1 INNER JOIN constructorStandings AS T2 ON T1.raceId = T2.raceId INNER JOIN constructors AS T3 ON T2.constructorId = T3.constructorId WHERE T1.name = 'Monaco Grand Prix' AND T1.year BETWEEN 1980 AND 2010 ORDER BY T2.points DESC LIMIT 1",
            "1": "SELECT MAX(T2.points), T1.name, T1.nationality  FROM races AS T1  INNER JOIN constructorStandings AS T3 ON T1.raceId = T3.raceId  INNER JOIN constructors AS T1 ON T3.constructorId = T1.constructorId  WHERE T1.name LIKE '%Monaco Grand Prix%'  AND T1.year BETWEEN 1980 AND 2010  GROUP BY T1.constructorId  ORDER BY MAX(T2.points) DESC  LIMIT 1;",
            "3": "SELECT T2.points, T3.name, T3.nationality FROM races AS T1 INNER JOIN constructorStandings AS T2 ON T1.raceId = T2.raceId INNER JOIN constructors AS T3 ON T2.constructorId = T3.constructorId WHERE T1.name = 'Monaco Grand Prix' AND T1.year BETWEEN 1980 AND 2010 GROUP BY T2.points, T3.name, T3.nationality ORDER BY T2.points DESC LIMIT 1"
        }
    },
    {
        "question_id": 995,
        "database": "formula_1",
        "evidence": "Average score = AVG(points)",
        "question": "What is the average score of Lewis Hamilton among all the Turkish Grand Prix?",
        "schema_used": {
            "driverstandings": [
                "points",
                "driverid",
                "raceid"
            ],
            "drivers": [
                "driverid",
                "forename",
                "surname"
            ],
            "races": [
                "raceid",
                "name"
            ]
        },
        "gold": "SELECT AVG(T2.points) FROM drivers AS T1 INNER JOIN driverStandings AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T3.raceId = T2.raceId WHERE T1.forename = 'Lewis' AND T1.surname = 'Hamilton' AND T3.name = 'Turkish Grand Prix'",
        "candidates": {
            "4": "SELECT AVG(T1.points)  FROM driverStandings AS T1  INNER JOIN races AS T2 ON T1.raceId = T2.raceId  INNER JOIN drivers AS T3 ON T1.driverId = T3.driverId  WHERE T2.name = 'Turkish Grand Prix' AND T3.forename = 'Lewis' AND T3.surname = 'Hamilton'",
            "5": "SELECT AVG(T1.points) FROM driverStandings AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId INNER JOIN drivers AS T3 ON T1.driverId = T3.driverId WHERE T3.forename = 'Lewis' AND T2.name = 'Turkish Grand Prix'",
            "2": "SELECT AVG(T1.points) FROM driverStandings AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId INNER JOIN drivers AS T3 ON T1.driverId = T3.driverId WHERE T3.forename = 'Lewis' AND T2.name = 'Turkish Grand Prix'",
            "6": "SELECT AVG(T1.points) FROM driverStandings AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId INNER JOIN drivers AS T3 ON T1.driverId = T3.driverId WHERE T3.forename = 'Lewis' AND T3.surname = 'Hamilton' AND T2.name = 'Turkish Grand Prix'",
            "3": "SELECT AVG(T1.points) FROM driverStandings AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId INNER JOIN drivers AS T3 ON T1.driverId = T3.driverId WHERE T3.forename = 'Lewis' AND T3.surname = 'Hamilton' AND T2.name = 'Turkish Grand Prix'",
            "1": "SELECT AVG(T1.points)  FROM driverStandings AS T1  INNER JOIN races AS T2 ON T1.raceId = T2.raceId  INNER JOIN drivers AS T3 ON T1.driverId = T3.driverId  WHERE T2.name = 'Turkish Grand Prix' AND T3.forename = 'Lewis' AND T3.surname = 'Hamilton';"
        }
    },
    {
        "question_id": 996,
        "database": "formula_1",
        "evidence": "races in date between '2000-01-01' and '2010-12-31'",
        "question": "What is the annual average number of races held during the first 10 years of the 21st century?",
        "schema_used": {
            "races": [
                "date",
                "year"
            ]
        },
        "gold": "SELECT CAST(SUM(CASE WHEN year BETWEEN 2000 AND 2010 THEN 1 ELSE 0 END) AS REAL) / 10 FROM races WHERE date BETWEEN '2000-01-01' AND '2010-12-31'",
        "candidates": {
            "4": "SELECT CAST(COUNT(*) AS REAL) / 10 AS average_races_per_year FROM races WHERE date BETWEEN '2000-01-01' AND '2010-12-31';",
            "5": "SELECT CAST(COUNT(*) AS REAL) / 10 FROM races WHERE date BETWEEN '2000-01-01' AND '2010-12-31'",
            "2": "SELECT CAST(COUNT(*) AS REAL) / 10 FROM races WHERE date BETWEEN '2000-01-01' AND '2010-12-31'",
            "1": "SELECT      AVG(num_races) AS avg_races_per_year FROM (     SELECT          strftime('%Y', date) AS year,         COUNT(*) AS num_races     FROM          races     WHERE          date BETWEEN '2000-01-01' AND '2010-12-31'     GROUP BY          strftime('%Y', date) ) AS yearly_races;",
            "3": "SELECT CAST(COUNT(raceId) AS REAL) / 10 FROM races WHERE date BETWEEN '2001-01-01' AND '2010-12-31'",
            "6": "SELECT AVG(num) FROM ( SELECT COUNT(*) AS num ,  STRFTIME('%Y', date) FROM races WHERE STRFTIME('%Y', date) BETWEEN '2001' AND '2010' GROUP BY STRFTIME('%Y', date) )"
        }
    },
    {
        "question_id": 997,
        "database": "formula_1",
        "evidence": "Citizenship of majority of drivers = MAX(nationality); citizenship and nationality are synonyms\n\n",
        "question": "Which citizenship do the vast majority of the drivers hold?",
        "schema_used": {
            "drivers": [
                "nationality",
                "driverid"
            ]
        },
        "gold": "SELECT nationality FROM drivers GROUP BY nationality ORDER BY COUNT(driverId) DESC LIMIT 1",
        "candidates": {
            "4": "SELECT nationality  FROM drivers  GROUP BY nationality  ORDER BY COUNT(*) DESC  LIMIT 1;",
            "1": "SELECT nationality  FROM drivers  GROUP BY nationality  ORDER BY COUNT(*) DESC  LIMIT 1;",
            "5": "SELECT nationality FROM drivers GROUP BY nationality ORDER BY COUNT(*) DESC LIMIT 1",
            "2": "SELECT nationality FROM drivers GROUP BY nationality ORDER BY COUNT(*) DESC LIMIT 1",
            "6": "SELECT nationality FROM drivers GROUP BY nationality ORDER BY count(*) DESC LIMIT 1",
            "3": "SELECT nationality FROM drivers GROUP BY nationality ORDER BY count(*) DESC LIMIT 1"
        }
    },
    {
        "question_id": 998,
        "database": "formula_1",
        "evidence": "victories refer to wins; 91st refers to points\n\n",
        "question": "In terms of number of points acquired, how many victories did the driver who ranked 91st acquired?",
        "schema_used": {
            "driverstandings": [
                "wins",
                "points"
            ]
        },
        "gold": "SELECT SUM(CASE WHEN points = 91 THEN wins ELSE 0 END) FROM driverStandings",
        "candidates": {
            "4": "SELECT wins FROM driverStandings WHERE points = 91",
            "5": "SELECT T1.wins FROM driverStandings AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.points = 91",
            "2": "SELECT T1.wins  FROM  driverStandings AS T1  INNER JOIN drivers AS T2  ON T1.driverId = T2.driverId  ORDER BY  T1.points  LIMIT 1",
            "6": "SELECT wins FROM driverStandings ORDER BY points ASC LIMIT 90, 1",
            "3": "SELECT   wins FROM driverStandings ORDER BY   points LIMIT 1 OFFSET 90;",
            "1": "SELECT T1.wins FROM driverStandings AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T1.position = 91;"
        }
    },
    {
        "question_id": 999,
        "database": "formula_1",
        "evidence": "Fastest lap speed refers to MIN(fastestLapTime)\n\n",
        "question": "In terms of the fastest lap time, what is the name of the race which recorded the fastest lap speed by a racer?",
        "schema_used": {
            "races": [
                "name",
                "raceid"
            ],
            "results": [
                "raceid",
                "fastestlaptime"
            ]
        },
        "gold": "SELECT T1.name FROM races AS T1 INNER JOIN results AS T2 ON T1.raceId = T2.raceId WHERE T2.fastestLapTime IS NOT NULL ORDER BY T2.fastestLapTime ASC LIMIT 1",
        "candidates": {
            "4": "SELECT T1.name  FROM races AS T1  INNER JOIN results AS T2  ON T1.raceId = T2.raceId  ORDER BY T2.fastestLapSpeed ASC  LIMIT 1",
            "1": "SELECT T1.name  FROM races AS T1  INNER JOIN results AS T2 ON T1.raceId = T2.raceId  ORDER BY T2.fastestLapSpeed DESC  LIMIT 1;",
            "5": "SELECT name FROM races INNER JOIN results ON races.raceId = results.raceId ORDER BY CAST(REPLACE(fastestLapSpeed, ',', '') AS REAL) DESC LIMIT 1",
            "2": "SELECT T1.name FROM races AS T1 INNER JOIN results AS T2 ON T1.raceId = T2.raceId ORDER BY T2.fastestLapSpeed DESC LIMIT 1",
            "6": "SELECT T1.name FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid ORDER BY T2.fastestLapSpeed DESC LIMIT 1",
            "3": "SELECT   T1.name FROM races AS T1 INNER JOIN results AS T2   ON T1.raceId = T2.raceId ORDER BY   T2.fastestLapSpeed DESC LIMIT 1;"
        }
    },
    {
        "question_id": 1000,
        "database": "formula_1",
        "evidence": "full location refers to location+country; most recent race = MAX(date)\n\n",
        "question": "Which racetrack hosted the most recent race? Indicate the full location.",
        "schema_used": {
            "circuits": [
                "location",
                "circuitid"
            ],
            "races": [
                "circuitid",
                "date"
            ]
        },
        "gold": "SELECT T1.location FROM circuits AS T1 INNER JOIN races AS T2 ON T1.circuitId = T2.circuitId ORDER BY T2.date DESC LIMIT 1",
        "candidates": {
            "4": "SELECT T1.location || ', ' || T1.country AS full_location FROM circuits AS T1 INNER JOIN races AS T2 ON T1.circuitId = T2.circuitId WHERE T2.date = (SELECT MAX(date) FROM races);",
            "1": "SELECT T2.location || ', ' || T2.country AS full_location FROM races AS T1 INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitId WHERE T1.date = (SELECT MAX(date) FROM races);",
            "5": "SELECT T1.location,  T1.country  FROM circuits AS T1 INNER JOIN races AS T2 ON T1.circuitId = T2.circuitId  ORDER BY T2.date DESC LIMIT 1",
            "2": "SELECT T2.location,  T2.country  FROM races AS T1  INNER JOIN circuits AS T2  ON T1.circuitId = T2.circuitId  ORDER BY T1.date DESC  LIMIT 1",
            "6": "SELECT T2.location ,  T2.country FROM races AS T1 JOIN circuits AS T2 ON T1.circuitid  =  T2.circuitid ORDER BY T1.date DESC LIMIT 1",
            "3": "SELECT T2.name, T2.location, T2.country FROM races AS T1 INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitId ORDER BY T1.date DESC LIMIT 1"
        }
    },
    {
        "question_id": 1001,
        "database": "formula_1",
        "evidence": "Ranked 1st in the 3rd qualifying race refer to MIN(q3); 2008 is the year of race; full name of racer = forename, surname",
        "question": "What is full name of the racer who ranked 1st in the 3rd qualifying race held in the Marina Bay Street Circuit in 2008?",
        "schema_used": {
            "circuits": [
                "circuitid",
                "name"
            ],
            "drivers": [
                "forename",
                "surname",
                "driverid"
            ],
            "qualifying": [
                "driverid",
                "raceid",
                "q3"
            ],
            "races": [
                "raceid",
                "circuitid",
                "year"
            ]
        },
        "gold": "SELECT T2.forename, T2.surname FROM qualifying AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId INNER JOIN races AS T3 ON T1.raceid = T3.raceid WHERE q3 IS NOT NULL AND T3.year = 2008 AND T3.circuitId IN ( SELECT circuitId FROM circuits WHERE name = 'Marina Bay Street Circuit' ) ORDER BY CAST(SUBSTR(q3, 1, INSTR(q3, ':') - 1) AS INTEGER) * 60 + CAST(SUBSTR(q3, INSTR(q3, ':') + 1, INSTR(q3, '.') - INSTR(q3, ':') - 1) AS REAL) + CAST(SUBSTR(q3, INSTR(q3, '.') + 1) AS REAL) / 1000 ASC LIMIT 1",
        "candidates": {
            "4": "SELECT T3.forename, T3.surname  FROM qualifying AS T1  INNER JOIN races AS T2 ON T1.raceId = T2.raceId  INNER JOIN drivers AS T3 ON T1.driverId = T3.driverId  WHERE T2.year = 2008  AND T2.circuitRef = 'marina bay street circuit'  ORDER BY T1.q3 ASC  LIMIT 1;",
            "5": "SELECT T1.forename,  T1.surname  FROM  drivers AS T1  INNER JOIN qualifying AS T2  ON T1.driverId = T2.driverId  INNER JOIN races AS T3  ON T2.raceId = T3.raceId  WHERE  T3.year = 2008  AND T3.circuitId = 'marina_bay'  ORDER BY  T2.q3  LIMIT 1",
            "1": "SELECT T3.forename, T3.surname  FROM qualifying AS T1  INNER JOIN races AS T2 ON T1.raceId = T2.raceId  INNER JOIN drivers AS T3 ON T1.driverId = T3.driverId  INNER JOIN circuits AS T4 ON T2.circuitId = T4.circuitId WHERE T2.year = 2008 AND T4.circuitRef = 'marina_bay_street_circuit' AND T1.position = 1",
            "2": "SELECT T1.forename,  T1.surname  FROM  drivers AS T1  INNER JOIN qualifying AS T2  ON T1.driverId = T2.driverId  INNER JOIN races AS T3  ON T2.raceId = T3.raceId  WHERE  T3.year = 2008  AND T3.round = 3  ORDER BY  T2.q3  LIMIT 1",
            "6": "SELECT T3.forename ,  T3.surname FROM races AS T1 JOIN qualifying AS T2 ON T1.raceid  =  T2.raceid JOIN drivers AS T3 ON T2.driverid  =  T3.driverid WHERE T1.year  =  2008 AND T1.circuitid  =  (SELECT circuitid FROM circuits WHERE name  =  'Marina Bay Street Circuit') ORDER BY T2.q3 LIMIT 1",
            "3": "SELECT   T1.forename,   T1.surname FROM drivers AS T1 INNER JOIN qualifying AS T2   ON T1.driverId = T2.driverId INNER JOIN races AS T3   ON T2.raceId = T3.raceId INNER JOIN circuits AS T4   ON T3.circuitId = T4.circuitId WHERE   T3.year = 2008 AND T4.circuitRef = 'marina_bay' ORDER BY   T2.q3 LIMIT 1;"
        }
    },
    {
        "question_id": 1002,
        "database": "formula_1",
        "evidence": "full name refers to forename+surname; Youngest racer = MAX(dob)",
        "question": "As of the present, what is the full name of the youngest racer? Indicate her nationality and the name of the race to which he/she first joined.",
        "schema_used": {
            "drivers": [
                "forename",
                "surname",
                "nationality",
                "driverid",
                "dob"
            ],
            "races": [
                "name",
                "raceid"
            ],
            "driverstandings": [
                "driverid",
                "raceid"
            ]
        },
        "gold": "SELECT T1.forename, T1.surname, T1.nationality, T3.name FROM drivers AS T1 INNER JOIN driverStandings AS T2 on T1.driverId = T2.driverId INNER JOIN races AS T3 on T2.raceId = T3.raceId ORDER BY JULIANDAY(T1.dob) DESC LIMIT 1",
        "candidates": {
            "4": "SELECT      d.forename || ' ' || d.surname AS full_name,     d.nationality,     r.name AS first_race FROM      drivers AS d INNER JOIN      results AS res ON d.driverId = res.driverId INNER JOIN      races AS r ON res.raceId = r.raceId WHERE      d.dob = (SELECT MAX(dob) FROM drivers) ORDER BY      r.raceId LIMIT 1;",
            "5": "SELECT T1.forename, T1.surname, T1.nationality, T3.name FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T2.raceId = T3.raceId ORDER BY T1.dob DESC LIMIT 1",
            "2": "SELECT T1.forename || ' ' || T1.surname, T1.nationality, T3.name FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T2.raceId = T3.raceId ORDER BY T1.dob DESC LIMIT 1",
            "6": "SELECT T1.forename ,  T1.surname ,  T1.nationality ,  T3.name FROM drivers AS T1 JOIN results AS T2 ON T1.driverId  =  T2.driverId JOIN races AS T3 ON T2.raceId  =  T3.raceId ORDER BY T1.dob DESC, T3.date LIMIT 1",
            "1": "SELECT      T3.forename || ' ' || T3.surname AS full_name,      T3.nationality,      T1.name AS first_race_name FROM      races AS T1  INNER JOIN      results AS T2 ON T1.raceId = T2.raceId  INNER JOIN      drivers AS T3 ON T2.driverId = T3.driverId  ORDER BY      T3.dob DESC  LIMIT 1;",
            "3": "SELECT T1.forename, T1.surname, T1.nationality, T3.name FROM drivers AS T1 INNER JOIN results AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T2.raceId = T3.raceId ORDER BY T1.dob DESC LIMIT 1"
        }
    },
    {
        "question_id": 1003,
        "database": "formula_1",
        "evidence": "number of accidents refers to the number where statusid = 3; Canadian Grand Prix refers to the race of name\n",
        "question": "How many accidents did the driver who had the highest number accidents in the Canadian Grand Prix have?",
        "schema_used": {
            "results": [
                "driverid",
                "raceid",
                "statusid"
            ],
            "races": [
                "raceid",
                "name"
            ],
            "status": [
                "statusid"
            ]
        },
        "gold": "SELECT COUNT(T1.driverId) FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId INNER JOIN status AS T3 on T1.statusId = T3.statusId WHERE T3.statusId = 3 AND T2.name = 'Canadian Grand Prix' GROUP BY T1.driverId ORDER BY COUNT(T1.driverId) DESC LIMIT 1",
        "candidates": {
            "4": "SELECT COUNT(*)  FROM races AS R  INNER JOIN results AS Res ON R.raceId = Res.raceId  INNER JOIN status AS S ON Res.statusId = S.statusId  WHERE R.name = 'Canadian Grand Prix' AND S.statusId = 3  GROUP BY Res.driverId  ORDER BY COUNT(*) DESC  LIMIT 1;",
            "2": "SELECT COUNT(T1.statusId) FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T2.name = 'Canadian Grand Prix' AND T1.statusId = 3 GROUP BY T1.driverId ORDER BY COUNT(T1.statusId) DESC LIMIT 1",
            "5": "SELECT COUNT(T1.statusId) FROM results AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T2.name = 'Canadian Grand Prix' AND T1.statusId = 3 GROUP BY T1.driverId ORDER BY COUNT(T1.statusId) DESC LIMIT 1",
            "6": "SELECT COUNT(*) FROM results AS T1 JOIN races AS T2 ON T1.raceId  =  T2.raceId WHERE T2.name  =  'Canadian Grand Prix' AND T1.statusId  =  3 GROUP BY T1.driverId ORDER BY COUNT(*) DESC LIMIT 1",
            "3": "SELECT COUNT(T1.statusId) FROM status AS T1 INNER JOIN results AS T2 ON T1.statusId = T2.statusId INNER JOIN races AS T3 ON T2.raceId = T3.raceId WHERE T3.name = 'Canadian Grand Prix' AND T1.statusId = 3 GROUP BY T2.driverId ORDER BY COUNT(T1.statusId) DESC LIMIT 1",
            "1": "SELECT WITH canadian_grand_prix AS (     SELECT raceId      FROM races      WHERE name = 'Canadian Grand Prix' ), accidents_count AS (     SELECT r.driverId, COUNT(*) AS accident_count     FROM results r     JOIN canadian_grand_prix cg ON r.raceId = cg.raceId     WHERE r.statusId = 3     GROUP BY r.driverId ) SELECT MAX(accident_count) AS max_accidents FROM accidents_count;"
        }
    },
    {
        "question_id": 1004,
        "database": "formula_1",
        "evidence": "oldest racer refers to MIN(dob); full name refers to forename, surname.",
        "question": "How many wins was achieved by the oldest racer? Indicate his/her full name.",
        "schema_used": {
            "drivers": [
                "forename",
                "surname",
                "driverid",
                "dob"
            ],
            "driverstandings": [
                "wins",
                "driverid"
            ]
        },
        "gold": "SELECT SUM(T1.wins),T2.forename, T2.surname FROM driverStandings AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId ORDER BY T2.dob ASC LIMIT 1",
        "candidates": {
            "4": "SELECT T1.forename, T1.surname  FROM drivers AS T1  INNER JOIN driverStandings AS T2 ON T1.driverId = T2.driverId  ORDER BY T1.dob ASC  LIMIT 1;",
            "1": "SELECT T1.forename, T1.surname  FROM drivers AS T1  INNER JOIN driverStandings AS T2 ON T1.driverId = T2.driverId  WHERE T1.dob = (SELECT MIN(dob) FROM drivers) ORDER BY T2.wins DESC  LIMIT 1;",
            "5": "SELECT SUM(T1.wins), T2.forename, T2.surname FROM driverStandings AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId ORDER BY T2.dob LIMIT 1",
            "2": "SELECT SUM(T1.wins), T2.forename, T2.surname  FROM driverStandings AS T1  INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId  ORDER BY T2.dob  LIMIT 1",
            "6": "SELECT T1.wins, T2.forename, T2.surname FROM driverStandings AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId ORDER BY T2.dob LIMIT 1",
            "3": "SELECT   T2.wins,   T1.forename,   T1.surname FROM drivers AS T1 INNER JOIN driverStandings AS T2   ON T1.driverId = T2.driverId ORDER BY   T1.dob LIMIT 1;"
        }
    },
    {
        "question_id": 1005,
        "database": "formula_1",
        "evidence": "longest time spent at pitstop refers to MAX(duration)",
        "question": "What was the longest time a driver had ever spent at a pit stop?",
        "schema_used": {
            "pitstops": [
                "duration"
            ]
        },
        "gold": "SELECT duration FROM pitStops ORDER BY duration DESC LIMIT 1",
        "candidates": {
            "4": "SELECT MAX(duration) FROM pitStops",
            "1": "SELECT MAX(duration) FROM pitStops;",
            "5": "SELECT MAX(duration) FROM pitStops",
            "2": "SELECT MAX(duration) FROM pitStops",
            "6": "SELECT MAX(duration) FROM pitStops",
            "3": "SELECT MAX(duration) FROM pitStops"
        }
    },
    {
        "question_id": 1006,
        "database": "formula_1",
        "evidence": "",
        "question": "Among all the lap records set on various circuits, what is the time for the fastest one?",
        "schema_used": {
            "laptimes": [
                "time"
            ]
        },
        "gold": "SELECT time FROM lapTimes ORDER BY (CASE WHEN INSTR(time, ':') <> INSTR(SUBSTR(time, INSTR(time, ':') + 1), ':') + INSTR(time, ':') THEN CAST(SUBSTR(time, 1, INSTR(time, ':') - 1) AS REAL) * 3600 ELSE 0 END) + (CAST(SUBSTR(time, INSTR(time, ':') - 2 * (INSTR(time, ':') = INSTR(SUBSTR(time, INSTR(time, ':') + 1), ':') + INSTR(time, ':')), INSTR(time, ':') - 1) AS REAL) * 60) + (CAST(SUBSTR(time, INSTR(time, ':') + 1, INSTR(time, '.') - INSTR(time, ':') - 1) AS REAL)) + (CAST(SUBSTR(time, INSTR(time, '.') + 1) AS REAL) / 1000) ASC LIMIT 1",
        "candidates": {
            "4": "SELECT MIN(time) FROM lapTimes",
            "1": "SELECT MIN(T2.time)  FROM races AS T1  INNER JOIN lapTimes AS T2 ON T1.raceId = T2.raceId;",
            "5": "SELECT MIN(time) FROM lapTimes",
            "2": "SELECT MIN(time) FROM lapTimes",
            "6": "SELECT time FROM lapTimes ORDER BY time ASC LIMIT 1",
            "3": "SELECT   time FROM lapTimes ORDER BY   time LIMIT 1;"
        }
    },
    {
        "question_id": 1007,
        "database": "formula_1",
        "evidence": "longest time refes to MAX(duration);",
        "question": "What was the longest time that Lewis Hamilton had spent at a pit stop?",
        "schema_used": {
            "pitstops": [
                "duration",
                "driverid"
            ],
            "drivers": [
                "driverid",
                "forename",
                "surname"
            ]
        },
        "gold": "SELECT T1.duration FROM pitStops AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId WHERE T2.forename = 'Lewis' AND T2.surname = 'Hamilton' ORDER BY T1.duration DESC LIMIT 1",
        "candidates": {
            "4": "SELECT MAX(T1.duration)  FROM pitStops AS T1  INNER JOIN drivers AS T2  ON T1.driverId = T2.driverId  WHERE T2.forename = 'Lewis' AND T2.surname = 'Hamilton';",
            "1": "SELECT MAX(T1.duration)  FROM pitStops AS T1  INNER JOIN drivers AS T2  ON T1.driverId = T2.driverId  WHERE T2.forename = 'Lewis' AND T2.surname = 'Hamilton';",
            "5": "SELECT MAX(T1.duration) FROM pitStops AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T2.forename = 'Lewis' AND T2.surname = 'Hamilton'",
            "2": "SELECT MAX(T1.duration) FROM pitStops AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T2.forename = 'Lewis' AND T2.surname = 'Hamilton'",
            "6": "SELECT T2.duration FROM drivers AS T1 INNER JOIN pitStops AS T2 ON T1.driverId = T2.driverId WHERE T1.forename = 'Lewis' AND T1.surname = 'Hamilton' ORDER BY T2.duration DESC LIMIT 1",
            "3": "SELECT   MAX(T2.duration) FROM drivers AS T1 INNER JOIN pitStops AS T2   ON T1.driverId = T2.driverId WHERE   T1.forename = 'Lewis' AND T1.surname = 'Hamilton';"
        }
    },
    {
        "question_id": 1008,
        "database": "formula_1",
        "evidence": "",
        "question": "During which lap did Lewis Hamilton take a pit stop during the 2011 Australian Grand Prix?",
        "schema_used": {
            "pitstops": [
                "lap",
                "driverid",
                "raceid"
            ],
            "drivers": [
                "driverid",
                "forename",
                "surname"
            ],
            "races": [
                "raceid",
                "name",
                "year"
            ]
        },
        "gold": "SELECT T1.lap FROM pitStops AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId INNER JOIN races AS T3 on T1.raceId = T3.raceId WHERE T2.forename = 'Lewis' AND T2.surname = 'Hamilton' AND T3.year = 2011 AND T3.name = 'Australian Grand Prix'",
        "candidates": {
            "4": "SELECT T2.lap  FROM races AS T1  INNER JOIN pitStops AS T2 ON T1.raceId = T2.raceId  INNER JOIN drivers AS T3 ON T2.driverId = T3.driverId  WHERE T1.year = 2011 AND T1.name = 'Australian Grand Prix' AND T3.forename = 'Lewis' AND T3.surname = 'Hamilton';",
            "1": "SELECT T3.lap FROM races AS T1 INNER JOIN pitStops AS T2 ON T1.raceId = T2.raceId INNER JOIN drivers AS T3 ON T2.driverId = T3.driverId WHERE T1.year = 2011 AND T1.name = 'Australian Grand Prix' AND T3.forename = 'Lewis' AND T3.surname = 'Hamilton';",
            "5": "SELECT T1.lap FROM pitStops AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId INNER JOIN races AS T3 ON T1.raceId = T3.raceId WHERE T2.forename = 'Lewis' AND T2.surname = 'Hamilton' AND T3.year = 2011 AND T3.name = 'Australian Grand Prix'",
            "2": "SELECT T1.lap FROM pitStops AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId INNER JOIN drivers AS T3 ON T1.driverId = T3.driverId WHERE T3.forename = 'Lewis' AND T3.surname = 'Hamilton' AND T2.name = 'Australian Grand Prix' AND T2.year = 2011",
            "3": "SELECT   T1.lap FROM pitStops AS T1 INNER JOIN drivers AS T2   ON T1.driverId = T2.driverId INNER JOIN races AS T3   ON T1.raceId = T3.raceId WHERE   T2.forename = 'Lewis' AND T2.surname = 'Hamilton' AND T3.year = 2011 AND T3.name = 'Australian Grand Prix';",
            "6": "SELECT T3.lap FROM races AS T1 INNER JOIN drivers AS T2 ON T1.raceid = T2.driverid INNER JOIN pitStops AS T3 ON T2.driverid = T3.driverid WHERE T2.forename = \"Lewis\" AND T2.surname = \"Hamilton\" AND T1.year = 2011 AND T1.name = \"Australian Grand Prix\""
        }
    },
    {
        "question_id": 1009,
        "database": "formula_1",
        "evidence": "time spent at pit stop refers to duration",
        "question": "Please list the time each driver spent at the pit stop during the 2011 Australian Grand Prix.",
        "schema_used": {
            "pitstops": [
                "duration",
                "raceid"
            ],
            "races": [
                "raceid",
                "year",
                "name"
            ]
        },
        "gold": "SELECT T1.duration FROM pitStops AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId WHERE T2.year = 2011 AND T2.name = 'Australian Grand Prix'",
        "candidates": {
            "4": "SELECT T2.forename, T2.surname, T3.duration  FROM races AS T1  INNER JOIN pitStops AS T3 ON T1.raceId = T3.raceId  INNER JOIN drivers AS T2 ON T3.driverId = T2.driverId  WHERE T1.year = 2011 AND T1.name = 'Australian Grand Prix';",
            "1": "SELECT T3.forename, T3.surname, T2.duration FROM races AS T1 INNER JOIN pitStops AS T2 ON T1.raceId = T2.raceId INNER JOIN drivers AS T3 ON T2.driverId = T3.driverId WHERE T1.year = 2011 AND T1.name = 'Australian Grand Prix';",
            "5": "SELECT T1.forename,  T1.surname,  T2.duration  FROM drivers AS T1  INNER JOIN pitStops AS T3  ON T1.driverId = T3.driverId  INNER JOIN races AS T4  ON T3.raceId = T4.raceId  WHERE  T4.year = 2011  AND T4.name = 'Australian Grand Prix'",
            "2": "SELECT T1.forename,  T1.surname,  T2.duration  FROM drivers AS T1  INNER JOIN pitStops AS T3  ON T1.driverId = T3.driverId  INNER JOIN races AS T4  ON T3.raceId = T4.raceId  WHERE T4.name = 'Australian Grand Prix'  AND T4.year = 2011",
            "6": "SELECT T3.forename ,  T3.surname ,  T2.duration FROM races AS T1 JOIN pitStops AS T2 ON T1.raceid  =  T2.raceid JOIN drivers AS T3 ON T2.driverid  =  T3.driverid WHERE T1.year  =  2011 AND T1.name  =  \"Australian Grand Prix\"",
            "3": "SELECT   T1.duration FROM pitStops AS T1 INNER JOIN races AS T2   ON T1.raceId = T2.raceId WHERE   T2.year = 2011 AND T2.name = 'Australian Grand Prix';"
        }
    },
    {
        "question_id": 1010,
        "database": "formula_1",
        "evidence": "lap recod means the fastest time recorded which refers to time",
        "question": "What is the lap record set by Lewis Hamilton in a Formula_1 race?",
        "schema_used": {
            "laptimes": [
                "time",
                "driverid"
            ],
            "drivers": [
                "driverid",
                "forename",
                "surname"
            ]
        },
        "gold": "SELECT T1.time FROM lapTimes AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId WHERE T2.forename = 'Lewis' AND T2.surname = 'Hamilton'",
        "candidates": {
            "4": "SELECT MIN(T2.time)  FROM drivers AS T1  INNER JOIN lapTimes AS T2 ON T1.driverId = T2.driverId  WHERE T1.forename = 'Lewis' AND T1.surname = 'Hamilton';",
            "5": "SELECT MIN(T1.time) FROM lapTimes AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T2.forename = 'Lewis' AND T2.surname = 'Hamilton'",
            "2": "SELECT MIN(T1.time) FROM lapTimes AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T2.forename = 'Lewis'",
            "1": "SELECT MIN(T1.time) AS fastest_lap_time FROM lapTimes AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T2.forename = 'Lewis' AND T2.surname = 'Hamilton';",
            "6": "SELECT T1.time FROM lapTimes AS T1 JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T2.forename = \"Lewis\" AND T2.surname = \"Hamilton\" ORDER BY T1.time ASC LIMIT 1",
            "3": "SELECT   T1.time FROM lapTimes AS T1 INNER JOIN drivers AS T2   ON T1.driverId = T2.driverId WHERE   T2.forename = 'Lewis' AND T2.surname = 'Hamilton' ORDER BY   T1.time LIMIT 1;"
        }
    },
    {
        "question_id": 1011,
        "database": "formula_1",
        "evidence": "shortest lap time refers to MIN(time); the time format for the shortest lap time is 'MM:SS.mmm' or 'M:SS.mmm'; full name of the driver refers to forename, surname",
        "question": "Which top 20 driver created the shortest lap time ever record in a Formula_1 race? Please give them full names.",
        "schema_used": {
            "lap_times_in_seconds": [
                "driverid",
                "time_in_seconds"
            ],
            "drivers": [
                "forename",
                "surname",
                "driverid"
            ],
            "laptimes": [
                "driverid",
                "time"
            ]
        },
        "gold": "WITH lap_times_in_seconds AS (SELECT driverId, (CASE WHEN SUBSTR(time, 1, INSTR(time, ':') - 1) <> '' THEN CAST(SUBSTR(time, 1, INSTR(time, ':') - 1) AS REAL) * 60 ELSE 0 END + CASE WHEN SUBSTR(time, INSTR(time, ':') + 1, INSTR(time, '.') - INSTR(time, ':') - 1) <> '' THEN CAST(SUBSTR(time, INSTR(time, ':') + 1, INSTR(time, '.') - INSTR(time, ':') - 1) AS REAL) ELSE 0 END + CASE WHEN SUBSTR(time, INSTR(time, '.') + 1) <> '' THEN CAST(SUBSTR(time, INSTR(time, '.') + 1) AS REAL) / 1000 ELSE 0 END) AS time_in_seconds FROM lapTimes) SELECT T2.forename, T2.surname, T1.driverId FROM (SELECT driverId, MIN(time_in_seconds) AS min_time_in_seconds FROM lap_times_in_seconds GROUP BY driverId) AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId ORDER BY T1.min_time_in_seconds ASC LIMIT 20",
        "candidates": {
            "4": "SELECT T1.forename, T1.surname  FROM drivers AS T1  INNER JOIN lapTimes AS T2 ON T1.driverId = T2.driverId  ORDER BY CAST(SUBSTR(T2.time, 1, INSTR(T2.time, ':') - 1) AS INT) * 60 + CAST(SUBSTR(T2.time, INSTR(T2.time, ':') + 1) AS REAL) ASC  LIMIT 20;",
            "5": "SELECT T1.forename,  T1.surname  FROM  drivers AS T1  INNER JOIN lapTimes AS T2  ON T1.driverId = T2.driverId  ORDER BY  T2.time  LIMIT 20",
            "2": "SELECT forename, surname FROM drivers WHERE driverId = ( SELECT driverId FROM lapTimes ORDER BY time LIMIT 1 )",
            "1": "SELECT T2.forename, T2.surname  FROM lapTimes AS T1  INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId  ORDER BY strftime('%s', replace(T1.time, '.', ':')) + CAST(strftime('%f', T1.time) AS REAL) ASC  LIMIT 20;",
            "6": "SELECT T2.forename, T2.surname FROM lapTimes AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId ORDER BY T1.time ASC LIMIT 20",
            "3": "SELECT T2.forename, T2.surname FROM lapTimes AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId ORDER BY T1.time LIMIT 20"
        }
    },
    {
        "question_id": 1012,
        "database": "formula_1",
        "evidence": "fastest lap refers to MIN(time)",
        "question": "What was the position of the circuits during Lewis Hamilton's fastest lap in a Formula_1 race?",
        "schema_used": {
            "laptimes": [
                "position",
                "driverid",
                "time"
            ],
            "drivers": [
                "driverid",
                "forename",
                "surname"
            ]
        },
        "gold": "SELECT T1.position FROM lapTimes AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId WHERE T2.forename = 'Lewis' AND T2.surname = 'Hamilton' ORDER BY T1.time ASC LIMIT 1",
        "candidates": {
            "5": "SELECT T1.position FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T2.forename = 'Lewis' AND T2.surname = 'Hamilton' ORDER BY T1.time LIMIT 1",
            "2": "SELECT T1.position FROM results AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T2.forename = 'Lewis' AND T2.surname = 'Hamilton' ORDER BY T1.milliseconds LIMIT 1",
            "6": "SELECT T1.position FROM results AS T1 JOIN drivers AS T2 ON T1.driverid = T2.driverid WHERE T2.forename = \"Lewis\" AND T2.surname = \"Hamilton\" ORDER BY T1.time ASC LIMIT 1",
            "4": "SELECT r.raceId, d.forename, d.surname, MIN(results.time) FROM results  INNER JOIN races r ON results.raceId = r.raceId INNER JOIN drivers d ON results.driverId = d.driverId WHERE d.forename = 'Lewis' AND d.surname = 'Hamilton' GROUP BY r.raceId ORDER BY MIN(results.time) ASC LIMIT 1;",
            "3": "SELECT   T1.position FROM results AS T1 INNER JOIN drivers AS T2   ON T1.driverId = T2.driverId WHERE   T2.forename = 'Lewis' AND T2.surname = 'Hamilton' ORDER BY   T1.fastestLapTime LIMIT 1;",
            "1": "SELECT      c.circuitId,      c.name,      c.location,      c.country FROM      races r INNER JOIN      results res ON r.raceId = res.raceId INNER JOIN      drivers d ON res.driverId = d.driverId INNER JOIN      circuits c ON r.circuitId = c.circuitId WHERE      d.forename = 'Lewis'      AND d.surname = 'Hamilton'     AND res.fastestLapTime = (         SELECT MIN(res2.fastestLapTime)         FROM results res2         INNER JOIN drivers d2 ON res2.driverId = d2.driverId         WHERE d2.forename = 'Lewis'          AND d2.surname = 'Hamilton'         AND res2.raceId = r.raceId     )"
        }
    },
    {
        "question_id": 1013,
        "database": "formula_1",
        "evidence": "lap record means the fastest time recorded which refers to time",
        "question": "What is the lap record for the Austrian Grand Prix Circuit?",
        "schema_used": {
            "fastest_lap_times": [
                "fastestlaptime",
                "raceid"
            ],
            "races": [
                "raceid",
                "circuitid",
                "name"
            ],
            "circuits": [
                "circuitid"
            ],
            "results": [
                "raceid",
                "fastestlaptime"
            ]
        },
        "gold": "WITH fastest_lap_times AS ( SELECT T1.raceId, T1.fastestLapTime FROM results AS T1 WHERE T1.FastestLapTime IS NOT NULL) SELECT MIN(fastest_lap_times.fastestLapTime) as lap_record FROM fastest_lap_times INNER JOIN races AS T2 on fastest_lap_times.raceId = T2.raceId INNER JOIN circuits AS T3 on T2.circuitId = T3.circuitId WHERE T2.name = 'Austrian Grand Prix'",
        "candidates": {
            "5": "SELECT MIN(time) FROM lapTimes AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T2.name = 'Austrian Grand Prix'",
            "4": "SELECT MIN(T3.time)  FROM races AS T1  INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitId  INNER JOIN lapTimes AS T3 ON T1.raceId = T3.raceId  WHERE T1.name = 'Austrian Grand Prix';",
            "1": "SELECT MIN(T2.time) AS lap_record FROM races AS T1 INNER JOIN lapTimes AS T2 ON T1.raceId = T2.raceId INNER JOIN circuits AS T3 ON T1.circuitId = T3.circuitId WHERE T3.name = 'Austrian Grand Prix Circuit';",
            "2": "SELECT MIN(T1.time) FROM lapTimes AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId WHERE T2.name = 'Austrian Grand Prix'",
            "6": "SELECT time FROM races AS T1 JOIN lapTimes AS T2 ON T1.raceid = T2.raceid WHERE T1.name = 'Austrian Grand Prix' ORDER BY T2.time ASC LIMIT 1",
            "3": "SELECT   T1.time FROM lapTimes AS T1 INNER JOIN races AS T2   ON T1.raceId = T2.raceId WHERE   T2.name = 'Austrian Grand Prix' ORDER BY   T1.time LIMIT 1;"
        }
    },
    {
        "question_id": 1014,
        "database": "formula_1",
        "evidence": "lap record means the fastest time recorded which refers to time",
        "question": "Please list the lap records for the circuits in Italy.",
        "schema_used": {
            "fastest_lap_times": [
                "time_in_seconds",
                "raceid"
            ],
            "races": [
                "raceid",
                "circuitid"
            ],
            "circuits": [
                "circuitid",
                "country"
            ],
            "results": [
                "fastestlaptime",
                "raceid"
            ]
        },
        "gold": "WITH fastest_lap_times AS (SELECT T1.raceId, T1.FastestLapTime, (CAST(SUBSTR(T1.FastestLapTime, 1, INSTR(T1.FastestLapTime, ':') - 1) AS REAL) * 60) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, ':') + 1, INSTR(T1.FastestLapTime, '.') - INSTR(T1.FastestLapTime, ':') - 1) AS REAL)) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, '.') + 1) AS REAL) / 1000) as time_in_seconds FROM results AS T1 WHERE T1.FastestLapTime IS NOT NULL ) SELECT T1.FastestLapTime as lap_record FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId INNER JOIN circuits AS T3 on T2.circuitId = T3.circuitId INNER JOIN (SELECT MIN(fastest_lap_times.time_in_seconds) as min_time_in_seconds FROM fastest_lap_times INNER JOIN races AS T2 on fastest_lap_times.raceId = T2.raceId INNER JOIN circuits AS T3 on T2.circuitId = T3.circuitId WHERE T3.country = 'Italy' ) AS T4 ON (CAST(SUBSTR(T1.FastestLapTime, 1, INSTR(T1.FastestLapTime, ':') - 1) AS REAL) * 60) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, ':') + 1, INSTR(T1.FastestLapTime, '.') - INSTR(T1.FastestLapTime, ':') - 1) AS REAL)) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, '.') + 1) AS REAL) / 1000) = T4.min_time_in_seconds LIMIT 1",
        "candidates": {
            "4": "SELECT T1.raceId, MIN(T3.time) as fastest_lap_time FROM races AS T1 INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitId INNER JOIN lapTimes AS T3 ON T1.raceId = T3.raceId WHERE T2.country = 'Italy' GROUP BY T1.raceId;",
            "5": "SELECT T1.time FROM lapTimes AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId INNER JOIN circuits AS T3 ON T2.circuitId = T3.circuitId WHERE T3.country = 'Italy' ORDER BY T1.time LIMIT 1",
            "2": "SELECT T1.time FROM lapTimes AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId INNER JOIN circuits AS T3 ON T2.circuitId = T3.circuitId WHERE T3.country = 'Italy' ORDER BY T1.time LIMIT 1",
            "6": "SELECT T3.time FROM circuits AS T1 INNER JOIN races AS T2 ON T1.circuitId = T2.circuitId INNER JOIN lapTimes AS T3 ON T2.raceId = T3.raceId WHERE T1.country = 'Italy'",
            "3": "SELECT T3.time FROM races AS T1 JOIN circuits AS T2 ON T1.circuitId = T2.circuitId JOIN lapTimes AS T3 ON T1.raceId = T3.raceId WHERE T2.country = \"Italy\"",
            "1": "SELECT      r.raceId,     c.circuitId,     MIN(lt.time) AS fastest_lap_time FROM      races r JOIN      circuits c ON r.circuitId = c.circuitId JOIN      lapTimes lt ON r.raceId = lt.raceId WHERE      c.country = 'Italy' GROUP BY      r.raceId, c.circuitId;"
        }
    },
    {
        "question_id": 1015,
        "database": "formula_1",
        "evidence": "lap record means the fastest time recorded which refers to time",
        "question": "In which Formula_1 race was the lap record for the Austrian Grand Prix Circuit set?",
        "schema_used": {
            "fastest_lap_times": [
                "time_in_seconds",
                "raceid"
            ],
            "races": [
                "raceid",
                "circuitid",
                "name"
            ],
            "circuits": [
                "circuitid"
            ],
            "results": [
                "raceid",
                "fastestlaptime"
            ]
        },
        "gold": "WITH fastest_lap_times AS ( SELECT T1.raceId, T1.FastestLapTime, (CAST(SUBSTR(T1.FastestLapTime, 1, INSTR(T1.FastestLapTime, ':') - 1) AS REAL) * 60) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, ':') + 1, INSTR(T1.FastestLapTime, '.') - INSTR(T1.FastestLapTime, ':') - 1) AS REAL)) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, '.') + 1) AS REAL) / 1000) as time_in_seconds FROM results AS T1 WHERE T1.FastestLapTime IS NOT NULL ) SELECT T2.name FROM races AS T2 INNER JOIN circuits AS T3 on T2.circuitId = T3.circuitId INNER JOIN results AS T1 on T2.raceId = T1.raceId INNER JOIN ( SELECT MIN(fastest_lap_times.time_in_seconds) as min_time_in_seconds FROM fastest_lap_times INNER JOIN races AS T2 on fastest_lap_times.raceId = T2.raceId INNER JOIN circuits AS T3 on T2.circuitId = T3.circuitId WHERE T2.name = 'Austrian Grand Prix') AS T4 ON (CAST(SUBSTR(T1.FastestLapTime, 1, INSTR(T1.FastestLapTime, ':') - 1) AS REAL) * 60) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, ':') + 1, INSTR(T1.FastestLapTime, '.') - INSTR(T1.FastestLapTime, ':') - 1) AS REAL)) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, '.') + 1) AS REAL) / 1000) = T4.min_time_in_seconds WHERE T2.name = 'Austrian Grand Prix'",
        "candidates": {
            "4": "SELECT T1.name  FROM races AS T1  INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitId  INNER JOIN lapTimes AS T3 ON T1.raceId = T3.raceId  WHERE T2.circuitRef = 'austrian'  ORDER BY T3.time ASC  LIMIT 1;",
            "5": "SELECT T1.name FROM races AS T1 INNER JOIN lapTimes AS T2 ON T1.raceId = T2.raceId ORDER BY T2.time LIMIT 1",
            "2": "SELECT T1.name FROM races AS T1 INNER JOIN lapTimes AS T2 ON T1.raceId = T2.raceId WHERE T1.name = 'Austrian Grand Prix' ORDER BY T2.time LIMIT 1",
            "3": "SELECT T1.name FROM races AS T1 JOIN lapTimes AS T2 ON T1.raceId = T2.raceId WHERE T1.name = 'Austrian Grand Prix' ORDER BY T2.time LIMIT 1",
            "6": "SELECT T1.name FROM races AS T1 JOIN lapTimes AS T2 ON T1.raceId = T2.raceId WHERE T1.name = \"Austrian Grand Prix\" ORDER BY T2.time ASC LIMIT 1",
            "1": "SELECT r.name FROM races r JOIN circuits c ON r.circuitId = c.circuitId JOIN (     SELECT raceId, MIN(strftime('%s', time)) AS min_time     FROM lapTimes     WHERE raceId IN (         SELECT raceId          FROM races          WHERE circuitId = (             SELECT circuitId              FROM circuits              WHERE circuitRef = 'austrian'         )     )     GROUP BY raceId ) lt ON r.raceId = lt.raceId;"
        }
    },
    {
        "question_id": 1016,
        "database": "formula_1",
        "evidence": "lap record means the fastest time recorded which refers to time, how long spent at pitstop refers to duration",
        "question": "In the race a driver set the lap record for the Austrian Grand Prix Circuit, how long did he spent at the pit stop at that same race?",
        "schema_used": {
            "fastest_lap_times": [
                "time_in_seconds",
                "raceid"
            ],
            "races": [
                "raceid",
                "circuitid",
                "name"
            ],
            "circuits": [
                "circuitid"
            ],
            "pitstops": [
                "duration",
                "raceid",
                "driverid",
                "min_time_in_seconds"
            ],
            "lap_record_race": [
                "raceid",
                "driverid"
            ],
            "results": [
                "raceid",
                "driverid",
                "fastestlaptime"
            ]
        },
        "gold": "WITH fastest_lap_times AS ( SELECT T1.raceId, T1.driverId, T1.FastestLapTime, (CAST(SUBSTR(T1.FastestLapTime, 1, INSTR(T1.FastestLapTime, ':') - 1) AS REAL) * 60) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, ':') + 1, INSTR(T1.FastestLapTime, '.') - INSTR(T1.FastestLapTime, ':') - 1) AS REAL)) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, '.') + 1) AS REAL) / 1000) as time_in_seconds FROM results AS T1 WHERE T1.FastestLapTime IS NOT NULL), lap_record_race AS ( SELECT T1.raceId, T1.driverId FROM results AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId INNER JOIN circuits AS T3 on T2.circuitId = T3.circuitId INNER JOIN ( SELECT MIN(fastest_lap_times.time_in_seconds) as min_time_in_seconds FROM fastest_lap_times INNER JOIN races AS T2 on fastest_lap_times.raceId = T2.raceId INNER JOIN circuits AS T3 on T2.circuitId = T3.circuitId WHERE T2.name = 'Austrian Grand Prix') AS T4 ON (CAST(SUBSTR(T1.FastestLapTime, 1, INSTR(T1.FastestLapTime, ':') - 1) AS REAL) * 60) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, ':') + 1, INSTR(T1.FastestLapTime, '.') - INSTR(T1.FastestLapTime, ':') - 1) AS REAL)) + (CAST(SUBSTR(T1.FastestLapTime, INSTR(T1.FastestLapTime, '.') + 1) AS REAL) / 1000) = T4.min_time_in_seconds WHERE T2.name = 'Austrian Grand Prix') SELECT T4.duration FROM lap_record_race INNER JOIN pitStops AS T4 on lap_record_race.raceId = T4.raceId AND lap_record_race.driverId = T4.driverId",
        "candidates": {
            "5": "SELECT T1.duration FROM pitStops AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId INNER JOIN lapTimes AS T3 ON T1.raceId = T3.raceId WHERE T2.name = 'Austrian Grand Prix' ORDER BY T3.time LIMIT 1",
            "4": "SELECT T3.duration  FROM races AS T1  INNER JOIN lapTimes AS T2 ON T1.raceId = T2.raceId  INNER JOIN pitStops AS T3 ON T1.raceId = T3.raceId AND T2.driverId = T3.driverId  WHERE T1.name = 'Austrian Grand Prix'  ORDER BY T2.time ASC  LIMIT 1;",
            "2": "SELECT T2.duration FROM races AS T1 INNER JOIN pitStops AS T2 ON T1.raceId = T2.raceId INNER JOIN lapTimes AS T3 ON T1.raceId = T3.raceId WHERE T1.name = 'Austrian Grand Prix' ORDER BY T3.time LIMIT 1",
            "6": "SELECT T3.duration FROM laptimes AS T1 JOIN races AS T2 ON T1.raceid  =  T2.raceid JOIN pitstops AS T3 ON T1.raceid  =  T3.raceid AND T1.driverid  =  T3.driverid WHERE T2.name  =  \"Austrian Grand Prix\" ORDER BY T1.time LIMIT 1",
            "3": "SELECT   T3.duration FROM lapTimes AS T1 INNER JOIN races AS T2   ON T1.raceId = T2.raceId INNER JOIN pitStops AS T3   ON T1.raceId = T3.raceId AND T1.driverId = T3.driverId WHERE   T2.name = 'Austrian Grand Prix' ORDER BY   T1.time LIMIT 1;",
            "1": "SELECT T3.duration FROM races AS T1 JOIN circuits AS T2 ON T1.circuitId = T2.circuitId JOIN lapTimes AS T4 ON T1.raceId = T4.raceId JOIN pitStops AS T3 ON T1.raceId = T3.raceId AND T4.driverId = T3.driverId WHERE T2.name = 'Austrian Grand Prix' AND T4.time = (     SELECT MIN(T4.time)     FROM lapTimes AS T4     JOIN races AS T1 ON T4.raceId = T1.raceId     JOIN circuits AS T2 ON T1.circuitId = T2.circuitId     WHERE T2.name = 'Austrian Grand Prix' )"
        }
    },
    {
        "question_id": 1017,
        "database": "formula_1",
        "evidence": "lap records means the fastest time recorded which refers to time; coordinates are expressed as latitude and longitude which refers to (lat, lng)",
        "question": "Please list the location coordinates of the circuits whose lap record is 1:29.488.",
        "schema_used": {
            "circuits": [
                "lat",
                "lng",
                "circuitid"
            ],
            "laptimes": [
                "raceid",
                "time"
            ],
            "races": [
                "raceid",
                "circuitid"
            ]
        },
        "gold": "SELECT T3.lat, T3.lng FROM lapTimes AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId INNER JOIN circuits AS T3 on T2.circuitId = T3.circuitId WHERE T1.time = '1:29.488'",
        "candidates": {
            "4": "SELECT T2.lat, T2.lng  FROM lapTimes AS T1  INNER JOIN circuits AS T2 ON T1.raceId = T2.circuitId  WHERE T1.time = '1:29.488';",
            "1": "SELECT T2.lat, T2.lng  FROM lapTimes AS T1  INNER JOIN circuits AS T2 ON T1.raceId = (SELECT raceId FROM races WHERE circuitId = T2.circuitId)  WHERE T1.time = '1:29.488';",
            "5": "SELECT T1.lat, T1.lng FROM circuits AS T1 INNER JOIN races AS T2 ON T1.circuitId = T2.circuitId INNER JOIN lapTimes AS T3 ON T2.raceId = T3.raceId WHERE T3.time = '1:29.488'",
            "2": "SELECT T2.lat, T2.lng FROM lapTimes AS T1 INNER JOIN races AS T3 ON T1.raceId = T3.raceId INNER JOIN circuits AS T2 ON T3.circuitId = T2.circuitId WHERE T1.time = '1:29.488'",
            "6": "SELECT T3.lat, T3.lng FROM lapTimes AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId INNER JOIN circuits AS T3 ON T2.circuitId = T3.circuitId WHERE T1.time = '1:29.488'",
            "3": "SELECT T3.lat, T3.lng FROM lapTimes AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId INNER JOIN circuits AS T3 ON T2.circuitId = T3.circuitId WHERE T1.time = '1:29.488'"
        }
    },
    {
        "question_id": 1018,
        "database": "formula_1",
        "evidence": "average time in milliseconds spent at pit stop refers to AVG(milliseconds)",
        "question": "What was the average time in milliseconds Lewis Hamilton spent at a pit stop during Formula_1 races?",
        "schema_used": {
            "pitstops": [
                "milliseconds",
                "driverid"
            ],
            "drivers": [
                "driverid",
                "forename",
                "surname"
            ]
        },
        "gold": "SELECT AVG(milliseconds) FROM pitStops AS T1 INNER JOIN drivers AS T2 on T1.driverId = T2.driverId WHERE T2.forename = 'Lewis' AND T2.surname = 'Hamilton'",
        "candidates": {
            "4": "SELECT AVG(T1.milliseconds)  FROM pitStops AS T1  INNER JOIN drivers AS T2  ON T1.driverId = T2.driverId  WHERE T2.forename = 'Lewis' AND T2.surname = 'Hamilton';",
            "1": "SELECT AVG(T1.milliseconds)  FROM pitStops AS T1  INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId  WHERE T2.forename = 'Lewis' AND T2.surname = 'Hamilton';",
            "5": "SELECT AVG(T1.milliseconds) FROM pitStops AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T2.forename = 'Lewis' AND T2.surname = 'Hamilton'",
            "2": "SELECT AVG(T1.milliseconds) FROM pitStops AS T1 INNER JOIN drivers AS T2 ON T1.driverId = T2.driverId WHERE T2.forename = 'Lewis' AND T2.surname = 'Hamilton'",
            "6": "SELECT AVG(T1.milliseconds) FROM pitStops AS T1 JOIN drivers AS T2 ON T1.driverId  =  T2.driverId WHERE T2.forename  =  \"Lewis\" AND T2.surname  =  \"Hamilton\"",
            "3": "SELECT   AVG(T1.milliseconds) FROM pitStops AS T1 INNER JOIN drivers AS T2   ON T1.driverId = T2.driverId WHERE   T2.forename = 'Lewis' AND T2.surname = 'Hamilton';"
        }
    },
    {
        "question_id": 1019,
        "database": "formula_1",
        "evidence": "average = AVG(milliseconds)",
        "question": "What is the average lap time in milliseconds of all the lap records set on the various circuits in Italy?",
        "schema_used": {
            "laptimes": [
                "raceid",
                "lap",
                "milliseconds"
            ],
            "races": [
                "raceid",
                "circuitid"
            ],
            "circuits": [
                "circuitid",
                "country"
            ]
        },
        "gold": "SELECT CAST(SUM(T1.milliseconds) AS REAL) / COUNT(T1.lap) FROM lapTimes AS T1 INNER JOIN races AS T2 on T1.raceId = T2.raceId INNER JOIN circuits AS T3 on T2.circuitId = T3.circuitId WHERE T3.country = 'Italy'",
        "candidates": {
            "4": "SELECT AVG(T3.milliseconds)  FROM races AS T1  INNER JOIN circuits AS T2 ON T1.circuitId = T2.circuitId  INNER JOIN lapTimes AS T3 ON T1.raceId = T3.raceId  WHERE T2.country = 'Italy'",
            "1": "SELECT AVG(T2.milliseconds)  FROM races AS T1  INNER JOIN lapTimes AS T2 ON T1.raceId = T2.raceId  INNER JOIN circuits AS T3 ON T1.circuitId = T3.circuitId  WHERE T3.country = 'Italy';",
            "5": "SELECT AVG(milliseconds) FROM lapTimes AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId INNER JOIN circuits AS T3 ON T2.circuitId = T3.circuitId WHERE T3.country = 'Italy'",
            "2": "SELECT AVG(T1.milliseconds) FROM lapTimes AS T1 INNER JOIN races AS T2 ON T1.raceId = T2.raceId INNER JOIN circuits AS T3 ON T2.circuitId = T3.circuitId WHERE T3.country = 'Italy'",
            "6": "SELECT AVG(T2.milliseconds) FROM circuits AS T1 INNER JOIN lapTimes AS T2 ON T1.circuitId = T2.raceId WHERE T1.country = \"Italy\"",
            "3": "SELECT   AVG(T1.milliseconds) FROM lapTimes AS T1 INNER JOIN races AS T2   ON T1.raceId = T2.raceId INNER JOIN circuits AS T3   ON T2.circuitId = T3.circuitId WHERE   T3.country = 'Italy';"
        }
    }
]